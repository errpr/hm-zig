use @import("win32_types.zig");

//Can't find these functions in winsdk libs or dlls. Some are probably removed?
//pub extern fn stdcallcc GetEncSChannel(pData: ?*(?*BYTE), dwDecSize: ?*DWORD) BOOL;
//pub extern fn stdcallcc CngGetFipsAlgorithmMode() BOOLEAN;
//pub extern fn stdcallcc CryptCancelAsyncRetrieval(hAsyncRetrieval: HCRYPTASYNC) BOOL;
//pub extern fn stdcallcc CryptExportPKCS8Ex(psExportParams: ?*CRYPT_PKCS8_EXPORT_PARAMS, dwFlags: DWORD, pvAuxInfo: ?*c_void, pbPrivateKeyBlob: ?*BYTE, pcbPrivateKeyBlob: ?*DWORD) BOOL;
//pub extern fn stdcallcc CryptFlushTimeValidObject(pszFlushTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: LPVOID) BOOL;
//pub extern fn stdcallcc CryptGetTimeValidObject(pszTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, pftValidFor: LPFILETIME, dwFlags: DWORD, dwTimeout: DWORD, ppvObject: ?*LPVOID, pCredentials: PCRYPT_CREDENTIALS, pExtraInfo: PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO) BOOL;
//pub extern fn stdcallcc CryptProtectDataNoUI(pDataIn: ?*DATA_BLOB, szDataDescr: LPCWSTR, pOptionalEntropy: ?*DATA_BLOB, pvReserved: PVOID, pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT, dwFlags: DWORD, pbOptionalPassword: ?*const BYTE, cbOptionalPassword: DWORD, pDataOut: ?*DATA_BLOB) BOOL;
//pub extern fn stdcallcc CryptUnprotectDataNoUI(pDataIn: ?*DATA_BLOB, ppszDataDescr: ?*LPWSTR, pOptionalEntropy: ?*DATA_BLOB, pvReserved: PVOID, pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT, dwFlags: DWORD, pbOptionalPassword: ?*const BYTE, cbOptionalPassword: DWORD, pDataOut: ?*DATA_BLOB) BOOL;
//pub extern fn stdcallcc CallEnclave(lpRoutine: LPENCLAVE_ROUTINE, lpParameter: LPVOID, fWaitForThread: BOOL, lpReturnValue: ?*LPVOID) BOOL;
//pub extern fn stdcallcc CompareObjectHandles(hFirstObjectHandle: HANDLE, hSecondObjectHandle: HANDLE) BOOL;
//pub extern fn stdcallcc ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue: ULONGLONG, lpPerformanceCounterValue: PULONGLONG, lpConversionError: PULONGLONG) HRESULT;
//pub extern fn stdcallcc ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue: ULONGLONG, lpAuxiliaryCounterValue: PULONGLONG, lpConversionError: PULONGLONG) HRESULT;
//pub extern fn stdcallcc DecodeRemotePointer(ProcessHandle: HANDLE, Ptr: PVOID, DecodedPtr: ?*PVOID) HRESULT;
//pub extern fn stdcallcc DeleteEnclave(lpAddress: LPVOID) BOOL;
//pub extern fn stdcallcc DeriveCapabilitySidsFromName(CapName: LPCWSTR, CapabilityGroupSids: ?*(?*PSID), CapabilityGroupSidCount: ?*DWORD, CapabilitySids: ?*(?*PSID), CapabilitySidCount: ?*DWORD) BOOL;
//pub extern fn stdcallcc EncodeRemotePointer(ProcessHandle: HANDLE, Ptr: PVOID, EncodedPtr: ?*PVOID) HRESULT;
//pub extern fn stdcallcc EnumSystemGeoNames(geoClass: GEOCLASS, geoEnumProc: GEO_ENUMNAMEPROC, data: LPARAM) BOOL;
//pub extern fn stdcallcc GetGeoInfoEx(location: PWSTR, geoType: GEOTYPE, geoData: PWSTR, geoDataCount: c_int) c_int;
//pub extern fn stdcallcc GetIntegratedDisplaySize(sizeInInches: ?*f64) HRESULT;
//pub extern fn stdcallcc GetOsManufacturingMode(pbEnabled: PBOOL) BOOL;
//pub extern fn stdcallcc GetSystemWow64Directory2A(lpBuffer: LPSTR, uSize: UINT, ImageFileMachineType: WORD) UINT;
//pub extern fn stdcallcc GetSystemWow64Directory2W(lpBuffer: LPWSTR, uSize: UINT, ImageFileMachineType: WORD) UINT;
//pub extern fn stdcallcc GetUserDefaultGeoName(geoName: LPWSTR, geoNameCount: c_int) c_int;
//pub extern fn stdcallcc IsWow64GuestMachineSupported(WowGuestMachine: USHORT, MachineIsSupported: ?*BOOL) HRESULT;
//pub extern fn stdcallcc IsWow64Process2(hProcess: HANDLE, pProcessMachine: ?*USHORT, pNativeMachine: ?*USHORT) BOOL;
//pub extern fn stdcallcc LoadEnclaveImageA(lpEnclaveAddress: LPVOID, lpImageName: LPCSTR) BOOL;
//pub extern fn stdcallcc LoadEnclaveImageW(lpEnclaveAddress: LPVOID, lpImageName: LPCWSTR) BOOL;
//pub extern fn stdcallcc LoadStringByReference(Flags: DWORD, Language: PCWSTR, SourceString: PCWSTR, Buffer: PWSTR, cchBuffer: ULONG, Directory: PCWSTR, pcchBufferOut: PULONG) BOOL;
//pub extern fn stdcallcc LookupAccountNameLocalA(lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
//pub extern fn stdcallcc LookupAccountNameLocalW(lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
//pub extern fn stdcallcc LookupAccountSidLocalA(Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
//pub extern fn stdcallcc LookupAccountSidLocalW(Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
//pub extern fn stdcallcc MapViewOfFileNuma2(FileMappingHandle: HANDLE, ProcessHandle: HANDLE, Offset: ULONG64, BaseAddress: PVOID, ViewSize: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, PreferredNode: ULONG) PVOID;
//pub extern fn stdcallcc OpenCommPort(uPortNumber: ULONG, dwDesiredAccess: DWORD, dwFlagsAndAttributes: DWORD) HANDLE;
//pub extern fn stdcallcc OpenFileMappingFromApp(DesiredAccess: ULONG, InheritHandle: BOOL, Name: PCWSTR) HANDLE;
//pub extern fn stdcallcc QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: PULONGLONG) HRESULT;
//pub extern fn stdcallcc QueryInterruptTime(lpInterruptTime: PULONGLONG) void;
//pub extern fn stdcallcc QueryInterruptTimePrecise(lpInterruptTimePrecise: PULONGLONG) void;
//pub extern fn stdcallcc QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: PULONGLONG) void;
//pub extern fn stdcallcc QueryVirtualMemoryInformation(Process: HANDLE, VirtualAddress: ?*const c_void, MemoryInformationClass: WIN32_MEMORY_INFORMATION_CLASS, MemoryInformation: PVOID, MemoryInformationSize: SIZE_T, ReturnSize: PSIZE_T) BOOL;
//pub extern fn stdcallcc ReadDirectoryChangesExW(hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE, ReadDirectoryNotifyInformationClass: READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) BOOL;
//pub extern fn stdcallcc RtlAddGrowableFunctionTable(DynamicTable: ?*PVOID, FunctionTable: PRUNTIME_FUNCTION, EntryCount: DWORD, MaximumEntryCount: DWORD, RangeBase: ULONG_PTR, RangeEnd: ULONG_PTR) DWORD;
//pub extern fn stdcallcc RtlConvertDeviceFamilyInfoToString(pulDeviceFamilyBufferSize: PDWORD, pulDeviceFormBufferSize: PDWORD, DeviceFamily: PWSTR, DeviceForm: PWSTR) DWORD;
//pub extern fn stdcallcc RtlDeleteGrowableFunctionTable(DynamicTable: PVOID) void;
//pub extern fn stdcallcc RtlDrainNonVolatileFlush(NvToken: PVOID) DWORD;
//pub extern fn stdcallcc RtlExtendCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) DWORD;
//pub extern fn stdcallcc RtlFlushNonVolatileMemory(NvToken: PVOID, NvBuffer: PVOID, Size: SIZE_T, Flags: DWORD) DWORD;
//pub extern fn stdcallcc RtlFlushNonVolatileMemoryRanges(NvToken: PVOID, NvRanges: PNV_MEMORY_RANGE, NumRanges: SIZE_T, Flags: DWORD) DWORD;
//pub extern fn stdcallcc RtlFreeNonVolatileToken(NvToken: PVOID) DWORD;
//pub extern fn stdcallcc RtlGetDeviceFamilyInfoEnum(pullUAPInfo: ?*ULONGLONG, pulDeviceFamily: ?*DWORD, pulDeviceForm: ?*DWORD) void;
//pub extern fn stdcallcc RtlGetNonVolatileToken(NvBuffer: PVOID, Size: SIZE_T, NvToken: ?*PVOID) DWORD;
//pub extern fn stdcallcc RtlGrowFunctionTable(DynamicTable: PVOID, NewEntryCount: DWORD) void;
//pub extern fn stdcallcc RtlIncrementCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) DWORD;
//pub extern fn stdcallcc RtlInitializeCorrelationVector(CorrelationVector: PCORRELATION_VECTOR, Version: c_int, Guid: ?*const GUID) DWORD;
//pub extern fn stdcallcc RtlOsDeploymentState(Flags: DWORD) OS_DEPLOYEMENT_STATE_VALUES;
//pub extern fn stdcallcc RtlSwitchedVVI(VersionInfo: PRTL_OSVERSIONINFOEXW, TypeMask: DWORD, ConditionMask: ULONGLONG) DWORD;
//pub extern fn stdcallcc RtlValidateCorrelationVector(Vector: PCORRELATION_VECTOR) DWORD;
//pub extern fn stdcallcc RtlWriteNonVolatileMemory(NvToken: PVOID, NvDestination: ?*c_void, Source: ?*c_void, Size: SIZE_T, Flags: DWORD) DWORD;
//pub extern fn stdcallcc SetProcessValidCallTargets(hProcess: HANDLE, VirtualAddress: PVOID, RegionSize: SIZE_T, NumberOfOffsets: ULONG, OffsetInformation: PCFG_CALL_TARGET_INFO) BOOL;
//pub extern fn stdcallcc SetUserGeoName(geoName: PWSTR) BOOL;
//pub extern fn stdcallcc TerminateEnclave(lpAddress: LPVOID, fWait: BOOL) BOOL;
//pub extern fn stdcallcc TerminateProcessOnMemoryExhaustion(FailedAllocationSize: SIZE_T) void;
//pub extern fn stdcallcc UnmapViewOfFile2(ProcessHandle: HANDLE, BaseAddress: PVOID, UnmapFlags: ULONG) BOOL;
//pub extern fn stdcallcc VirtualAllocFromApp(BaseAddress: PVOID, Size: SIZE_T, AllocationType: ULONG, Protection: ULONG) PVOID;
//pub extern fn stdcallcc VirtualProtectFromApp(Address: PVOID, Size: SIZE_T, NewProtection: ULONG, OldProtection: PULONG) BOOL;
//pub extern fn stdcallcc WTSGetServiceSessionId() DWORD;
//pub extern fn stdcallcc WTSIsServerContainer() BOOLEAN;
//pub extern fn stdcallcc Wow64SetThreadDefaultGuestMachine(Machine: USHORT) USHORT;
//pub extern fn stdcallcc Ndr64AsyncStubCall(pThis: ?*struct_IRpcStubBuffer, pChannel: ?*struct_IRpcChannelBuffer, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
//pub extern fn stdcallcc NdrAsyncStubCall(pThis: ?*struct_IRpcStubBuffer, pChannel: ?*struct_IRpcChannelBuffer, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
//pub extern fn stdcallcc NdrClientGetSupportedSyntaxes(pInf: ?*RPC_CLIENT_INTERFACE, pCount: ?*c_ulong, pArr: ?*(?*MIDL_SYNTAX_INFO)) RPC_STATUS;
//pub extern fn stdcallcc NdrContextHandleMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
//pub extern fn stdcallcc NdrCsArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
//pub extern fn stdcallcc NdrCsArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
//pub extern fn stdcallcc NdrCsArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
//pub extern fn stdcallcc NdrCsArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
//pub extern fn stdcallcc NdrCsArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
//pub extern fn stdcallcc NdrCsTagBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
//pub extern fn stdcallcc NdrCsTagMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
//pub extern fn stdcallcc NdrCsTagMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
//pub extern fn stdcallcc NdrCsTagUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
//pub extern fn stdcallcc NdrServerCall3(pRpcMsg: PRPC_MESSAGE) void;
//pub extern fn stdcallcc NdrServerGetSupportedSyntaxes(pInf: ?*RPC_SERVER_INTERFACE, pCount: ?*c_ulong, pArr: ?*(?*MIDL_SYNTAX_INFO), pPreferSyntaxIndex: ?*c_ulong) RPC_STATUS;
//pub extern fn stdcallcc I_NsClientBindDone() void;
//pub extern fn stdcallcc I_NsClientBindSearch() RPC_STATUS;
//pub extern fn stdcallcc I_NsServerBindSearch() RPC_STATUS;
//pub extern fn stdcallcc I_RpcDefaultAllocate(bh: handle_t, size: usize, RealAlloc: ?extern fn(usize) ?*c_void) ?*c_void;
//pub extern fn stdcallcc I_RpcDefaultFree(bh: handle_t, arg1: ?*c_void, RealFree: ?extern fn(?*c_void) void) void;
//pub extern fn stdcallcc IClassFactory_CreateInstance_Proxy(This: ?*IClassFactory, pUnkOuter: ?*IUnknown, riid: ?*const IID, ppvObject: ?*(?*c_void)) HRESULT;
//pub extern fn stdcallcc IClassFactory_CreateInstance_Stub(This: ?*IClassFactory, riid: ?*const IID, ppvObject: ?*(?*IUnknown)) HRESULT;
//pub extern fn stdcallcc IClassFactory_LockServer_Proxy(This: ?*IClassFactory, fLock: BOOL) HRESULT;
//pub extern fn stdcallcc IClassFactory_LockServer_Stub(This: ?*IClassFactory, fLock: BOOL) HRESULT;
//pub extern fn stdcallcc IClassFactory_RemoteCreateInstance_Proxy(This: ?*IClassFactory, riid: ?*const IID, ppvObject: ?*(?*IUnknown)) HRESULT;
//pub extern fn stdcallcc IClassFactory_RemoteCreateInstance_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IClassFactory_RemoteLockServer_Proxy(This: ?*IClassFactory, fLock: BOOL) HRESULT;
//pub extern fn stdcallcc IClassFactory_RemoteLockServer_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IEnumString_RemoteNext_Proxy(This: ?*IEnumString, celt: ULONG, rgelt: ?*LPOLESTR, pceltFetched: ?*ULONG) HRESULT;
//pub extern fn stdcallcc IEnumString_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IEnumUnknown_Next_Proxy(This: ?*IEnumUnknown, celt: ULONG, rgelt: ?*(?*IUnknown), pceltFetched: ?*ULONG) HRESULT;
//pub extern fn stdcallcc IEnumUnknown_RemoteNext_Proxy(This: ?*IEnumUnknown, celt: ULONG, rgelt: ?*(?*IUnknown), pceltFetched: ?*ULONG) HRESULT;
//pub extern fn stdcallcc IEnumUnknown_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc ISequentialStream_RemoteRead_Proxy(This: ?*ISequentialStream, pv: ?*byte, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
//pub extern fn stdcallcc ISequentialStream_RemoteRead_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc ISequentialStream_RemoteWrite_Proxy(This: ?*ISequentialStream, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
//pub extern fn stdcallcc ISequentialStream_RemoteWrite_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IStream_RemoteCopyTo_Proxy(This: ?*IStream, pstm: ?*IStream, cb: ULARGE_INTEGER, pcbRead: ?*ULARGE_INTEGER, pcbWritten: ?*ULARGE_INTEGER) HRESULT;
//pub extern fn stdcallcc IStream_RemoteCopyTo_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IStream_RemoteSeek_Proxy(This: ?*IStream, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ?*ULARGE_INTEGER) HRESULT;
//pub extern fn stdcallcc IStream_RemoteSeek_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IUnknown_AddRef_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IUnknown_QueryInterface_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc IUnknown_Release_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
//pub extern fn stdcallcc I_RpcBindingInqConnId(Binding: RPC_BINDING_HANDLE, ConnId: ?*(?*c_void), pfFirstCall: ?*c_int) RPC_STATUS;
//pub extern fn stdcallcc I_RpcBindingSetAsync(Binding: RPC_BINDING_HANDLE, BlockingFn: RPC_BLOCKING_FN, ServerTid: c_ulong) RPC_STATUS;
//pub extern fn stdcallcc I_RpcGetAssociationContext(BindingHandle: RPC_BINDING_HANDLE, AssociationContext: ?*(?*c_void)) RPC_STATUS;
//pub extern fn stdcallcc I_RpcGetServerContextList(BindingHandle: RPC_BINDING_HANDLE) ?*c_void;
//pub extern fn stdcallcc I_RpcLaunchDatagramReceiveThread(pAddress: ?*c_void) RPC_STATUS;
//pub extern fn stdcallcc I_RpcMonitorAssociation(Handle: RPC_BINDING_HANDLE, RundownRoutine: PRPC_RUNDOWN, Context: ?*c_void) RPC_STATUS;
//pub extern fn stdcallcc I_RpcProxyNewConnection(ConnectionType: c_ulong, ServerAddress: ?*c_ushort, ServerPort: ?*c_ushort, MinConnTimeout: ?*c_ushort, ConnectionParameter: ?*c_void, CallOutState: ?*RDR_CALLOUT_STATE, ProxyCallbackInterface: ?*I_RpcProxyCallbackInterface) RPC_STATUS;
//pub extern fn stdcallcc I_RpcReplyToClientWithStatus(ConnectionParameter: ?*c_void, RpcStatus: RPC_STATUS) RPC_STATUS;
//pub extern fn stdcallcc I_RpcServerStartListening(hWnd: ?*c_void) RPC_STATUS;
//pub extern fn stdcallcc I_RpcServerStopListening() RPC_STATUS;
//pub extern fn stdcallcc I_RpcServerUnregisterEndpointA(Protseq: RPC_CSTR, Endpoint: RPC_CSTR) RPC_STATUS;
//pub extern fn stdcallcc I_RpcServerUnregisterEndpointW(Protseq: RPC_WSTR, Endpoint: RPC_WSTR) RPC_STATUS;
//pub extern fn stdcallcc I_RpcSetServerContextList(BindingHandle: RPC_BINDING_HANDLE, ServerContextList: ?*c_void) void;
//pub extern fn stdcallcc I_RpcSetThreadParams(fClientFree: c_int, Context: ?*c_void, hWndClient: ?*c_void) RPC_STATUS;
//pub extern fn stdcallcc I_RpcStopMonitorAssociation(Handle: RPC_BINDING_HANDLE) RPC_STATUS;
//pub extern fn stdcallcc I_RpcUninitializeNdrOle() void;
//pub extern fn stdcallcc I_RpcWindowProc(hWnd: ?*c_void, Message: c_uint, wParam: c_uint, lParam: c_ulong) c_uint;
//pub extern fn stdcallcc NDRCContextUnmarshall2(pCContext: ?*NDR_CCONTEXT, hBinding: RPC_BINDING_HANDLE, pBuff: ?*c_void, DataRepresentation: c_ulong) void;
//pub extern fn stdcallcc RpcAsyncCleanupThread(dwTimeout: DWORD) RPC_STATUS;
//pub extern fn stdcallcc RpcBindingGetTrainingContextHandle(Binding: RPC_BINDING_HANDLE, ContextHandle: ?*(?*c_void)) RPC_STATUS;
//pub extern fn stdcallcc RpcCsGetTags(hBinding: RPC_BINDING_HANDLE, fServerSide: c_int, pulSendingTag: ?*c_ulong, pulDesiredReceivingTag: ?*c_ulong, pulReceivingTag: ?*c_ulong, pStatus: ?*error_status_t) void;
//pub extern fn stdcallcc SHEnumerateUnreadMailAccountsA(hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPSTR, cchMailAddress: c_int) HRESULT;
//pub extern fn stdcallcc SHGetUnreadMailCountA(hKeyUser: HKEY, pszMailAddress: LPCSTR, pdwCount: ?*DWORD, pFileTime: ?*FILETIME, pszShellExecuteCommand: LPSTR, cchShellExecuteCommand: c_int) HRESULT;
//pub extern fn stdcallcc SHSetUnreadMailCountA(pszMailAddress: LPCSTR, dwCount: DWORD, pszShellExecuteCommand: LPCSTR) HRESULT;
//pub extern fn stdcallcc GetDisplayAutoRotationPreferencesByProcessId(dwProcessId: DWORD, pOrientation: ?*ORIENTATION_PREFERENCE, fRotateScreen: ?*BOOL) BOOL;
//pub extern fn stdcallcc GetFileVersionInfoExA(dwFlags: DWORD, lpwstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
//pub extern fn stdcallcc GetFileVersionInfoSizeExA(dwFlags: DWORD, lpwstrFilename: LPCSTR, lpdwHandle: LPDWORD) DWORD;
//pub extern fn stdcallcc SCardCancelTransaction(hCard: SCARDHANDLE) LONG;


pub extern "advapi32" stdcallcc fn AbortSystemShutdownA(lpMachineName: LPSTR) BOOL;
pub extern "advapi32" stdcallcc fn AbortSystemShutdownW(lpMachineName: LPWSTR) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheck(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByType(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeResultList(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessAllowedAce(pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessAllowedAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessAllowedObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: ?*GUID, InheritedObjectTypeGuid: ?*GUID, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessDeniedAce(pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessDeniedAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAccessDeniedObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: ?*GUID, InheritedObjectTypeGuid: ?*GUID, pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddAce(pAcl: PACL, dwAceRevision: DWORD, dwStartingAceIndex: DWORD, pAceList: LPVOID, nAceListLength: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn AddAuditAccessAce(pAcl: PACL, dwAceRevision: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn AddAuditAccessAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn AddAuditAccessObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: ?*GUID, InheritedObjectTypeGuid: ?*GUID, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn AddMandatoryAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, MandatoryPolicy: DWORD, pLabelSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn AddUsersToEncryptedFile(lpFileName: LPCWSTR, pEncryptionCertificates: PENCRYPTION_CERTIFICATE_LIST) DWORD;
pub extern "advapi32" stdcallcc fn AdjustTokenGroups(TokenHandle: HANDLE, ResetToDefault: BOOL, NewState: PTOKEN_GROUPS, BufferLength: DWORD, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn AdjustTokenPrivileges(TokenHandle: HANDLE, DisableAllPrivileges: BOOL, NewState: PTOKEN_PRIVILEGES, BufferLength: DWORD, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn AllocateAndInitializeSid(pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE, nSubAuthority0: DWORD, nSubAuthority1: DWORD, nSubAuthority2: DWORD, nSubAuthority3: DWORD, nSubAuthority4: DWORD, nSubAuthority5: DWORD, nSubAuthority6: DWORD, nSubAuthority7: DWORD, pSid: ?*PSID) BOOL;
pub extern "advapi32" stdcallcc fn AllocateLocallyUniqueId(Luid: PLUID) BOOL;
pub extern "advapi32" stdcallcc fn AreAllAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn AreAnyAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn BackupEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn BackupEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn ChangeServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn ChangeServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn ChangeServiceConfigA(hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR, lpDisplayName: LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn ChangeServiceConfigW(hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR, lpDisplayName: LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn CheckForHiberboot(pHiberboot: PBOOLEAN, bClearFlag: BOOLEAN) DWORD;
pub extern "advapi32" stdcallcc fn ClearEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn ClearEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn CloseEncryptedFileRaw(pvContext: PVOID) void;
pub extern "advapi32" stdcallcc fn CloseEventLog(hEventLog: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn CloseServiceHandle(hSCObject: SC_HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn ControlService(hService: SC_HANDLE, dwControl: DWORD, lpServiceStatus: LPSERVICE_STATUS) BOOL;
pub extern "advapi32" stdcallcc fn ControlServiceExA(hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID) BOOL;
pub extern "advapi32" stdcallcc fn ControlServiceExW(hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID) BOOL;
pub extern "advapi32" stdcallcc fn ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: ?*PSECURITY_DESCRIPTOR, ObjectType: ?*GUID, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING) BOOL;
pub extern "advapi32" stdcallcc fn CopySid(nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn CreatePrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: ?*PSECURITY_DESCRIPTOR, IsDirectoryObject: BOOL, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
pub extern "advapi32" stdcallcc fn CreatePrivateObjectSecurityEx(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: ?*PSECURITY_DESCRIPTOR, ObjectType: ?*GUID, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
pub extern "advapi32" stdcallcc fn CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: ?*PSECURITY_DESCRIPTOR, ObjectTypes: ?*(?*GUID), GuidCount: ULONG, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
pub extern "advapi32" stdcallcc fn CreateProcessWithLogonW(lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "advapi32" stdcallcc fn CreateProcessWithTokenW(hToken: HANDLE, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "advapi32" stdcallcc fn CreateRestrictedToken(ExistingTokenHandle: HANDLE, Flags: DWORD, DisableSidCount: DWORD, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: DWORD, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: DWORD, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE) BOOL;
pub extern "advapi32" stdcallcc fn CreateServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPCSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR) SC_HANDLE;
pub extern "advapi32" stdcallcc fn CreateServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPCWSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR) SC_HANDLE;
pub extern "advapi32" stdcallcc fn CreateWellKnownSid(WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptAcquireContextA(phProv: ?*HCRYPTPROV, szContainer: LPCSTR, szProvider: LPCSTR, dwProvType: DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptAcquireContextW(phProv: ?*HCRYPTPROV, szContainer: LPCWSTR, szProvider: LPCWSTR, dwProvType: DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptContextAddRef(hProv: HCRYPTPROV, pdwReserved: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptCreateHash(hProv: HCRYPTPROV, Algid: ALG_ID, hKey: HCRYPTKEY, dwFlags: DWORD, phHash: ?*HCRYPTHASH) BOOL;
pub extern "advapi32" stdcallcc fn CryptDecrypt(hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptDeriveKey(hProv: HCRYPTPROV, Algid: ALG_ID, hBaseData: HCRYPTHASH, dwFlags: DWORD, phKey: ?*HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptDestroyHash(hHash: HCRYPTHASH) BOOL;
pub extern "advapi32" stdcallcc fn CryptDestroyKey(hKey: HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptDuplicateHash(hHash: HCRYPTHASH, pdwReserved: ?*DWORD, dwFlags: DWORD, phHash: ?*HCRYPTHASH) BOOL;
pub extern "advapi32" stdcallcc fn CryptDuplicateKey(hKey: HCRYPTKEY, pdwReserved: ?*DWORD, dwFlags: DWORD, phKey: ?*HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptEncrypt(hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD, dwBufLen: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptEnumProviderTypesA(dwIndex: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pdwProvType: ?*DWORD, szTypeName: LPSTR, pcbTypeName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptEnumProviderTypesW(dwIndex: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pdwProvType: ?*DWORD, szTypeName: LPWSTR, pcbTypeName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptEnumProvidersA(dwIndex: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pdwProvType: ?*DWORD, szProvName: LPSTR, pcbProvName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptEnumProvidersW(dwIndex: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pdwProvType: ?*DWORD, szProvName: LPWSTR, pcbProvName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptExportKey(hKey: HCRYPTKEY, hExpKey: HCRYPTKEY, dwBlobType: DWORD, dwFlags: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGenKey(hProv: HCRYPTPROV, Algid: ALG_ID, dwFlags: DWORD, phKey: ?*HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptGenRandom(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: ?*BYTE) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetDefaultProviderA(dwProvType: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pszProvName: LPSTR, pcbProvName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetDefaultProviderW(dwProvType: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD, pszProvName: LPWSTR, pcbProvName: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetHashParam(hHash: HCRYPTHASH, dwParam: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetKeyParam(hKey: HCRYPTKEY, dwParam: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetProvParam(hProv: HCRYPTPROV, dwParam: DWORD, pbData: ?*BYTE, pdwDataLen: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptGetUserKey(hProv: HCRYPTPROV, dwKeySpec: DWORD, phUserKey: ?*HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptHashData(hHash: HCRYPTHASH, pbData: ?*const BYTE, dwDataLen: DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptHashSessionKey(hHash: HCRYPTHASH, hKey: HCRYPTKEY, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptImportKey(hProv: HCRYPTPROV, pbData: ?*const BYTE, dwDataLen: DWORD, hPubKey: HCRYPTKEY, dwFlags: DWORD, phKey: ?*HCRYPTKEY) BOOL;
pub extern "advapi32" stdcallcc fn CryptReleaseContext(hProv: HCRYPTPROV, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetHashParam(hHash: HCRYPTHASH, dwParam: DWORD, pbData: ?*const BYTE, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetKeyParam(hKey: HCRYPTKEY, dwParam: DWORD, pbData: ?*const BYTE, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetProvParam(hProv: HCRYPTPROV, dwParam: DWORD, pbData: ?*const BYTE, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetProviderA(pszProvName: LPCSTR, dwProvType: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetProviderExA(pszProvName: LPCSTR, dwProvType: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetProviderExW(pszProvName: LPCWSTR, dwProvType: DWORD, pdwReserved: ?*DWORD, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSetProviderW(pszProvName: LPCWSTR, dwProvType: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSignHashA(hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCSTR, dwFlags: DWORD, pbSignature: ?*BYTE, pdwSigLen: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptSignHashW(hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCWSTR, dwFlags: DWORD, pbSignature: ?*BYTE, pdwSigLen: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptVerifySignatureA(hHash: HCRYPTHASH, pbSignature: ?*const BYTE, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCSTR, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CryptVerifySignatureW(hHash: HCRYPTHASH, pbSignature: ?*const BYTE, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCWSTR, dwFlags: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn CveEventWrite(CveId: PCWSTR, AdditionalDetails: PCWSTR) LONG;
pub extern "advapi32" stdcallcc fn DecryptFileA(lpFileName: LPCSTR, dwReserved: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn DecryptFileW(lpFileName: LPCWSTR, dwReserved: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn DeleteAce(pAcl: PACL, dwAceIndex: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn DeleteService(hService: SC_HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn DeregisterEventSource(hEventLog: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn DestroyPrivateObjectSecurity(ObjectDescriptor: ?*PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn DuplicateEncryptionInfoFile(SrcFileName: LPCWSTR, DstFileName: LPCWSTR, dwCreationDistribution: DWORD, dwAttributes: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) DWORD;
pub extern "advapi32" stdcallcc fn DuplicateToken(ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE) BOOL;
pub extern "advapi32" stdcallcc fn DuplicateTokenEx(hExistingToken: HANDLE, dwDesiredAccess: DWORD, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType_0: TOKEN_TYPE, phNewToken: PHANDLE) BOOL;
pub extern "advapi32" stdcallcc fn EncryptFileA(lpFileName: LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn EncryptFileW(lpFileName: LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn EncryptionDisable(DirPath: LPCWSTR, Disable: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn EnumDependentServicesA(hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn EnumDependentServicesW(hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn EnumDynamicTimeZoneInformation(dwIndex: DWORD, lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION) DWORD;
pub extern "advapi32" stdcallcc fn EnumServicesStatusA(hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn EnumServicesStatusExA(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn EnumServicesStatusExW(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn EnumServicesStatusW(hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn EqualDomainSid(pSid1: PSID, pSid2: PSID, pfEqual: ?*BOOL) BOOL;
pub extern "advapi32" stdcallcc fn EqualPrefixSid(pSid1: PSID, pSid2: PSID) BOOL;
pub extern "advapi32" stdcallcc fn EqualSid(pSid1: PSID, pSid2: PSID) BOOL;
pub extern "advapi32" stdcallcc fn FileEncryptionStatusA(lpFileName: LPCSTR, lpStatus: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn FileEncryptionStatusW(lpFileName: LPCWSTR, lpStatus: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn FindFirstFreeAce(pAcl: PACL, pAce: ?*LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn FreeEncryptedFileMetadata(pbMetadata: PBYTE) void;
pub extern "advapi32" stdcallcc fn FreeEncryptionCertificateHashList(pUsers: PENCRYPTION_CERTIFICATE_HASH_LIST) void;
pub extern "advapi32" stdcallcc fn FreeSid(pSid: PSID) PVOID;
pub extern "advapi32" stdcallcc fn GetAce(pAcl: PACL, dwAceIndex: DWORD, pAce: ?*LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn GetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS) BOOL;
pub extern "advapi32" stdcallcc fn GetCurrentHwProfileA(lpHwProfileInfo: LPHW_PROFILE_INFOA) BOOL;
pub extern "advapi32" stdcallcc fn GetCurrentHwProfileW(lpHwProfileInfo: LPHW_PROFILE_INFOW) BOOL;
pub extern "advapi32" stdcallcc fn GetDynamicTimeZoneInformationEffectiveYears(lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION, FirstYear: LPDWORD, LastYear: LPDWORD) DWORD;
pub extern "advapi32" stdcallcc fn GetEncryptedFileMetadata(lpFileName: LPCWSTR, pcbMetadata: PDWORD, ppbMetadata: ?*PBYTE) DWORD;
pub extern "advapi32" stdcallcc fn GetEventLogInformation(hEventLog: HANDLE, dwInfoLevel: DWORD, lpBuffer: LPVOID, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetFileSecurityA(lpFileName: LPCSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetFileSecurityW(lpFileName: LPCWSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetKernelObjectSecurity(Handle: HANDLE, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetLengthSid(pSid: PSID) DWORD;
pub extern "advapi32" stdcallcc fn GetNumberOfEventLogRecords(hEventLog: HANDLE, NumberOfRecords: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetOldestEventLogRecord(hEventLog: HANDLE, OldestRecord: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetPrivateObjectSecurity(ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: SECURITY_INFORMATION, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: DWORD, ReturnLength: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: ?*PACL, lpbDaclDefaulted: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: ?*PSID, lpbGroupDefaulted: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR) DWORD;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: ?*PSID, lpbOwnerDefaulted: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR) DWORD;
pub extern "advapi32" stdcallcc fn GetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: ?*PACL, lpbSaclDefaulted: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn GetServiceDisplayNameA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPSTR, lpcchBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetServiceDisplayNameW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetServiceKeyNameA(hSCManager: SC_HANDLE, lpDisplayName: LPCSTR, lpServiceName: LPSTR, lpcchBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetServiceKeyNameW(hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR, lpServiceName: LPWSTR, lpcchBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetSidIdentifierAuthority(pSid: PSID) PSID_IDENTIFIER_AUTHORITY;
pub extern "advapi32" stdcallcc fn GetSidLengthRequired(nSubAuthorityCount: UCHAR) DWORD;
pub extern "advapi32" stdcallcc fn GetSidSubAuthority(pSid: PSID, nSubAuthority: DWORD) PDWORD;
pub extern "advapi32" stdcallcc fn GetSidSubAuthorityCount(pSid: PSID) PUCHAR;
pub extern "advapi32" stdcallcc fn GetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD, ReturnLength: PDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetUserNameA(lpBuffer: LPSTR, pcbBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetUserNameW(lpBuffer: LPWSTR, pcbBuffer: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn GetWindowsAccountDomainSid(pSid: PSID, pDomainSid: PSID, cbDomainSid: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn ImpersonateAnonymousToken(ThreadHandle: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn ImpersonateLoggedOnUser(hToken: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn ImpersonateNamedPipeClient(hNamedPipe: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL) BOOL;
pub extern "advapi32" stdcallcc fn InitializeAcl(pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn InitializeSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn InitializeSid(Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE) BOOL;
pub extern "advapi32" stdcallcc fn InitiateShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD) DWORD;
pub extern "advapi32" stdcallcc fn InitiateShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD) DWORD;
pub extern "advapi32" stdcallcc fn InitiateSystemShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn InitiateSystemShutdownExA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn InitiateSystemShutdownExW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn InitiateSystemShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn IsTextUnicode(lpv: ?*const c_void, iSize: c_int, lpiResult: LPINT) BOOL;
pub extern "advapi32" stdcallcc fn IsTokenRestricted(TokenHandle: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn IsTokenUntrusted(TokenHandle: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn IsValidAcl(pAcl: PACL) BOOL;
pub extern "advapi32" stdcallcc fn IsValidSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn IsValidSid(pSid: PSID) BOOL;
pub extern "advapi32" stdcallcc fn IsWellKnownSid(pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE) BOOL;
pub extern "advapi32" stdcallcc fn LockServiceDatabase(hSCManager: SC_HANDLE) SC_LOCK;
pub extern "advapi32" stdcallcc fn LogonUserA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE) BOOL;
pub extern "advapi32" stdcallcc fn LogonUserExA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: ?*PSID, ppProfileBuffer: ?*PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS) BOOL;
pub extern "advapi32" stdcallcc fn LogonUserExW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: ?*PSID, ppProfileBuffer: ?*PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS) BOOL;
pub extern "advapi32" stdcallcc fn LogonUserW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE) BOOL;
pub extern "advapi32" stdcallcc fn LookupAccountNameA(lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
pub extern "advapi32" stdcallcc fn LookupAccountNameW(lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
pub extern "advapi32" stdcallcc fn LookupAccountSidA(lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
pub extern "advapi32" stdcallcc fn LookupAccountSidW(lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeDisplayNameA(lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeDisplayNameW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeNameA(lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeNameW(lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeValueA(lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID) BOOL;
pub extern "advapi32" stdcallcc fn LookupPrivilegeValueW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID) BOOL;
pub extern "advapi32" stdcallcc fn MIDL_user_free(arg0: ?*c_void) void;
pub extern "advapi32" stdcallcc fn MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn MapGenericMask(AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING) void;
pub extern "advapi32" stdcallcc fn NotifyBootConfigStatus(BootAcceptable: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn NotifyChangeEventLog(hEventLog: HANDLE, hEvent: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn NotifyServiceStatusChangeA(hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYA) DWORD;
pub extern "advapi32" stdcallcc fn NotifyServiceStatusChangeW(hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYW) DWORD;
pub extern "advapi32" stdcallcc fn ObjectCloseAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectCloseAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectDeleteAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectDeleteAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectOpenAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectOpenAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectPrivilegeAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn ObjectPrivilegeAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn OpenBackupEventLogA(lpUNCServerName: LPCSTR, lpFileName: LPCSTR) HANDLE;
pub extern "advapi32" stdcallcc fn OpenBackupEventLogW(lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR) HANDLE;
pub extern "advapi32" stdcallcc fn OpenEncryptedFileRawA(lpFileName: LPCSTR, ulFlags: ULONG, pvContext: ?*PVOID) DWORD;
pub extern "advapi32" stdcallcc fn OpenEncryptedFileRawW(lpFileName: LPCWSTR, ulFlags: ULONG, pvContext: ?*PVOID) DWORD;
pub extern "advapi32" stdcallcc fn OpenEventLogA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) HANDLE;
pub extern "advapi32" stdcallcc fn OpenEventLogW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) HANDLE;
pub extern "advapi32" stdcallcc fn OpenSCManagerA(lpMachineName: LPCSTR, lpDatabaseName: LPCSTR, dwDesiredAccess: DWORD) SC_HANDLE;
pub extern "advapi32" stdcallcc fn OpenSCManagerW(lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR, dwDesiredAccess: DWORD) SC_HANDLE;
pub extern "advapi32" stdcallcc fn OpenServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, dwDesiredAccess: DWORD) SC_HANDLE;
pub extern "advapi32" stdcallcc fn OpenServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, dwDesiredAccess: DWORD) SC_HANDLE;
pub extern "advapi32" stdcallcc fn OperationEnd(OperationEndParams: ?*OPERATION_END_PARAMETERS) BOOL;
pub extern "advapi32" stdcallcc fn PrivilegeCheck(ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL) BOOL;
pub extern "advapi32" stdcallcc fn PrivilegedServiceAuditAlarmA(SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn PrivilegedServiceAuditAlarmW(SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn QueryRecoveryAgentsOnEncryptedFile(lpFileName: LPCWSTR, pRecoveryAgents: ?*PENCRYPTION_CERTIFICATE_HASH_LIST) DWORD;
pub extern "advapi32" stdcallcc fn QuerySecurityAccessMask(SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD) void;
pub extern "advapi32" stdcallcc fn QueryServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceConfigA(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceConfigW(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceDynamicInformation(hServiceStatus: SERVICE_STATUS_HANDLE, dwInfoLevel: DWORD, ppDynamicInfo: ?*PVOID) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceLockStatusA(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceLockStatusW(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceStatus(hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS) BOOL;
pub extern "advapi32" stdcallcc fn QueryServiceStatusEx(hService: SC_HANDLE, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub extern "advapi32" stdcallcc fn QueryUsersOnEncryptedFile(lpFileName: LPCWSTR, pUsers: ?*PENCRYPTION_CERTIFICATE_HASH_LIST) DWORD;
pub extern "advapi32" stdcallcc fn ReadEncryptedFileRaw(pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID) DWORD;
pub extern "advapi32" stdcallcc fn ReadEventLogA(hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ?*DWORD, pnMinNumberOfBytesNeeded: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn ReadEventLogW(hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: ?*DWORD, pnMinNumberOfBytesNeeded: ?*DWORD) BOOL;
pub extern "advapi32" stdcallcc fn RegCloseKey(hKey: HKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegConnectRegistryA(lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegConnectRegistryExA(lpMachineName: LPCSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegConnectRegistryExW(lpMachineName: LPCWSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegConnectRegistryW(lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCopyTreeA(hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCopyTreeW(hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyExA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegCreateKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyExA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteKeyW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteTreeA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteTreeW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteValueA(hKey: HKEY, lpValueName: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDeleteValueW(hKey: HKEY, lpValueName: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegDisablePredefinedCache() LSTATUS;
pub extern "advapi32" stdcallcc fn RegDisablePredefinedCacheEx() LSTATUS;
pub extern "advapi32" stdcallcc fn RegDisableReflectionKey(hBase: HKEY) LONG;
pub extern "advapi32" stdcallcc fn RegEnableReflectionKey(hBase: HKEY) LONG;
pub extern "advapi32" stdcallcc fn RegEnumKeyA(hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, cchName: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegEnumKeyExA(hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
pub extern "advapi32" stdcallcc fn RegEnumKeyExW(hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
pub extern "advapi32" stdcallcc fn RegEnumKeyW(hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, cchName: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegEnumValueA(hKey: HKEY, dwIndex: DWORD, lpValueName: LPSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegEnumValueW(hKey: HKEY, dwIndex: DWORD, lpValueName: LPWSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegFlushKey(hKey: HKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegGetKeySecurity(hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpcbSecurityDescriptor: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegGetValueA(hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegGetValueW(hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadAppKeyA(lpFile: LPCSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadAppKeyW(lpFile: LPCWSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadMUIStringA(hKey: HKEY, pszValue: LPCSTR, pszOutBuf: LPSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegLoadMUIStringW(hKey: HKEY, pszValue: LPCWSTR, pszOutBuf: LPWSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegNotifyChangeKeyValue(hKey: HKEY, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, hEvent: HANDLE, fAsynchronous: BOOL) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenCurrentUser(samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyExA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOpenUserClassesRoot(hToken: HANDLE, dwOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegOverridePredefKey(hKey: HKEY, hNewHKey: HKEY) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryInfoKeyA(hKey: HKEY, lpClass: LPSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryInfoKeyW(hKey: HKEY, lpClass: LPWSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryMultipleValuesA(hKey: HKEY, val_list: PVALENTA, num_vals: DWORD, lpValueBuf: LPSTR, ldwTotsize: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryMultipleValuesW(hKey: HKEY, val_list: PVALENTW, num_vals: DWORD, lpValueBuf: LPWSTR, ldwTotsize: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryReflectionKey(hBase: HKEY, bIsReflectionDisabled: ?*BOOL) LONG;
pub extern "advapi32" stdcallcc fn RegQueryValueA(hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryValueExA(hKey: HKEY, lpValueName: LPCSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryValueExW(hKey: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegQueryValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpData: LPWSTR, lpcbData: PLONG) LSTATUS;
pub extern "advapi32" stdcallcc fn RegRenameKey(hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegReplaceKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpNewFile: LPCSTR, lpOldFile: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegReplaceKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR, lpOldFile: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegRestoreKeyA(hKey: HKEY, lpFile: LPCSTR, dwFlags: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegRestoreKeyW(hKey: HKEY, lpFile: LPCWSTR, dwFlags: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSaveKeyA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSaveKeyExA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSaveKeyExW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSaveKeyW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetKeySecurity(hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetValueA(hKey: HKEY, lpSubKey: LPCSTR, dwType: DWORD, lpData: LPCSTR, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetValueExA(hKey: HKEY, lpValueName: LPCSTR, Reserved: DWORD, dwType: DWORD, lpData: ?*const BYTE, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetValueExW(hKey: HKEY, lpValueName: LPCWSTR, Reserved: DWORD, dwType: DWORD, lpData: ?*const BYTE, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegSetValueW(hKey: HKEY, lpSubKey: LPCWSTR, dwType: DWORD, lpData: LPCWSTR, cbData: DWORD) LSTATUS;
pub extern "advapi32" stdcallcc fn RegUnLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegUnLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
pub extern "advapi32" stdcallcc fn RegisterEventSourceA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) HANDLE;
pub extern "advapi32" stdcallcc fn RegisterEventSourceW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) HANDLE;
pub extern "advapi32" stdcallcc fn RegisterServiceCtrlHandlerA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;
pub extern "advapi32" stdcallcc fn RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID) SERVICE_STATUS_HANDLE;
pub extern "advapi32" stdcallcc fn RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID) SERVICE_STATUS_HANDLE;
pub extern "advapi32" stdcallcc fn RegisterServiceCtrlHandlerW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;
pub extern "advapi32" stdcallcc fn RemoveUsersFromEncryptedFile(lpFileName: LPCWSTR, pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST) DWORD;
pub extern "advapi32" stdcallcc fn ReportEventA(hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: ?*LPCSTR, lpRawData: LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn ReportEventW(hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: ?*LPCWSTR, lpRawData: LPVOID) BOOL;
pub extern "advapi32" stdcallcc fn RevertToSelf() BOOL;
pub extern "advapi32" stdcallcc fn SetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS) BOOL;
pub extern "advapi32" stdcallcc fn SetEncryptedFileMetadata(lpFileName: LPCWSTR, pbOldMetadata: PBYTE, pbNewMetadata: PBYTE, pOwnerHash: PENCRYPTION_CERTIFICATE_HASH, dwOperation: DWORD, pCertificatesAdded: PENCRYPTION_CERTIFICATE_HASH_LIST) DWORD;
pub extern "advapi32" stdcallcc fn SetFileSecurityA(lpFileName: LPCSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn SetFileSecurityW(lpFileName: LPCWSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn SetKernelObjectSecurity(Handle: HANDLE, SecurityInformation: SECURITY_INFORMATION, SecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn SetPrivateObjectSecurity(SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: ?*PSECURITY_DESCRIPTOR, GenericMapping: PGENERIC_MAPPING, Token: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn SetPrivateObjectSecurityEx(SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: ?*PSECURITY_DESCRIPTOR, AutoInheritFlags: ULONG, GenericMapping: PGENERIC_MAPPING, Token: HANDLE) BOOL;
pub extern "advapi32" stdcallcc fn SetSecurityAccessMask(SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD) void;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL) BOOL;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: BOOL, pDacl: PACL, bDaclDefaulted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR) DWORD;
pub extern "advapi32" stdcallcc fn SetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: BOOL, pSacl: PACL, bSaclDefaulted: BOOL) BOOL;
pub extern "advapi32" stdcallcc fn SetServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
pub extern "advapi32" stdcallcc fn SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE, lpServiceStatus: LPSERVICE_STATUS) BOOL;
pub extern "advapi32" stdcallcc fn SetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD) BOOL;
pub extern "advapi32" stdcallcc fn SetUserFileEncryptionKey(pEncryptionCertificate: PENCRYPTION_CERTIFICATE) DWORD;
pub extern "advapi32" stdcallcc fn SetUserFileEncryptionKeyEx(pEncryptionCertificate: PENCRYPTION_CERTIFICATE, dwCapabilities: DWORD, dwFlags: DWORD, pvReserved: LPVOID) DWORD;
pub extern "advapi32" stdcallcc fn StartServiceA(hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: ?*LPCSTR) BOOL;
pub extern "advapi32" stdcallcc fn StartServiceCtrlDispatcherA(lpServiceStartTable: ?*const SERVICE_TABLE_ENTRYA) BOOL;
pub extern "advapi32" stdcallcc fn StartServiceCtrlDispatcherW(lpServiceStartTable: ?*const SERVICE_TABLE_ENTRYW) BOOL;
pub extern "advapi32" stdcallcc fn StartServiceW(hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: ?*LPCWSTR) BOOL;
pub extern "advapi32" stdcallcc fn SubscribeServiceChangeNotifications(hService: SC_HANDLE, eEventType: SC_EVENT_TYPE, pCallback: PSC_NOTIFICATION_CALLBACK, pCallbackContext: PVOID, pSubscription: ?*PSC_NOTIFICATION_REGISTRATION) DWORD;
pub extern "advapi32" stdcallcc fn UnlockServiceDatabase(ScLock: SC_LOCK) BOOL;
pub extern "advapi32" stdcallcc fn UnsubscribeServiceChangeNotifications(pSubscription: PSC_NOTIFICATION_REGISTRATION) void;
pub extern "advapi32" stdcallcc fn WaitServiceState(hService: SC_HANDLE, dwNotify: DWORD, dwTimeout: DWORD, hCancelEvent: HANDLE) DWORD;
pub extern "advapi32" stdcallcc fn WriteEncryptedFileRaw(pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID) DWORD;
pub extern "bcrypt" stdcallcc fn BCryptAddContextFunction(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, dwPosition: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptCloseAlgorithmProvider(hAlgorithm: BCRYPT_ALG_HANDLE, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptConfigureContext(dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptConfigureContextFunction(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pConfig: PCRYPT_CONTEXT_FUNCTION_CONFIG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptCreateContext(dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptCreateHash(hAlgorithm: BCRYPT_ALG_HANDLE, phHash: ?*BCRYPT_HASH_HANDLE, pbHashObject: PUCHAR, cbHashObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptCreateMultiHash(hAlgorithm: BCRYPT_ALG_HANDLE, phHash: ?*BCRYPT_HASH_HANDLE, nHashes: ULONG, pbHashObject: PUCHAR, cbHashObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDecrypt(hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: ?*c_void, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDeleteContext(dwTable: ULONG, pszContext: LPCWSTR) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDeriveKey(hSharedSecret: BCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: ?*BCryptBufferDesc, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDeriveKeyCapi(hHash: BCRYPT_HASH_HANDLE, hTargetAlg: BCRYPT_ALG_HANDLE, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDeriveKeyPBKDF2(hPrf: BCRYPT_ALG_HANDLE, pbPassword: PUCHAR, cbPassword: ULONG, pbSalt: PUCHAR, cbSalt: ULONG, cIterations: ULONGLONG, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDestroyHash(hHash: BCRYPT_HASH_HANDLE) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDestroyKey(hKey: BCRYPT_KEY_HANDLE) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDestroySecret(hSecret: BCRYPT_SECRET_HANDLE) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDuplicateHash(hHash: BCRYPT_HASH_HANDLE, phNewHash: ?*BCRYPT_HASH_HANDLE, pbHashObject: PUCHAR, cbHashObject: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptDuplicateKey(hKey: BCRYPT_KEY_HANDLE, phNewKey: ?*BCRYPT_KEY_HANDLE, pbKeyObject: PUCHAR, cbKeyObject: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEncrypt(hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: ?*c_void, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumAlgorithms(dwAlgOperations: ULONG, pAlgCount: ?*ULONG, ppAlgList: ?*(?*BCRYPT_ALGORITHM_IDENTIFIER), dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumContextFunctionProviders(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_CONTEXT_FUNCTION_PROVIDERS) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumContextFunctions(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_CONTEXT_FUNCTIONS) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumContexts(dwTable: ULONG, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_CONTEXTS) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumProviders(pszAlgId: LPCWSTR, pImplCount: ?*ULONG, ppImplList: ?*(?*BCRYPT_PROVIDER_NAME), dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptEnumRegisteredProviders(pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_PROVIDERS) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptExportKey(hKey: BCRYPT_KEY_HANDLE, hExportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptFinalizeKeyPair(hKey: BCRYPT_KEY_HANDLE, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptFinishHash(hHash: BCRYPT_HASH_HANDLE, pbOutput: PUCHAR, cbOutput: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptFreeBuffer(pvBuffer: PVOID) void;
pub extern "bcrypt" stdcallcc fn BCryptGenRandom(hAlgorithm: BCRYPT_ALG_HANDLE, pbBuffer: PUCHAR, cbBuffer: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptGenerateKeyPair(hAlgorithm: BCRYPT_ALG_HANDLE, phKey: ?*BCRYPT_KEY_HANDLE, dwLength: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptGenerateSymmetricKey(hAlgorithm: BCRYPT_ALG_HANDLE, phKey: ?*BCRYPT_KEY_HANDLE, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptGetFipsAlgorithmMode(pfEnabled: ?*BOOLEAN) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptGetProperty(hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptHash(hAlgorithm: BCRYPT_ALG_HANDLE, pbSecret: PUCHAR, cbSecret: ULONG, pbInput: PUCHAR, cbInput: ULONG, pbOutput: PUCHAR, cbOutput: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptHashData(hHash: BCRYPT_HASH_HANDLE, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptImportKey(hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: ?*BCRYPT_KEY_HANDLE, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptImportKeyPair(hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: ?*BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptKeyDerivation(hKey: BCRYPT_KEY_HANDLE, pParameterList: ?*BCryptBufferDesc, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptOpenAlgorithmProvider(phAlgorithm: ?*BCRYPT_ALG_HANDLE, pszAlgId: LPCWSTR, pszImplementation: LPCWSTR, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptProcessMultiOperations(hObject: BCRYPT_HANDLE, operationType: BCRYPT_MULTI_OPERATION_TYPE, pOperations: PVOID, cbOperations: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptQueryContextConfiguration(dwTable: ULONG, pszContext: LPCWSTR, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_CONTEXT_CONFIG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptQueryContextFunctionConfiguration(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_CONTEXT_FUNCTION_CONFIG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptQueryContextFunctionProperty(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, pcbValue: ?*ULONG, ppbValue: ?*PUCHAR) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptQueryProviderRegistration(pszProvider: LPCWSTR, dwMode: ULONG, dwInterface: ULONG, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_PROVIDER_REG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptRegisterConfigChangeNotify(phEvent: ?*HANDLE) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptRemoveContextFunction(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptResolveProviders(pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProvider: LPCWSTR, dwMode: ULONG, dwFlags: ULONG, pcbBuffer: ?*ULONG, ppBuffer: ?*PCRYPT_PROVIDER_REFS) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptSecretAgreement(hPrivKey: BCRYPT_KEY_HANDLE, hPubKey: BCRYPT_KEY_HANDLE, phAgreedSecret: ?*BCRYPT_SECRET_HANDLE, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptSetContextFunctionProperty(dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, cbValue: ULONG, pbValue: PUCHAR) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptSetProperty(hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptSignHash(hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: ?*c_void, pbInput: PUCHAR, cbInput: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ?*ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptUnregisterConfigChangeNotify(hEvent: HANDLE) NTSTATUS;
pub extern "bcrypt" stdcallcc fn BCryptVerifySignature(hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: ?*c_void, pbHash: PUCHAR, cbHash: ULONG, pbSignature: PUCHAR, cbSignature: ULONG, dwFlags: ULONG) NTSTATUS;
pub extern "comctl32" stdcallcc fn CreatePropertySheetPageA(constPropSheetPagePointer: LPCPROPSHEETPAGEA) HPROPSHEETPAGE;
pub extern "comctl32" stdcallcc fn CreatePropertySheetPageW(constPropSheetPagePointer: LPCPROPSHEETPAGEW) HPROPSHEETPAGE;
pub extern "comctl32" stdcallcc fn DestroyPropertySheetPage(arg0: HPROPSHEETPAGE) BOOL;
pub extern "comctl32" stdcallcc fn PropertySheetA(arg0: LPCPROPSHEETHEADERA) INT_PTR;
pub extern "comctl32" stdcallcc fn PropertySheetW(arg0: LPCPROPSHEETHEADERW) INT_PTR;
pub extern "comdlg32" stdcallcc fn ChooseColorA(arg0: LPCHOOSECOLORA) BOOL;
pub extern "comdlg32" stdcallcc fn ChooseColorW(arg0: LPCHOOSECOLORW) BOOL;
pub extern "comdlg32" stdcallcc fn ChooseFontA(arg0: LPCHOOSEFONTA) BOOL;
pub extern "comdlg32" stdcallcc fn ChooseFontW(arg0: LPCHOOSEFONTW) BOOL;
pub extern "comdlg32" stdcallcc fn CommDlgExtendedError() DWORD;
pub extern "comdlg32" stdcallcc fn FindTextA(arg0: LPFINDREPLACEA) HWND;
pub extern "comdlg32" stdcallcc fn FindTextW(arg0: LPFINDREPLACEW) HWND;
pub extern "comdlg32" stdcallcc fn GetFileTitleA(arg0: LPCSTR, Buf: LPSTR, cchSize: WORD) c_short;
pub extern "comdlg32" stdcallcc fn GetFileTitleW(arg0: LPCWSTR, Buf: LPWSTR, cchSize: WORD) c_short;
pub extern "comdlg32" stdcallcc fn GetOpenFileNameA(arg0: LPOPENFILENAMEA) BOOL;
pub extern "comdlg32" stdcallcc fn GetOpenFileNameW(arg0: LPOPENFILENAMEW) BOOL;
pub extern "comdlg32" stdcallcc fn GetSaveFileNameA(arg0: LPOPENFILENAMEA) BOOL;
pub extern "comdlg32" stdcallcc fn GetSaveFileNameW(arg0: LPOPENFILENAMEW) BOOL;
pub extern "comdlg32" stdcallcc fn PageSetupDlgA(arg0: LPPAGESETUPDLGA) BOOL;
pub extern "comdlg32" stdcallcc fn PageSetupDlgW(arg0: LPPAGESETUPDLGW) BOOL;
pub extern "comdlg32" stdcallcc fn PrintDlgA(pPD: LPPRINTDLGA) BOOL;
pub extern "comdlg32" stdcallcc fn PrintDlgExA(pPD: LPPRINTDLGEXA) HRESULT;
pub extern "comdlg32" stdcallcc fn PrintDlgExW(pPD: LPPRINTDLGEXW) HRESULT;
pub extern "comdlg32" stdcallcc fn PrintDlgW(pPD: LPPRINTDLGW) BOOL;
pub extern "comdlg32" stdcallcc fn ReplaceTextA(arg0: LPFINDREPLACEA) HWND;
pub extern "comdlg32" stdcallcc fn ReplaceTextW(arg0: LPFINDREPLACEW) HWND;
pub extern "crypt32" stdcallcc fn CertAddCRLContextToStore(hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCRL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddCRLLinkToStore(hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCRL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddCTLContextToStore(hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCTL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddCTLLinkToStore(hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCTL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddCertificateContextToStore(hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddCertificateLinkToStore(hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEncodedCRLToStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCrlEncoded: ?*const BYTE, cbCrlEncoded: DWORD, dwAddDisposition: DWORD, ppCrlContext: ?*PCCRL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEncodedCTLToStore(hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: ?*const BYTE, cbCtlEncoded: DWORD, dwAddDisposition: DWORD, ppCtlContext: ?*PCCTL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEncodedCertificateToStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCertEncoded: ?*const BYTE, cbCertEncoded: DWORD, dwAddDisposition: DWORD, ppCertContext: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEncodedCertificateToSystemStoreA(szCertStoreName: LPCSTR, pbCertEncoded: ?*const BYTE, cbCertEncoded: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEncodedCertificateToSystemStoreW(szCertStoreName: LPCWSTR, pbCertEncoded: ?*const BYTE, cbCertEncoded: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertAddEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertAddRefServerOcspResponse(hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE) void;
pub extern "crypt32" stdcallcc fn CertAddRefServerOcspResponseContext(pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT) void;
pub extern "crypt32" stdcallcc fn CertAddSerializedElementToStore(hCertStore: HCERTSTORE, pbElement: ?*const BYTE, cbElement: DWORD, dwAddDisposition: DWORD, dwFlags: DWORD, dwContextTypeFlags: DWORD, pdwContextType: ?*DWORD, ppvContext: ?*(?*const c_void)) BOOL;
pub extern "crypt32" stdcallcc fn CertAddStoreToCollection(hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE, dwUpdateFlags: DWORD, dwPriority: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertAlgIdToOID(dwAlgId: DWORD) LPCSTR;
pub extern "crypt32" stdcallcc fn CertCloseServerOcspResponse(hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD) void;
pub extern "crypt32" stdcallcc fn CertCloseStore(hCertStore: HCERTSTORE, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertCompareCertificate(dwCertEncodingType: DWORD, pCertId1: PCERT_INFO, pCertId2: PCERT_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CertCompareCertificateName(dwCertEncodingType: DWORD, pCertName1: PCERT_NAME_BLOB, pCertName2: PCERT_NAME_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CertCompareIntegerBlob(pInt1: PCRYPT_INTEGER_BLOB, pInt2: PCRYPT_INTEGER_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CertComparePublicKeyInfo(dwCertEncodingType: DWORD, pPublicKey1: PCERT_PUBLIC_KEY_INFO, pPublicKey2: PCERT_PUBLIC_KEY_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CertControlStore(hCertStore: HCERTSTORE, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertCreateCRLContext(dwCertEncodingType: DWORD, pbCrlEncoded: ?*const BYTE, cbCrlEncoded: DWORD) PCCRL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertCreateCTLContext(dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: ?*const BYTE, cbCtlEncoded: DWORD) PCCTL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertCreateCTLEntryFromCertificateContextProperties(pCertContext: PCCERT_CONTEXT, cOptAttr: DWORD, rgOptAttr: PCRYPT_ATTRIBUTE, dwFlags: DWORD, pvReserved: ?*c_void, pCtlEntry: PCTL_ENTRY, pcbCtlEntry: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertCreateCertificateChainEngine(pConfig: PCERT_CHAIN_ENGINE_CONFIG, phChainEngine: ?*HCERTCHAINENGINE) BOOL;
pub extern "crypt32" stdcallcc fn CertCreateCertificateContext(dwCertEncodingType: DWORD, pbCertEncoded: ?*const BYTE, cbCertEncoded: DWORD) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertCreateContext(dwContextType: DWORD, dwEncodingType: DWORD, pbEncoded: ?*const BYTE, cbEncoded: DWORD, dwFlags: DWORD, pCreatePara: PCERT_CREATE_CONTEXT_PARA) ?*const c_void;
pub extern "crypt32" stdcallcc fn CertCreateSelfSignCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pSubjectIssuerBlob: PCERT_NAME_BLOB, dwFlags: DWORD, pKeyProvInfo: PCRYPT_KEY_PROV_INFO, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pStartTime: PSYSTEMTIME, pEndTime: PSYSTEMTIME, pExtensions: PCERT_EXTENSIONS) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertDeleteCRLFromStore(pCrlContext: PCCRL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertDeleteCTLFromStore(pCtlContext: PCCTL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertDeleteCertificateFromStore(pCertContext: PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertDuplicateCRLContext(pCrlContext: PCCRL_CONTEXT) PCCRL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertDuplicateCTLContext(pCtlContext: PCCTL_CONTEXT) PCCTL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertDuplicateCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT) PCCERT_CHAIN_CONTEXT;
pub extern "crypt32" stdcallcc fn CertDuplicateCertificateContext(pCertContext: PCCERT_CONTEXT) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertDuplicateStore(hCertStore: HCERTSTORE) HCERTSTORE;
pub extern "crypt32" stdcallcc fn CertEnumCRLContextProperties(pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertEnumCRLsInStore(hCertStore: HCERTSTORE, pPrevCrlContext: PCCRL_CONTEXT) PCCRL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertEnumCTLContextProperties(pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertEnumCTLsInStore(hCertStore: HCERTSTORE, pPrevCtlContext: PCCTL_CONTEXT) PCCTL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertEnumCertificateContextProperties(pCertContext: PCCERT_CONTEXT, dwPropId: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertEnumCertificatesInStore(hCertStore: HCERTSTORE, pPrevCertContext: PCCERT_CONTEXT) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertEnumPhysicalStore(pvSystemStore: ?*const c_void, dwFlags: DWORD, pvArg: ?*c_void, pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE) BOOL;
pub extern "crypt32" stdcallcc fn CertEnumSubjectInSortedCTL(pCtlContext: PCCTL_CONTEXT, ppvNextSubject: ?*(?*c_void), pSubjectIdentifier: PCRYPT_DER_BLOB, pEncodedAttributes: PCRYPT_DER_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CertEnumSystemStore(dwFlags: DWORD, pvSystemStoreLocationPara: ?*c_void, pvArg: ?*c_void, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE) BOOL;
pub extern "crypt32" stdcallcc fn CertEnumSystemStoreLocation(dwFlags: DWORD, pvArg: ?*c_void, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION) BOOL;
pub extern "crypt32" stdcallcc fn CertFindAttribute(pszObjId: LPCSTR, cAttr: DWORD, rgAttr: ?*CRYPT_ATTRIBUTE) PCRYPT_ATTRIBUTE;
pub extern "crypt32" stdcallcc fn CertFindCRLInStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: ?*const c_void, pPrevCrlContext: PCCRL_CONTEXT) PCCRL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertFindCTLInStore(hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: ?*const c_void, pPrevCtlContext: PCCTL_CONTEXT) PCCTL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertFindCertificateInCRL(pCert: PCCERT_CONTEXT, pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: ?*c_void, ppCrlEntry: ?*PCRL_ENTRY) BOOL;
pub extern "crypt32" stdcallcc fn CertFindCertificateInStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: ?*const c_void, pPrevCertContext: PCCERT_CONTEXT) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertFindChainInStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: ?*const c_void, pPrevChainContext: PCCERT_CHAIN_CONTEXT) PCCERT_CHAIN_CONTEXT;
pub extern "crypt32" stdcallcc fn CertFindExtension(pszObjId: LPCSTR, cExtensions: DWORD, rgExtensions: ?*CERT_EXTENSION) PCERT_EXTENSION;
pub extern "crypt32" stdcallcc fn CertFindRDNAttr(pszObjId: LPCSTR, pName: PCERT_NAME_INFO) PCERT_RDN_ATTR;
pub extern "crypt32" stdcallcc fn CertFindSubjectInCTL(dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: ?*c_void, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD) PCTL_ENTRY;
pub extern "crypt32" stdcallcc fn CertFindSubjectInSortedCTL(pSubjectIdentifier: PCRYPT_DATA_BLOB, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pvReserved: ?*c_void, pEncodedAttributes: PCRYPT_DER_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CertFreeCRLContext(pCrlContext: PCCRL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertFreeCTLContext(pCtlContext: PCCTL_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertFreeCertificateChain(pChainContext: PCCERT_CHAIN_CONTEXT) void;
pub extern "crypt32" stdcallcc fn CertFreeCertificateChainEngine(hChainEngine: HCERTCHAINENGINE) void;
pub extern "crypt32" stdcallcc fn CertFreeCertificateChainList(prgpSelection: ?*PCCERT_CHAIN_CONTEXT) void;
pub extern "crypt32" stdcallcc fn CertFreeCertificateContext(pCertContext: PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertFreeServerOcspResponseContext(pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT) void;
pub extern "crypt32" stdcallcc fn CertGetCRLContextProperty(pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetCRLFromStore(hCertStore: HCERTSTORE, pIssuerContext: PCCERT_CONTEXT, pPrevCrlContext: PCCRL_CONTEXT, pdwFlags: ?*DWORD) PCCRL_CONTEXT;
pub extern "crypt32" stdcallcc fn CertGetCTLContextProperty(pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetCertificateChain(hChainEngine: HCERTCHAINENGINE, pCertContext: PCCERT_CONTEXT, pTime: LPFILETIME, hAdditionalStore: HCERTSTORE, pChainPara: PCERT_CHAIN_PARA, dwFlags: DWORD, pvReserved: LPVOID, ppChainContext: ?*PCCERT_CHAIN_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertGetCertificateContextProperty(pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pUsage: PCERT_ENHKEY_USAGE, pcbUsage: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetIntendedKeyUsage(dwCertEncodingType: DWORD, pCertInfo: PCERT_INFO, pbKeyUsage: ?*BYTE, cbKeyUsage: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetIssuerCertificateFromStore(hCertStore: HCERTSTORE, pSubjectContext: PCCERT_CONTEXT, pPrevIssuerContext: PCCERT_CONTEXT, pdwFlags: ?*DWORD) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertGetNameStringA(pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: ?*c_void, pszNameString: LPSTR, cchNameString: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertGetNameStringW(pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: ?*c_void, pszNameString: LPWSTR, cchNameString: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertGetPublicKeyLength(dwCertEncodingType: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO) DWORD;
pub extern "crypt32" stdcallcc fn CertGetServerOcspResponseContext(hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD, pvReserved: LPVOID) PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;
pub extern "crypt32" stdcallcc fn CertGetStoreProperty(hCertStore: HCERTSTORE, dwPropId: DWORD, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertGetSubjectCertificateFromStore(hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pCertId: PCERT_INFO) PCCERT_CONTEXT;
pub extern "crypt32" stdcallcc fn CertGetValidUsages(cCerts: DWORD, rghCerts: ?*PCCERT_CONTEXT, cNumOIDs: ?*c_int, rghOIDs: ?*LPSTR, pcbOIDs: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertIsRDNAttrsInCertificateName(dwCertEncodingType: DWORD, dwFlags: DWORD, pCertName: PCERT_NAME_BLOB, pRDN: PCERT_RDN) BOOL;
pub extern "crypt32" stdcallcc fn CertIsStrongHashToSign(pStrongSignPara: PCCERT_STRONG_SIGN_PARA, pwszCNGHashAlgid: LPCWSTR, pSigningCert: PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CertIsValidCRLForCertificate(pCert: PCCERT_CONTEXT, pCrl: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertIsWeakHash(dwHashUseType: DWORD, pwszCNGHashAlgid: LPCWSTR, dwChainFlags: DWORD, pSignerChainContext: PCCERT_CHAIN_CONTEXT, pTimeStamp: LPFILETIME, pwszFileName: LPCWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertNameToStrA(dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPSTR, csz: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertNameToStrW(dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPWSTR, csz: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertOIDToAlgId(pszObjId: LPCSTR) DWORD;
pub extern "crypt32" stdcallcc fn CertOpenServerOcspResponse(pChainContext: PCCERT_CHAIN_CONTEXT, dwFlags: DWORD, pOpenPara: PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA) HCERT_SERVER_OCSP_RESPONSE;
pub extern "crypt32" stdcallcc fn CertOpenStore(lpszStoreProvider: LPCSTR, dwEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pvPara: ?*const c_void) HCERTSTORE;
pub extern "crypt32" stdcallcc fn CertOpenSystemStoreA(hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCSTR) HCERTSTORE;
pub extern "crypt32" stdcallcc fn CertOpenSystemStoreW(hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCWSTR) HCERTSTORE;
pub extern "crypt32" stdcallcc fn CertRDNValueToStrA(dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPSTR, csz: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertRDNValueToStrW(dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPWSTR, csz: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CertRegisterPhysicalStore(pvSystemStore: ?*const c_void, dwFlags: DWORD, pwszStoreName: LPCWSTR, pStoreInfo: PCERT_PHYSICAL_STORE_INFO, pvReserved: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertRegisterSystemStore(pvSystemStore: ?*const c_void, dwFlags: DWORD, pStoreInfo: PCERT_SYSTEM_STORE_INFO, pvReserved: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertRemoveEnhancedKeyUsageIdentifier(pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertRemoveStoreFromCollection(hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE) void;
pub extern "crypt32" stdcallcc fn CertResyncCertificateChainEngine(hChainEngine: HCERTCHAINENGINE) BOOL;
pub extern "crypt32" stdcallcc fn CertRetrieveLogoOrBiometricInfo(pCertContext: PCCERT_CONTEXT, lpszLogoOrBiometricType: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, dwFlags: DWORD, pvReserved: ?*c_void, ppbData: ?*(?*BYTE), pcbData: ?*DWORD, ppwszMimeType: ?*LPWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertSaveStore(hCertStore: HCERTSTORE, dwEncodingType: DWORD, dwSaveAs: DWORD, dwSaveTo: DWORD, pvSaveToPara: ?*c_void, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertSelectCertificateChains(pSelectionContext: LPCGUID, dwFlags: DWORD, pChainParameters: PCCERT_SELECT_CHAIN_PARA, cCriteria: DWORD, rgpCriteria: PCCERT_SELECT_CRITERIA, hStore: HCERTSTORE, pcSelection: PDWORD, pprgpSelection: ?*(?*PCCERT_CHAIN_CONTEXT)) BOOL;
pub extern "crypt32" stdcallcc fn CertSerializeCRLStoreElement(pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pbElement: ?*BYTE, pcbElement: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertSerializeCTLStoreElement(pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pbElement: ?*BYTE, pcbElement: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertSerializeCertificateStoreElement(pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pbElement: ?*BYTE, pcbElement: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertSetCRLContextProperty(pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertSetCTLContextProperty(pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertSetCertificateContextPropertiesFromCTLEntry(pCertContext: PCCERT_CONTEXT, pCtlEntry: PCTL_ENTRY, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertSetCertificateContextProperty(pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertSetEnhancedKeyUsage(pCertContext: PCCERT_CONTEXT, pUsage: PCERT_ENHKEY_USAGE) BOOL;
pub extern "crypt32" stdcallcc fn CertSetStoreProperty(hCertStore: HCERTSTORE, dwPropId: DWORD, dwFlags: DWORD, pvData: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CertStrToNameA(dwCertEncodingType: DWORD, pszX500: LPCSTR, dwStrType: DWORD, pvReserved: ?*c_void, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD, ppszError: ?*LPCSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertStrToNameW(dwCertEncodingType: DWORD, pszX500: LPCWSTR, dwStrType: DWORD, pvReserved: ?*c_void, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD, ppszError: ?*LPCWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertUnregisterPhysicalStore(pvSystemStore: ?*const c_void, dwFlags: DWORD, pwszStoreName: LPCWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CertUnregisterSystemStore(pvSystemStore: ?*const c_void, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifyCRLRevocation(dwCertEncodingType: DWORD, pCertId: PCERT_INFO, cCrlInfo: DWORD, rgpCrlInfo: ?*PCRL_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifyCRLTimeValidity(pTimeToVerify: LPFILETIME, pCrlInfo: PCRL_INFO) LONG;
pub extern "crypt32" stdcallcc fn CertVerifyCTLUsage(dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: ?*c_void, pSubjectUsage: PCTL_USAGE, dwFlags: DWORD, pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA, pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifyCertificateChainPolicy(pszPolicyOID: LPCSTR, pChainContext: PCCERT_CHAIN_CONTEXT, pPolicyPara: PCERT_CHAIN_POLICY_PARA, pPolicyStatus: PCERT_CHAIN_POLICY_STATUS) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifyRevocation(dwEncodingType: DWORD, dwRevType: DWORD, cContext: DWORD, rgpvContext: ?*PVOID, dwFlags: DWORD, pRevPara: PCERT_REVOCATION_PARA, pRevStatus: PCERT_REVOCATION_STATUS) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifySubjectCertificateContext(pSubject: PCCERT_CONTEXT, pIssuer: PCCERT_CONTEXT, pdwFlags: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CertVerifyTimeValidity(pTimeToVerify: LPFILETIME, pCertInfo: PCERT_INFO) LONG;
pub extern "crypt32" stdcallcc fn CertVerifyValidityNesting(pSubjectInfo: PCERT_INFO, pIssuerInfo: PCERT_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptAcquireCertificatePrivateKey(pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvParameters: ?*c_void, phCryptProvOrNCryptKey: ?*HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pdwKeySpec: ?*DWORD, pfCallerFreeProvOrNCryptKey: ?*BOOL) BOOL;
pub extern "crypt32" stdcallcc fn CryptBinaryToStringA(pbBinary: ?*const BYTE, cbBinary: DWORD, dwFlags: DWORD, pszString: LPSTR, pcchString: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptBinaryToStringW(pbBinary: ?*const BYTE, cbBinary: DWORD, dwFlags: DWORD, pszString: LPWSTR, pcchString: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptCloseAsyncHandle(hAsync: HCRYPTASYNC) BOOL;
pub extern "crypt32" stdcallcc fn CryptCreateAsyncHandle(dwFlags: DWORD, phAsync: PHCRYPTASYNC) BOOL;
pub extern "crypt32" stdcallcc fn CryptCreateKeyIdentifierFromCSP(dwCertEncodingType: DWORD, pszPubKeyOID: LPCSTR, pPubKeyStruc: ?*const PUBLICKEYSTRUC, cbPubKeyStruc: DWORD, dwFlags: DWORD, pvReserved: ?*c_void, pbHash: ?*BYTE, pcbHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptDecodeMessage(dwMsgTypeFlags: DWORD, pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncodedBlob: ?*const BYTE, cbEncodedBlob: DWORD, dwPrevInnerContentType: DWORD, pdwMsgType: ?*DWORD, pdwInnerContentType: ?*DWORD, pbDecoded: ?*BYTE, pcbDecoded: ?*DWORD, ppXchgCert: ?*PCCERT_CONTEXT, ppSignerCert: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptDecodeObject(dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: ?*const BYTE, cbEncoded: DWORD, dwFlags: DWORD, pvStructInfo: ?*c_void, pcbStructInfo: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptDecodeObjectEx(dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: ?*const BYTE, cbEncoded: DWORD, dwFlags: DWORD, pDecodePara: PCRYPT_DECODE_PARA, pvStructInfo: ?*c_void, pcbStructInfo: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptDecryptAndVerifyMessageSignature(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncryptedBlob: ?*const BYTE, cbEncryptedBlob: DWORD, pbDecrypted: ?*BYTE, pcbDecrypted: ?*DWORD, ppXchgCert: ?*PCCERT_CONTEXT, ppSignerCert: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptDecryptMessage(pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob: ?*const BYTE, cbEncryptedBlob: DWORD, pbDecrypted: ?*BYTE, pcbDecrypted: ?*DWORD, ppXchgCert: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptEncodeObject(dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: ?*const c_void, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptEncodeObjectEx(dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: ?*const c_void, dwFlags: DWORD, pEncodePara: PCRYPT_ENCODE_PARA, pvEncoded: ?*c_void, pcbEncoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptEncryptMessage(pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: ?*PCCERT_CONTEXT, pbToBeEncrypted: ?*const BYTE, cbToBeEncrypted: DWORD, pbEncryptedBlob: ?*BYTE, pcbEncryptedBlob: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptEnumKeyIdentifierProperties(pKeyIdentifier: ?*const CRYPT_HASH_BLOB, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: ?*c_void, pvArg: ?*c_void, pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP) BOOL;
pub extern "crypt32" stdcallcc fn CryptEnumOIDFunction(dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, dwFlags: DWORD, pvArg: ?*c_void, pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC) BOOL;
pub extern "crypt32" stdcallcc fn CryptEnumOIDInfo(dwGroupId: DWORD, dwFlags: DWORD, pvArg: ?*c_void, pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptExportPKCS8(hCryptProv: HCRYPTPROV, dwKeySpec: DWORD, pszPrivateKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: ?*c_void, pbPrivateKeyBlob: ?*BYTE, pcbPrivateKeyBlob: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptExportPublicKeyInfo(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: ?*c_void, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey: BCRYPT_KEY_HANDLE, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: ?*c_void, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptFindCertificateKeyProvInfo(pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptFindLocalizedName(pwszCryptName: LPCWSTR) LPCWSTR;
pub extern "crypt32" stdcallcc fn CryptFindOIDInfo(dwKeyType: DWORD, pvKey: ?*c_void, dwGroupId: DWORD) PCCRYPT_OID_INFO;
pub extern "crypt32" stdcallcc fn CryptFormatObject(dwCertEncodingType: DWORD, dwFormatType: DWORD, dwFormatStrType: DWORD, pFormatStruct: ?*c_void, lpszStructType: LPCSTR, pbEncoded: ?*const BYTE, cbEncoded: DWORD, pbFormat: ?*c_void, pcbFormat: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptFreeOIDFunctionAddress(hFuncAddr: HCRYPTOIDFUNCADDR, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetAsyncParam(hAsync: HCRYPTASYNC, pszParamOid: LPSTR, ppvParam: ?*LPVOID, ppfnFree: ?*PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetDefaultOIDDllList(hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDllList: ?*WCHAR, pcchDllList: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetDefaultOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDll: LPCWSTR, dwFlags: DWORD, ppvFuncAddr: ?*(?*c_void), phFuncAddr: ?*HCRYPTOIDFUNCADDR) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetKeyIdentifierProperty(pKeyIdentifier: ?*const CRYPT_HASH_BLOB, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: ?*c_void, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetMessageCertificates(dwMsgAndCertEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pbSignedBlob: ?*const BYTE, cbSignedBlob: DWORD) HCERTSTORE;
pub extern "crypt32" stdcallcc fn CryptGetMessageSignerCount(dwMsgEncodingType: DWORD, pbSignedBlob: ?*const BYTE, cbSignedBlob: DWORD) LONG;
pub extern "crypt32" stdcallcc fn CryptGetOIDFunctionAddress(hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pszOID: LPCSTR, dwFlags: DWORD, ppvFuncAddr: ?*(?*c_void), phFuncAddr: ?*HCRYPTOIDFUNCADDR) BOOL;
pub extern "crypt32" stdcallcc fn CryptGetOIDFunctionValue(dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, pdwValueType: ?*DWORD, pbValueData: ?*BYTE, pcbValueData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptHashCertificate(hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, pbEncoded: ?*const BYTE, cbEncoded: DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptHashCertificate2(pwszCNGHashAlgid: LPCWSTR, dwFlags: DWORD, pvReserved: ?*c_void, pbEncoded: ?*const BYTE, cbEncoded: DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptHashMessage(pHashPara: PCRYPT_HASH_MESSAGE_PARA, fDetachedHash: BOOL, cToBeHashed: DWORD, rgpbToBeHashed: ?*(?*const BYTE), rgcbToBeHashed: ?*DWORD, pbHashedBlob: ?*BYTE, pcbHashedBlob: ?*DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptHashPublicKeyInfo(hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptHashToBeSigned(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: ?*const BYTE, cbEncoded: DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptImportPKCS8(sPrivateKeyAndParams: CRYPT_PKCS8_IMPORT_PARAMS, dwFlags: DWORD, phCryptProv: ?*HCRYPTPROV, pvAuxInfo: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptImportPublicKeyInfo(hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, phKey: ?*HCRYPTKEY) BOOL;
pub extern "crypt32" stdcallcc fn CryptImportPublicKeyInfoEx(hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, aiKeyAlg: ALG_ID, dwFlags: DWORD, pvAuxInfo: ?*c_void, phKey: ?*HCRYPTKEY) BOOL;
pub extern "crypt32" stdcallcc fn CryptImportPublicKeyInfoEx2(dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, dwFlags: DWORD, pvAuxInfo: ?*c_void, phKey: ?*BCRYPT_KEY_HANDLE) BOOL;
pub extern "crypt32" stdcallcc fn CryptInitOIDFunctionSet(pszFuncName: LPCSTR, dwFlags: DWORD) HCRYPTOIDFUNCSET;
pub extern "crypt32" stdcallcc fn CryptInstallDefaultContext(hCryptProv: HCRYPTPROV, dwDefaultType: DWORD, pvDefaultPara: ?*const c_void, dwFlags: DWORD, pvReserved: ?*c_void, phDefaultContext: ?*HCRYPTDEFAULTCONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptInstallOIDFunctionAddress(hModule: HMODULE, dwEncodingType: DWORD, pszFuncName: LPCSTR, cFuncEntry: DWORD, rgFuncEntry: ?*const CRYPT_OID_FUNC_ENTRY, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMemAlloc(cbSize: ULONG) LPVOID;
pub extern "crypt32" stdcallcc fn CryptMemFree(pv: LPVOID) void;
pub extern "crypt32" stdcallcc fn CryptMemRealloc(pv: LPVOID, cbSize: ULONG) LPVOID;
pub extern "crypt32" stdcallcc fn CryptMsgCalculateEncodedLength(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: ?*const c_void, pszInnerContentObjID: LPSTR, cbData: DWORD) DWORD;
pub extern "crypt32" stdcallcc fn CryptMsgClose(hCryptMsg: HCRYPTMSG) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgControl(hCryptMsg: HCRYPTMSG, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgCountersign(hCryptMsg: HCRYPTMSG, dwIndex: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgCountersignEncoded(dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO, pbCountersignature: PBYTE, pcbCountersignature: PDWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgDuplicate(hCryptMsg: HCRYPTMSG) HCRYPTMSG;
pub extern "crypt32" stdcallcc fn CryptMsgEncodeAndSignCTL(dwMsgEncodingType: DWORD, pCtlInfo: PCTL_INFO, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgGetAndVerifySigner(hCryptMsg: HCRYPTMSG, cSignerStore: DWORD, rghSignerStore: ?*HCERTSTORE, dwFlags: DWORD, ppSigner: ?*PCCERT_CONTEXT, pdwSignerIndex: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgGetParam(hCryptMsg: HCRYPTMSG, dwParamType: DWORD, dwIndex: DWORD, pvData: ?*c_void, pcbData: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgOpenToDecode(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, pRecipientInfo: PCERT_INFO, pStreamInfo: PCMSG_STREAM_INFO) HCRYPTMSG;
pub extern "crypt32" stdcallcc fn CryptMsgOpenToEncode(dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: ?*const c_void, pszInnerContentObjID: LPSTR, pStreamInfo: PCMSG_STREAM_INFO) HCRYPTMSG;
pub extern "crypt32" stdcallcc fn CryptMsgSignCTL(dwMsgEncodingType: DWORD, pbCtlContent: ?*BYTE, cbCtlContent: DWORD, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgUpdate(hCryptMsg: HCRYPTMSG, pbData: ?*const BYTE, cbData: DWORD, fFinal: BOOL) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgVerifyCountersignatureEncoded(hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, pciCountersigner: PCERT_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptMsgVerifyCountersignatureEncodedEx(hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, dwSignerType: DWORD, pvSigner: ?*c_void, dwFlags: DWORD, pvExtra: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptProtectData(pDataIn: ?*DATA_BLOB, szDataDescr: LPCWSTR, pOptionalEntropy: ?*DATA_BLOB, pvReserved: PVOID, pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT, dwFlags: DWORD, pDataOut: ?*DATA_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CryptProtectMemory(pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptQueryObject(dwObjectType: DWORD, pvObject: ?*const c_void, dwExpectedContentTypeFlags: DWORD, dwExpectedFormatTypeFlags: DWORD, dwFlags: DWORD, pdwMsgAndCertEncodingType: ?*DWORD, pdwContentType: ?*DWORD, pdwFormatType: ?*DWORD, phCertStore: ?*HCERTSTORE, phMsg: ?*HCRYPTMSG, ppvContext: ?*(?*const c_void)) BOOL;
pub extern "crypt32" stdcallcc fn CryptRegisterDefaultOIDFunction(dwEncodingType: DWORD, pszFuncName: LPCSTR, dwIndex: DWORD, pwszDll: LPCWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CryptRegisterOIDFunction(dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszDll: LPCWSTR, pszOverrideFuncName: LPCSTR) BOOL;
pub extern "crypt32" stdcallcc fn CryptRegisterOIDInfo(pInfo: PCCRYPT_OID_INFO, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptRetrieveTimeStamp(wszUrl: LPCWSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, pszHashId: LPCSTR, pPara: ?*const CRYPT_TIMESTAMP_PARA, pbData: ?*const BYTE, cbData: DWORD, ppTsContext: ?*PCRYPT_TIMESTAMP_CONTEXT, ppTsSigner: ?*PCCERT_CONTEXT, phStore: ?*HCERTSTORE) BOOL;
pub extern "crypt32" stdcallcc fn CryptSetAsyncParam(hAsync: HCRYPTASYNC, pszParamOid: LPSTR, pvParam: LPVOID, pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) BOOL;
pub extern "crypt32" stdcallcc fn CryptSetKeyIdentifierProperty(pKeyIdentifier: ?*const CRYPT_HASH_BLOB, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: ?*c_void, pvData: ?*const c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptSetOIDFunctionValue(dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, dwValueType: DWORD, pbValueData: ?*const BYTE, cbValueData: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: ?*const c_void, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: ?*const c_void, pbEncoded: ?*BYTE, pcbEncoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptSignAndEncryptMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA, pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: ?*PCCERT_CONTEXT, pbToBeSignedAndEncrypted: ?*const BYTE, cbToBeSignedAndEncrypted: DWORD, pbSignedAndEncryptedBlob: ?*BYTE, pcbSignedAndEncryptedBlob: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptSignCertificate(hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pbEncodedToBeSigned: ?*const BYTE, cbEncodedToBeSigned: DWORD, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: ?*const c_void, pbSignature: ?*BYTE, pcbSignature: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptSignMessage(pSignPara: PCRYPT_SIGN_MESSAGE_PARA, fDetachedSignature: BOOL, cToBeSigned: DWORD, rgpbToBeSigned: ?*(?*const BYTE), rgcbToBeSigned: ?*DWORD, pbSignedBlob: ?*BYTE, pcbSignedBlob: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptSignMessageWithKey(pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned: ?*const BYTE, cbToBeSigned: DWORD, pbSignedBlob: ?*BYTE, pcbSignedBlob: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptStringToBinaryA(pszString: LPCSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: ?*BYTE, pcbBinary: ?*DWORD, pdwSkip: ?*DWORD, pdwFlags: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptStringToBinaryW(pszString: LPCWSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: ?*BYTE, pcbBinary: ?*DWORD, pdwSkip: ?*DWORD, pdwFlags: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptUninstallDefaultContext(hDefaultContext: HCRYPTDEFAULTCONTEXT, dwFlags: DWORD, pvReserved: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptUnprotectData(pDataIn: ?*DATA_BLOB, ppszDataDescr: ?*LPWSTR, pOptionalEntropy: ?*DATA_BLOB, pvReserved: PVOID, pPromptStruct: ?*CRYPTPROTECT_PROMPTSTRUCT, dwFlags: DWORD, pDataOut: ?*DATA_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn CryptUnprotectMemory(pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptUnregisterDefaultOIDFunction(dwEncodingType: DWORD, pszFuncName: LPCSTR, pwszDll: LPCWSTR) BOOL;
pub extern "crypt32" stdcallcc fn CryptUnregisterOIDFunction(dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR) BOOL;
pub extern "crypt32" stdcallcc fn CryptUnregisterOIDInfo(pInfo: PCCRYPT_OID_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptUpdateProtectedState(pOldSid: PSID, pwszOldPassword: LPCWSTR, dwFlags: DWORD, pdwSuccessCount: ?*DWORD, pdwFailureCount: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyCertificateSignature(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: ?*const BYTE, cbEncoded: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyCertificateSignatureEx(hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: ?*c_void, dwIssuerType: DWORD, pvIssuer: ?*c_void, dwFlags: DWORD, pvExtra: ?*c_void) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyDetachedMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbDetachedHashBlob: ?*BYTE, cbDetachedHashBlob: DWORD, cToBeHashed: DWORD, rgpbToBeHashed: ?*(?*const BYTE), rgcbToBeHashed: ?*DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyDetachedMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbDetachedSignBlob: ?*const BYTE, cbDetachedSignBlob: DWORD, cToBeSigned: DWORD, rgpbToBeSigned: ?*(?*const BYTE), rgcbToBeSigned: ?*DWORD, ppSignerCert: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyMessageHash(pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbHashedBlob: ?*BYTE, cbHashedBlob: DWORD, pbToBeHashed: ?*BYTE, pcbToBeHashed: ?*DWORD, pbComputedHash: ?*BYTE, pcbComputedHash: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyMessageSignature(pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbSignedBlob: ?*const BYTE, cbSignedBlob: DWORD, pbDecoded: ?*BYTE, pcbDecoded: ?*DWORD, ppSignerCert: ?*PCCERT_CONTEXT) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyMessageSignatureWithKey(pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO, pbSignedBlob: ?*const BYTE, cbSignedBlob: DWORD, pbDecoded: ?*BYTE, pcbDecoded: ?*DWORD) BOOL;
pub extern "crypt32" stdcallcc fn CryptVerifyTimeStampSignature(pbTSContentInfo: ?*const BYTE, cbTSContentInfo: DWORD, pbData: ?*const BYTE, cbData: DWORD, hAdditionalStore: HCERTSTORE, ppTsContext: ?*PCRYPT_TIMESTAMP_CONTEXT, ppTsSigner: ?*PCCERT_CONTEXT, phStore: ?*HCERTSTORE) BOOL;
pub extern "crypt32" stdcallcc fn PFXExportCertStore(hStore: HCERTSTORE, pPFX: ?*CRYPT_DATA_BLOB, szPassword: LPCWSTR, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn PFXExportCertStoreEx(hStore: HCERTSTORE, pPFX: ?*CRYPT_DATA_BLOB, szPassword: LPCWSTR, pvPara: ?*c_void, dwFlags: DWORD) BOOL;
pub extern "crypt32" stdcallcc fn PFXImportCertStore(pPFX: ?*CRYPT_DATA_BLOB, szPassword: LPCWSTR, dwFlags: DWORD) HCERTSTORE;
pub extern "crypt32" stdcallcc fn PFXIsPFXBlob(pPFX: ?*CRYPT_DATA_BLOB) BOOL;
pub extern "crypt32" stdcallcc fn PFXVerifyPassword(pPFX: ?*CRYPT_DATA_BLOB, szPassword: LPCWSTR, dwFlags: DWORD) BOOL;
pub extern "cryptnet" stdcallcc fn CryptGetObjectUrl(pszUrlOid: LPCSTR, pvPara: LPVOID, dwFlags: DWORD, pUrlArray: PCRYPT_URL_ARRAY, pcbUrlArray: ?*DWORD, pUrlInfo: PCRYPT_URL_INFO, pcbUrlInfo: ?*DWORD, pvReserved: LPVOID) BOOL;
pub extern "cryptnet" stdcallcc fn CryptInstallCancelRetrieval(pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL, pvArg: ?*const c_void, dwFlags: DWORD, pvReserved: ?*c_void) BOOL;
pub extern "cryptnet" stdcallcc fn CryptRetrieveObjectByUrlA(pszUrl: LPCSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: ?*LPVOID, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO) BOOL;
pub extern "cryptnet" stdcallcc fn CryptRetrieveObjectByUrlW(pszUrl: LPCWSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: ?*LPVOID, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO) BOOL;
pub extern "cryptnet" stdcallcc fn CryptUninstallCancelRetrieval(dwFlags: DWORD, pvReserved: ?*c_void) BOOL;
pub extern "gdi32" stdcallcc fn AbortDoc(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn AbortPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn AddFontMemResourceEx(pFileView: PVOID, cjSize: DWORD, pvResrved: PVOID, pNumFonts: ?*DWORD) HANDLE;
pub extern "gdi32" stdcallcc fn AddFontResourceA(arg0: LPCSTR) c_int;
pub extern "gdi32" stdcallcc fn AddFontResourceExA(name: LPCSTR, fl: DWORD, res: PVOID) c_int;
pub extern "gdi32" stdcallcc fn AddFontResourceExW(name: LPCWSTR, fl: DWORD, res: PVOID) c_int;
pub extern "gdi32" stdcallcc fn AddFontResourceW(arg0: LPCWSTR) c_int;
pub extern "gdi32" stdcallcc fn AlphaBlend(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, ftn: BLENDFUNCTION) BOOL;
pub extern "gdi32" stdcallcc fn AngleArc(hdc: HDC, x: c_int, y: c_int, r: DWORD, StartAngle: FLOAT, SweepAngle: FLOAT) BOOL;
pub extern "gdi32" stdcallcc fn AnimatePalette(hPal: HPALETTE, iStartIndex: UINT, cEntries: UINT, ppe: ?*const PALETTEENTRY) BOOL;
pub extern "gdi32" stdcallcc fn Arc(hdc: HDC, x1: c_int, y1: c_int, x2: c_int, y2: c_int, x3: c_int, y3: c_int, x4: c_int, y4: c_int) BOOL;
pub extern "gdi32" stdcallcc fn ArcTo(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, xr1: c_int, yr1: c_int, xr2: c_int, yr2: c_int) BOOL;
pub extern "gdi32" stdcallcc fn BeginPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn BitBlt(hdc: HDC, x: c_int, y: c_int, cx: c_int, cy: c_int, hdcSrc: HDC, x1: c_int, y1: c_int, rop: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn CancelDC(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn CheckColorsInGamut(hdc: HDC, lpRGBTriple: LPRGBTRIPLE, dlpBuffer: LPVOID, nCount: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn ChoosePixelFormat(hdc: HDC, ppfd: ?*const PIXELFORMATDESCRIPTOR) c_int;
pub extern "gdi32" stdcallcc fn Chord(hdc: HDC, x1: c_int, y1: c_int, x2: c_int, y2: c_int, x3: c_int, y3: c_int, x4: c_int, y4: c_int) BOOL;
pub extern "gdi32" stdcallcc fn CloseEnhMetaFile(hdc: HDC) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn CloseFigure(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn CloseMetaFile(hdc: HDC) HMETAFILE;
pub extern "gdi32" stdcallcc fn ColorCorrectPalette(hdc: HDC, hPal: HPALETTE, deFirst: DWORD, num: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn ColorMatchToTarget(hdc: HDC, hdcTarget: HDC, action: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn CombineRgn(hrgnDst: HRGN, hrgnSrc1: HRGN, hrgnSrc2: HRGN, iMode: c_int) c_int;
pub extern "gdi32" stdcallcc fn CombineTransform(lpxfOut: LPXFORM, lpxf1: ?*const XFORM, lpxf2: ?*const XFORM) BOOL;
pub extern "gdi32" stdcallcc fn CopyEnhMetaFileA(hEnh: HENHMETAFILE, lpFileName: LPCSTR) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn CopyEnhMetaFileW(hEnh: HENHMETAFILE, lpFileName: LPCWSTR) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn CopyMetaFileA(arg0: HMETAFILE, arg1: LPCSTR) HMETAFILE;
pub extern "gdi32" stdcallcc fn CopyMetaFileW(arg0: HMETAFILE, arg1: LPCWSTR) HMETAFILE;
pub extern "gdi32" stdcallcc fn CreateBitmap(nWidth: c_int, nHeight: c_int, nPlanes: UINT, nBitCount: UINT, lpBits: ?*const c_void) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateBitmapIndirect(pbm: ?*const BITMAP) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateBrushIndirect(plbrush: ?*const LOGBRUSH) HBRUSH;
pub extern "gdi32" stdcallcc fn CreateColorSpaceA(lplcs: LPLOGCOLORSPACEA) HCOLORSPACE;
pub extern "gdi32" stdcallcc fn CreateColorSpaceW(lplcs: LPLOGCOLORSPACEW) HCOLORSPACE;
pub extern "gdi32" stdcallcc fn CreateCompatibleBitmap(hdc: HDC, cx: c_int, cy: c_int) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateCompatibleDC(hdc: HDC) HDC;
pub extern "gdi32" stdcallcc fn CreateDCA(pwszDriver: LPCSTR, pwszDevice: LPCSTR, pszPort: LPCSTR, pdm: ?*const DEVMODEA) HDC;
pub extern "gdi32" stdcallcc fn CreateDCW(pwszDriver: LPCWSTR, pwszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: ?*const DEVMODEW) HDC;
pub extern "gdi32" stdcallcc fn CreateDIBPatternBrush(h: HGLOBAL, iUsage: UINT) HBRUSH;
pub extern "gdi32" stdcallcc fn CreateDIBPatternBrushPt(lpPackedDIB: ?*const c_void, iUsage: UINT) HBRUSH;
pub extern "gdi32" stdcallcc fn CreateDIBSection(hdc: HDC, pbmi: ?*const BITMAPINFO, usage: UINT, ppvBits: ?*(?*c_void), hSection: HANDLE, offset: DWORD) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateDIBitmap(hdc: HDC, pbmih: ?*const BITMAPINFOHEADER, flInit: DWORD, pjBits: ?*const c_void, pbmi: ?*const BITMAPINFO, iUsage: UINT) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateDiscardableBitmap(hdc: HDC, cx: c_int, cy: c_int) HBITMAP;
pub extern "gdi32" stdcallcc fn CreateEllipticRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int) HRGN;
pub extern "gdi32" stdcallcc fn CreateEllipticRgnIndirect(lprect: ?*const RECT) HRGN;
pub extern "gdi32" stdcallcc fn CreateEnhMetaFileA(hdc: HDC, lpFilename: LPCSTR, lprc: ?*const RECT, lpDesc: LPCSTR) HDC;
pub extern "gdi32" stdcallcc fn CreateEnhMetaFileW(hdc: HDC, lpFilename: LPCWSTR, lprc: ?*const RECT, lpDesc: LPCWSTR) HDC;
pub extern "gdi32" stdcallcc fn CreateFontA(cHeight: c_int, cWidth: c_int, cEscapement: c_int, cOrientation: c_int, cWeight: c_int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCSTR) HFONT;
pub extern "gdi32" stdcallcc fn CreateFontIndirectA(lplf: ?*const LOGFONTA) HFONT;
pub extern "gdi32" stdcallcc fn CreateFontIndirectExA(arg0: ?*const ENUMLOGFONTEXDVA) HFONT;
pub extern "gdi32" stdcallcc fn CreateFontIndirectExW(arg0: ?*const ENUMLOGFONTEXDVW) HFONT;
pub extern "gdi32" stdcallcc fn CreateFontIndirectW(lplf: ?*const LOGFONTW) HFONT;
pub extern "gdi32" stdcallcc fn CreateFontW(cHeight: c_int, cWidth: c_int, cEscapement: c_int, cOrientation: c_int, cWeight: c_int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCWSTR) HFONT;
pub extern "gdi32" stdcallcc fn CreateHalftonePalette(hdc: HDC) HPALETTE;
pub extern "gdi32" stdcallcc fn CreateHatchBrush(iHatch: c_int, color: COLORREF) HBRUSH;
pub extern "gdi32" stdcallcc fn CreateICA(pszDriver: LPCSTR, pszDevice: LPCSTR, pszPort: LPCSTR, pdm: ?*const DEVMODEA) HDC;
pub extern "gdi32" stdcallcc fn CreateICW(pszDriver: LPCWSTR, pszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: ?*const DEVMODEW) HDC;
pub extern "gdi32" stdcallcc fn CreateMetaFileA(pszFile: LPCSTR) HDC;
pub extern "gdi32" stdcallcc fn CreateMetaFileW(pszFile: LPCWSTR) HDC;
pub extern "gdi32" stdcallcc fn CreatePalette(plpal: ?*const LOGPALETTE) HPALETTE;
pub extern "gdi32" stdcallcc fn CreatePatternBrush(hbm: HBITMAP) HBRUSH;
pub extern "gdi32" stdcallcc fn CreatePen(iStyle: c_int, cWidth: c_int, color: COLORREF) HPEN;
pub extern "gdi32" stdcallcc fn CreatePenIndirect(plpen: ?*const LOGPEN) HPEN;
pub extern "gdi32" stdcallcc fn CreatePolyPolygonRgn(pptl: ?*const POINT, pc: ?*const INT, cPoly: c_int, iMode: c_int) HRGN;
pub extern "gdi32" stdcallcc fn CreatePolygonRgn(pptl: ?*const POINT, cPoint: c_int, iMode: c_int) HRGN;
pub extern "gdi32" stdcallcc fn CreateRectRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int) HRGN;
pub extern "gdi32" stdcallcc fn CreateRectRgnIndirect(lprect: ?*const RECT) HRGN;
pub extern "gdi32" stdcallcc fn CreateRoundRectRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int, w: c_int, h: c_int) HRGN;
pub extern "gdi32" stdcallcc fn CreateScalableFontResourceA(fdwHidden: DWORD, lpszFont: LPCSTR, lpszFile: LPCSTR, lpszPath: LPCSTR) BOOL;
pub extern "gdi32" stdcallcc fn CreateScalableFontResourceW(fdwHidden: DWORD, lpszFont: LPCWSTR, lpszFile: LPCWSTR, lpszPath: LPCWSTR) BOOL;
pub extern "gdi32" stdcallcc fn CreateSolidBrush(color: COLORREF) HBRUSH;
pub extern "gdi32" stdcallcc fn DPtoLP(hdc: HDC, lppt: LPPOINT, c: c_int) BOOL;
pub extern "gdi32" stdcallcc fn DeleteColorSpace(hcs: HCOLORSPACE) BOOL;
pub extern "gdi32" stdcallcc fn DeleteDC(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn DeleteEnhMetaFile(hmf: HENHMETAFILE) BOOL;
pub extern "gdi32" stdcallcc fn DeleteMetaFile(hmf: HMETAFILE) BOOL;
pub extern "gdi32" stdcallcc fn DeleteObject(ho: HGDIOBJ) BOOL;
pub extern "gdi32" stdcallcc fn DescribePixelFormat(hdc: HDC, iPixelFormat: c_int, nBytes: UINT, ppfd: LPPIXELFORMATDESCRIPTOR) c_int;
pub extern "gdi32" stdcallcc fn DrawEscape(hdc: HDC, iEscape: c_int, cjIn: c_int, lpIn: LPCSTR) c_int;
pub extern "gdi32" stdcallcc fn Ellipse(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
pub extern "gdi32" stdcallcc fn EndDoc(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn EndPage(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn EndPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn EnumEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, proc: ENHMFENUMPROC, param: LPVOID, lpRect: ?*const RECT) BOOL;
pub extern "gdi32" stdcallcc fn EnumFontFamiliesA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumFontFamiliesExA(hdc: HDC, lpLogfont: LPLOGFONTA, lpProc: FONTENUMPROCA, lParam: LPARAM, dwFlags: DWORD) c_int;
pub extern "gdi32" stdcallcc fn EnumFontFamiliesExW(hdc: HDC, lpLogfont: LPLOGFONTW, lpProc: FONTENUMPROCW, lParam: LPARAM, dwFlags: DWORD) c_int;
pub extern "gdi32" stdcallcc fn EnumFontFamiliesW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumFontsA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumFontsW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumICMProfilesA(hdc: HDC, proc: ICMENUMPROCA, param: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumICMProfilesW(hdc: HDC, proc: ICMENUMPROCW, param: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EnumMetaFile(hdc: HDC, hmf: HMETAFILE, proc: MFENUMPROC, param: LPARAM) BOOL;
pub extern "gdi32" stdcallcc fn EnumObjects(hdc: HDC, nType: c_int, lpFunc: GOBJENUMPROC, lParam: LPARAM) c_int;
pub extern "gdi32" stdcallcc fn EqualRgn(hrgn1: HRGN, hrgn2: HRGN) BOOL;
pub extern "gdi32" stdcallcc fn Escape(hdc: HDC, iEscape: c_int, cjIn: c_int, pvIn: LPCSTR, pvOut: LPVOID) c_int;
pub extern "gdi32" stdcallcc fn ExcludeClipRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) c_int;
pub extern "gdi32" stdcallcc fn ExtCreatePen(iPenStyle: DWORD, cWidth: DWORD, plbrush: ?*const LOGBRUSH, cStyle: DWORD, pstyle: ?*const DWORD) HPEN;
pub extern "gdi32" stdcallcc fn ExtCreateRegion(lpx: ?*const XFORM, nCount: DWORD, lpData: ?*const RGNDATA) HRGN;
pub extern "gdi32" stdcallcc fn ExtEscape(hdc: HDC, iEscape: c_int, cjInput: c_int, lpInData: LPCSTR, cjOutput: c_int, lpOutData: LPSTR) c_int;
pub extern "gdi32" stdcallcc fn ExtFloodFill(hdc: HDC, x: c_int, y: c_int, color: COLORREF, type_0: UINT) BOOL;
pub extern "gdi32" stdcallcc fn ExtSelectClipRgn(hdc: HDC, hrgn: HRGN, mode: c_int) c_int;
pub extern "gdi32" stdcallcc fn ExtTextOutA(hdc: HDC, x: c_int, y: c_int, options: UINT, lprect: ?*const RECT, lpString: LPCSTR, c: UINT, lpDx: ?*const INT) BOOL;
pub extern "gdi32" stdcallcc fn ExtTextOutW(hdc: HDC, x: c_int, y: c_int, options: UINT, lprect: ?*const RECT, lpString: LPCWSTR, c: UINT, lpDx: ?*const INT) BOOL;
pub extern "gdi32" stdcallcc fn FillPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn FillRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH) BOOL;
pub extern "gdi32" stdcallcc fn FixBrushOrgEx(hdc: HDC, x: c_int, y: c_int, ptl: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn FlattenPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn FloodFill(hdc: HDC, x: c_int, y: c_int, color: COLORREF) BOOL;
pub extern "gdi32" stdcallcc fn FrameRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH, w: c_int, h: c_int) BOOL;
pub extern "gdi32" stdcallcc fn GdiAlphaBlend(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, ftn: BLENDFUNCTION) BOOL;
pub extern "gdi32" stdcallcc fn GdiComment(hdc: HDC, nSize: UINT, lpData: ?*const BYTE) BOOL;
pub extern "gdi32" stdcallcc fn GdiFlush() BOOL;
pub extern "gdi32" stdcallcc fn GdiGetBatchLimit() DWORD;
pub extern "gdi32" stdcallcc fn GdiGradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nCount: ULONG, ulMode: ULONG) BOOL;
pub extern "gdi32" stdcallcc fn GdiSetBatchLimit(dw: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GdiTransparentBlt(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, crTransparent: UINT) BOOL;
pub extern "gdi32" stdcallcc fn GetArcDirection(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetAspectRatioFilterEx(hdc: HDC, lpsize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetBitmapBits(hbit: HBITMAP, cb: LONG, lpvBits: LPVOID) LONG;
pub extern "gdi32" stdcallcc fn GetBitmapDimensionEx(hbit: HBITMAP, lpsize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetBkColor(hdc: HDC) COLORREF;
pub extern "gdi32" stdcallcc fn GetBkMode(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetBoundsRect(hdc: HDC, lprect: LPRECT, flags: UINT) UINT;
pub extern "gdi32" stdcallcc fn GetBrushOrgEx(hdc: HDC, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharABCWidthsA(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) BOOL;
pub extern "gdi32" stdcallcc fn GetCharABCWidthsFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharABCWidthsFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharABCWidthsI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, pabc: LPABC) BOOL;
pub extern "gdi32" stdcallcc fn GetCharABCWidthsW(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidth32A(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidth32W(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidthA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidthFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidthFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidthI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, piWidths: LPINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharWidthW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
pub extern "gdi32" stdcallcc fn GetCharacterPlacementA(hdc: HDC, lpString: LPCSTR, nCount: c_int, nMexExtent: c_int, lpResults: LPGCP_RESULTSA, dwFlags: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GetCharacterPlacementW(hdc: HDC, lpString: LPCWSTR, nCount: c_int, nMexExtent: c_int, lpResults: LPGCP_RESULTSW, dwFlags: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GetClipBox(hdc: HDC, lprect: LPRECT) c_int;
pub extern "gdi32" stdcallcc fn GetClipRgn(hdc: HDC, hrgn: HRGN) c_int;
pub extern "gdi32" stdcallcc fn GetColorAdjustment(hdc: HDC, lpca: LPCOLORADJUSTMENT) BOOL;
pub extern "gdi32" stdcallcc fn GetColorSpace(hdc: HDC) HCOLORSPACE;
pub extern "gdi32" stdcallcc fn GetCurrentObject(hdc: HDC, type_0: UINT) HGDIOBJ;
pub extern "gdi32" stdcallcc fn GetCurrentPositionEx(hdc: HDC, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn GetDCBrushColor(hdc: HDC) COLORREF;
pub extern "gdi32" stdcallcc fn GetDCOrgEx(hdc: HDC, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn GetDCPenColor(hdc: HDC) COLORREF;
pub extern "gdi32" stdcallcc fn GetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: ?*RGBQUAD) UINT;
pub extern "gdi32" stdcallcc fn GetDIBits(hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpvBits: LPVOID, lpbmi: LPBITMAPINFO, usage: UINT) c_int;
pub extern "gdi32" stdcallcc fn GetDeviceCaps(hdc: HDC, index: c_int) c_int;
pub extern "gdi32" stdcallcc fn GetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) BOOL;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileA(lpName: LPCSTR) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileBits(hEMF: HENHMETAFILE, nSize: UINT, lpData: LPBYTE) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileDescriptionA(hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPSTR) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileDescriptionW(hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPWSTR) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileHeader(hemf: HENHMETAFILE, nSize: UINT, lpEnhMetaHeader: LPENHMETAHEADER) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFilePaletteEntries(hemf: HENHMETAFILE, nNumEntries: UINT, lpPaletteEntries: LPPALETTEENTRY) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFilePixelFormat(hemf: HENHMETAFILE, cbBuffer: UINT, ppfd: ?*PIXELFORMATDESCRIPTOR) UINT;
pub extern "gdi32" stdcallcc fn GetEnhMetaFileW(lpName: LPCWSTR) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn GetFontData(hdc: HDC, dwTable: DWORD, dwOffset: DWORD, pvBuffer: PVOID, cjBuffer: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GetFontLanguageInfo(hdc: HDC) DWORD;
pub extern "gdi32" stdcallcc fn GetFontUnicodeRanges(hdc: HDC, lpgs: LPGLYPHSET) DWORD;
pub extern "gdi32" stdcallcc fn GetGlyphIndicesA(hdc: HDC, lpstr: LPCSTR, c: c_int, pgi: LPWORD, fl: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GetGlyphIndicesW(hdc: HDC, lpstr: LPCWSTR, c: c_int, pgi: LPWORD, fl: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn GetGlyphOutlineA(hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: ?*const MAT2) DWORD;
pub extern "gdi32" stdcallcc fn GetGlyphOutlineW(hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: ?*const MAT2) DWORD;
pub extern "gdi32" stdcallcc fn GetGraphicsMode(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetICMProfileA(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR) BOOL;
pub extern "gdi32" stdcallcc fn GetICMProfileW(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR) BOOL;
pub extern "gdi32" stdcallcc fn GetKerningPairsA(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) DWORD;
pub extern "gdi32" stdcallcc fn GetKerningPairsW(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) DWORD;
pub extern "gdi32" stdcallcc fn GetLayout(hdc: HDC) DWORD;
pub extern "gdi32" stdcallcc fn GetLogColorSpaceA(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEA, nSize: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn GetLogColorSpaceW(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEW, nSize: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn GetMapMode(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetMetaFileA(lpName: LPCSTR) HMETAFILE;
pub extern "gdi32" stdcallcc fn GetMetaFileBitsEx(hMF: HMETAFILE, cbBuffer: UINT, lpData: LPVOID) UINT;
pub extern "gdi32" stdcallcc fn GetMetaFileW(lpName: LPCWSTR) HMETAFILE;
pub extern "gdi32" stdcallcc fn GetMetaRgn(hdc: HDC, hrgn: HRGN) c_int;
pub extern "gdi32" stdcallcc fn GetMiterLimit(hdc: HDC, plimit: PFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn GetNearestColor(hdc: HDC, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn GetNearestPaletteIndex(h: HPALETTE, color: COLORREF) UINT;
pub extern "gdi32" stdcallcc fn GetObjectA(h: HANDLE, c: c_int, pv: LPVOID) c_int;
pub extern "gdi32" stdcallcc fn GetObjectType(h: HGDIOBJ) DWORD;
pub extern "gdi32" stdcallcc fn GetObjectW(h: HANDLE, c: c_int, pv: LPVOID) c_int;
pub extern "gdi32" stdcallcc fn GetOutlineTextMetricsA(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA) UINT;
pub extern "gdi32" stdcallcc fn GetOutlineTextMetricsW(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW) UINT;
pub extern "gdi32" stdcallcc fn GetPaletteEntries(hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY) UINT;
pub extern "gdi32" stdcallcc fn GetPath(hdc: HDC, apt: LPPOINT, aj: LPBYTE, cpt: c_int) c_int;
pub extern "gdi32" stdcallcc fn GetPixel(hdc: HDC, x: c_int, y: c_int) COLORREF;
pub extern "gdi32" stdcallcc fn GetPixelFormat(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetPolyFillMode(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetROP2(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetRandomRgn(hdc: HDC, hrgn: HRGN, i: INT) c_int;
pub extern "gdi32" stdcallcc fn GetRasterizerCaps(lpraststat: LPRASTERIZER_STATUS, cjBytes: UINT) BOOL;
pub extern "gdi32" stdcallcc fn GetRegionData(hrgn: HRGN, nCount: DWORD, lpRgnData: LPRGNDATA) DWORD;
pub extern "gdi32" stdcallcc fn GetRgnBox(hrgn: HRGN, lprc: LPRECT) c_int;
pub extern "gdi32" stdcallcc fn GetStockObject(i: c_int) HGDIOBJ;
pub extern "gdi32" stdcallcc fn GetStretchBltMode(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetSystemPaletteEntries(hdc: HDC, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY) UINT;
pub extern "gdi32" stdcallcc fn GetSystemPaletteUse(hdc: HDC) UINT;
pub extern "gdi32" stdcallcc fn GetTextAlign(hdc: HDC) UINT;
pub extern "gdi32" stdcallcc fn GetTextCharacterExtra(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetTextCharset(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn GetTextCharsetInfo(hdc: HDC, lpSig: LPFONTSIGNATURE, dwFlags: DWORD) c_int;
pub extern "gdi32" stdcallcc fn GetTextColor(hdc: HDC) COLORREF;
pub extern "gdi32" stdcallcc fn GetTextExtentExPointA(hdc: HDC, lpszString: LPCSTR, cchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentExPointI(hdc: HDC, lpwszString: LPWORD, cwchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentExPointW(hdc: HDC, lpszString: LPCWSTR, cchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentPoint32A(hdc: HDC, lpString: LPCSTR, c: c_int, psizl: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentPoint32W(hdc: HDC, lpString: LPCWSTR, c: c_int, psizl: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentPointA(hdc: HDC, lpString: LPCSTR, c: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentPointI(hdc: HDC, pgiIn: LPWORD, cgi: c_int, psize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextExtentPointW(hdc: HDC, lpString: LPCWSTR, c: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetTextFaceA(hdc: HDC, c: c_int, lpName: LPSTR) c_int;
pub extern "gdi32" stdcallcc fn GetTextFaceW(hdc: HDC, c: c_int, lpName: LPWSTR) c_int;
pub extern "gdi32" stdcallcc fn GetTextMetricsA(hdc: HDC, lptm: LPTEXTMETRICA) BOOL;
pub extern "gdi32" stdcallcc fn GetTextMetricsW(hdc: HDC, lptm: LPTEXTMETRICW) BOOL;
pub extern "gdi32" stdcallcc fn GetViewportExtEx(hdc: HDC, lpsize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetViewportOrgEx(hdc: HDC, lppoint: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn GetWinMetaFileBits(hemf: HENHMETAFILE, cbData16: UINT, pData16: LPBYTE, iMapMode: INT, hdcRef: HDC) UINT;
pub extern "gdi32" stdcallcc fn GetWindowExtEx(hdc: HDC, lpsize: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn GetWindowOrgEx(hdc: HDC, lppoint: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn GetWorldTransform(hdc: HDC, lpxf: LPXFORM) BOOL;
pub extern "gdi32" stdcallcc fn GradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nMesh: ULONG, ulMode: ULONG) BOOL;
pub extern "gdi32" stdcallcc fn IntersectClipRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) c_int;
pub extern "gdi32" stdcallcc fn InvertRgn(hdc: HDC, hrgn: HRGN) BOOL;
pub extern "gdi32" stdcallcc fn LPtoDP(hdc: HDC, lppt: LPPOINT, c: c_int) BOOL;
pub extern "gdi32" stdcallcc fn LineDDA(xStart: c_int, yStart: c_int, xEnd: c_int, yEnd: c_int, lpProc: LINEDDAPROC, data: LPARAM) BOOL;
pub extern "gdi32" stdcallcc fn LineTo(hdc: HDC, x: c_int, y: c_int) BOOL;
pub extern "gdi32" stdcallcc fn MaskBlt(hdcDest: HDC, xDest: c_int, yDest: c_int, width: c_int, height: c_int, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, hbmMask: HBITMAP, xMask: c_int, yMask: c_int, rop: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn ModifyWorldTransform(hdc: HDC, lpxf: ?*const XFORM, mode: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn MoveToEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn OffsetClipRgn(hdc: HDC, x: c_int, y: c_int) c_int;
pub extern "gdi32" stdcallcc fn OffsetRgn(hrgn: HRGN, x: c_int, y: c_int) c_int;
pub extern "gdi32" stdcallcc fn OffsetViewportOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn OffsetWindowOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn PaintRgn(hdc: HDC, hrgn: HRGN) BOOL;
pub extern "gdi32" stdcallcc fn PatBlt(hdc: HDC, x: c_int, y: c_int, w: c_int, h: c_int, rop: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn PathToRegion(hdc: HDC) HRGN;
pub extern "gdi32" stdcallcc fn Pie(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, xr1: c_int, yr1: c_int, xr2: c_int, yr2: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PlayEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, lprect: ?*const RECT) BOOL;
pub extern "gdi32" stdcallcc fn PlayEnhMetaFileRecord(hdc: HDC, pht: LPHANDLETABLE, pmr: ?*const ENHMETARECORD, cht: UINT) BOOL;
pub extern "gdi32" stdcallcc fn PlayMetaFile(hdc: HDC, hmf: HMETAFILE) BOOL;
pub extern "gdi32" stdcallcc fn PlayMetaFileRecord(hdc: HDC, lpHandleTable: LPHANDLETABLE, lpMR: LPMETARECORD, noObjs: UINT) BOOL;
pub extern "gdi32" stdcallcc fn PlgBlt(hdcDest: HDC, lpPoint: ?*const POINT, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, width: c_int, height: c_int, hbmMask: HBITMAP, xMask: c_int, yMask: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PolyBezier(hdc: HDC, apt: ?*const POINT, cpt: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn PolyBezierTo(hdc: HDC, apt: ?*const POINT, cpt: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn PolyDraw(hdc: HDC, apt: ?*const POINT, aj: ?*const BYTE, cpt: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PolyPolygon(hdc: HDC, apt: ?*const POINT, asz: ?*const INT, csz: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PolyPolyline(hdc: HDC, apt: ?*const POINT, asz: ?*const DWORD, csz: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn PolyTextOutA(hdc: HDC, ppt: ?*const POLYTEXTA, nstrings: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PolyTextOutW(hdc: HDC, ppt: ?*const POLYTEXTW, nstrings: c_int) BOOL;
pub extern "gdi32" stdcallcc fn Polygon(hdc: HDC, apt: ?*const POINT, cpt: c_int) BOOL;
pub extern "gdi32" stdcallcc fn Polyline(hdc: HDC, apt: ?*const POINT, cpt: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PolylineTo(hdc: HDC, apt: ?*const POINT, cpt: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn PtInRegion(hrgn: HRGN, x: c_int, y: c_int) BOOL;
pub extern "gdi32" stdcallcc fn PtVisible(hdc: HDC, x: c_int, y: c_int) BOOL;
pub extern "gdi32" stdcallcc fn RealizePalette(hdc: HDC) UINT;
pub extern "gdi32" stdcallcc fn RectInRegion(hrgn: HRGN, lprect: ?*const RECT) BOOL;
pub extern "gdi32" stdcallcc fn RectVisible(hdc: HDC, lprect: ?*const RECT) BOOL;
pub extern "gdi32" stdcallcc fn Rectangle(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
pub extern "gdi32" stdcallcc fn RemoveFontMemResourceEx(h: HANDLE) BOOL;
pub extern "gdi32" stdcallcc fn RemoveFontResourceA(lpFileName: LPCSTR) BOOL;
pub extern "gdi32" stdcallcc fn RemoveFontResourceExA(name: LPCSTR, fl: DWORD, pdv: PVOID) BOOL;
pub extern "gdi32" stdcallcc fn RemoveFontResourceExW(name: LPCWSTR, fl: DWORD, pdv: PVOID) BOOL;
pub extern "gdi32" stdcallcc fn RemoveFontResourceW(lpFileName: LPCWSTR) BOOL;
pub extern "gdi32" stdcallcc fn ResetDCA(hdc: HDC, lpdm: ?*const DEVMODEA) HDC;
pub extern "gdi32" stdcallcc fn ResetDCW(hdc: HDC, lpdm: ?*const DEVMODEW) HDC;
pub extern "gdi32" stdcallcc fn ResizePalette(hpal: HPALETTE, n: UINT) BOOL;
pub extern "gdi32" stdcallcc fn RestoreDC(hdc: HDC, nSavedDC: c_int) BOOL;
pub extern "gdi32" stdcallcc fn RoundRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, width: c_int, height: c_int) BOOL;
pub extern "gdi32" stdcallcc fn SaveDC(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn ScaleViewportExtEx(hdc: HDC, xn: c_int, dx: c_int, yn: c_int, yd: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn ScaleWindowExtEx(hdc: HDC, xn: c_int, xd: c_int, yn: c_int, yd: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn SelectClipPath(hdc: HDC, mode: c_int) BOOL;
pub extern "gdi32" stdcallcc fn SelectClipRgn(hdc: HDC, hrgn: HRGN) c_int;
pub extern "gdi32" stdcallcc fn SelectObject(hdc: HDC, h: HGDIOBJ) HGDIOBJ;
pub extern "gdi32" stdcallcc fn SelectPalette(hdc: HDC, hPal: HPALETTE, bForceBkgd: BOOL) HPALETTE;
pub extern "gdi32" stdcallcc fn SetAbortProc(hdc: HDC, proc: ABORTPROC) c_int;
pub extern "gdi32" stdcallcc fn SetArcDirection(hdc: HDC, dir: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetBitmapBits(hbm: HBITMAP, cb: DWORD, pvBits: ?*const c_void) LONG;
pub extern "gdi32" stdcallcc fn SetBitmapDimensionEx(hbm: HBITMAP, w: c_int, h: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn SetBkColor(hdc: HDC, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn SetBkMode(hdc: HDC, mode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetBoundsRect(hdc: HDC, lprect: ?*const RECT, flags: UINT) UINT;
pub extern "gdi32" stdcallcc fn SetBrushOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn SetColorAdjustment(hdc: HDC, lpca: ?*const COLORADJUSTMENT) BOOL;
pub extern "gdi32" stdcallcc fn SetColorSpace(hdc: HDC, hcs: HCOLORSPACE) HCOLORSPACE;
pub extern "gdi32" stdcallcc fn SetDCBrushColor(hdc: HDC, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn SetDCPenColor(hdc: HDC, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn SetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: ?*const RGBQUAD) UINT;
pub extern "gdi32" stdcallcc fn SetDIBits(hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpBits: ?*const c_void, lpbmi: ?*const BITMAPINFO, ColorUse: UINT) c_int;
pub extern "gdi32" stdcallcc fn SetDIBitsToDevice(hdc: HDC, xDest: c_int, yDest: c_int, w: DWORD, h: DWORD, xSrc: c_int, ySrc: c_int, StartScan: UINT, cLines: UINT, lpvBits: ?*const c_void, lpbmi: ?*const BITMAPINFO, ColorUse: UINT) c_int;
pub extern "gdi32" stdcallcc fn SetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) BOOL;
pub extern "gdi32" stdcallcc fn SetEnhMetaFileBits(nSize: UINT, pb: ?*const BYTE) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn SetGraphicsMode(hdc: HDC, iMode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetICMMode(hdc: HDC, mode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetICMProfileA(hdc: HDC, lpFileName: LPSTR) BOOL;
pub extern "gdi32" stdcallcc fn SetICMProfileW(hdc: HDC, lpFileName: LPWSTR) BOOL;
pub extern "gdi32" stdcallcc fn SetLayout(hdc: HDC, l: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn SetMapMode(hdc: HDC, iMode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetMapperFlags(hdc: HDC, flags: DWORD) DWORD;
pub extern "gdi32" stdcallcc fn SetMetaFileBitsEx(cbBuffer: UINT, lpData: ?*const BYTE) HMETAFILE;
pub extern "gdi32" stdcallcc fn SetMetaRgn(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn SetMiterLimit(hdc: HDC, limit: FLOAT, old: PFLOAT) BOOL;
pub extern "gdi32" stdcallcc fn SetPaletteEntries(hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: ?*const PALETTEENTRY) UINT;
pub extern "gdi32" stdcallcc fn SetPixel(hdc: HDC, x: c_int, y: c_int, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn SetPixelFormat(hdc: HDC, format: c_int, ppfd: ?*const PIXELFORMATDESCRIPTOR) BOOL;
pub extern "gdi32" stdcallcc fn SetPixelV(hdc: HDC, x: c_int, y: c_int, color: COLORREF) BOOL;
pub extern "gdi32" stdcallcc fn SetPolyFillMode(hdc: HDC, mode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetROP2(hdc: HDC, rop2: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetRectRgn(hrgn: HRGN, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
pub extern "gdi32" stdcallcc fn SetStretchBltMode(hdc: HDC, mode: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetSystemPaletteUse(hdc: HDC, @"use": UINT) UINT;
pub extern "gdi32" stdcallcc fn SetTextAlign(hdc: HDC, @"align": UINT) UINT;
pub extern "gdi32" stdcallcc fn SetTextCharacterExtra(hdc: HDC, extra: c_int) c_int;
pub extern "gdi32" stdcallcc fn SetTextColor(hdc: HDC, color: COLORREF) COLORREF;
pub extern "gdi32" stdcallcc fn SetTextJustification(hdc: HDC, extra: c_int, count: c_int) BOOL;
pub extern "gdi32" stdcallcc fn SetViewportExtEx(hdc: HDC, x: c_int, y: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn SetViewportOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn SetWinMetaFileBits(nSize: UINT, lpMeta16Data: ?*const BYTE, hdcRef: HDC, lpMFP: ?*const METAFILEPICT) HENHMETAFILE;
pub extern "gdi32" stdcallcc fn SetWindowExtEx(hdc: HDC, x: c_int, y: c_int, lpsz: LPSIZE) BOOL;
pub extern "gdi32" stdcallcc fn SetWindowOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
pub extern "gdi32" stdcallcc fn SetWorldTransform(hdc: HDC, lpxf: ?*const XFORM) BOOL;
pub extern "gdi32" stdcallcc fn StartDocA(hdc: HDC, lpdi: ?*const DOCINFOA) c_int;
pub extern "gdi32" stdcallcc fn StartDocW(hdc: HDC, lpdi: ?*const DOCINFOW) c_int;
pub extern "gdi32" stdcallcc fn StartPage(hdc: HDC) c_int;
pub extern "gdi32" stdcallcc fn StretchBlt(hdcDest: HDC, xDest: c_int, yDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, wSrc: c_int, hSrc: c_int, rop: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn StretchDIBits(hdc: HDC, xDest: c_int, yDest: c_int, DestWidth: c_int, DestHeight: c_int, xSrc: c_int, ySrc: c_int, SrcWidth: c_int, SrcHeight: c_int, lpBits: ?*const c_void, lpbmi: ?*const BITMAPINFO, iUsage: UINT, rop: DWORD) c_int;
pub extern "gdi32" stdcallcc fn StrokeAndFillPath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn StrokePath(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn SwapBuffers(arg0: HDC) BOOL;
pub extern "gdi32" stdcallcc fn TextOutA(hdc: HDC, x: c_int, y: c_int, lpString: LPCSTR, c: c_int) BOOL;
pub extern "gdi32" stdcallcc fn TextOutW(hdc: HDC, x: c_int, y: c_int, lpString: LPCWSTR, c: c_int) BOOL;
pub extern "gdi32" stdcallcc fn TranslateCharsetInfo(lpSrc: ?*DWORD, lpCs: LPCHARSETINFO, dwFlags: DWORD) BOOL;
pub extern "gdi32" stdcallcc fn TransparentBlt(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, crTransparent: UINT) BOOL;
pub extern "gdi32" stdcallcc fn UnrealizeObject(h: HGDIOBJ) BOOL;
pub extern "gdi32" stdcallcc fn UpdateColors(hdc: HDC) BOOL;
pub extern "gdi32" stdcallcc fn UpdateICMRegKeyA(reserved: DWORD, lpszCMID: LPSTR, lpszFileName: LPSTR, command: UINT) BOOL;
pub extern "gdi32" stdcallcc fn UpdateICMRegKeyW(reserved: DWORD, lpszCMID: LPWSTR, lpszFileName: LPWSTR, command: UINT) BOOL;
pub extern "gdi32" stdcallcc fn WidenPath(hdc: HDC) BOOL;
pub extern "imm32" stdcallcc fn ImmAssociateContext(arg0: HWND, arg1: HIMC) HIMC;
pub extern "imm32" stdcallcc fn ImmAssociateContextEx(arg0: HWND, arg1: HIMC, arg2: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmConfigureIMEA(arg0: HKL, arg1: HWND, arg2: DWORD, arg3: LPVOID) BOOL;
pub extern "imm32" stdcallcc fn ImmConfigureIMEW(arg0: HKL, arg1: HWND, arg2: DWORD, arg3: LPVOID) BOOL;
pub extern "imm32" stdcallcc fn ImmCreateContext() HIMC;
pub extern "imm32" stdcallcc fn ImmDestroyContext(arg0: HIMC) BOOL;
pub extern "imm32" stdcallcc fn ImmDisableIME(arg0: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmDisableLegacyIME() BOOL;
pub extern "imm32" stdcallcc fn ImmDisableTextFrameService(idThread: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmEnumInputContext(idThread: DWORD, lpfn: IMCENUMPROC, lParam: LPARAM) BOOL;
pub extern "imm32" stdcallcc fn ImmEnumRegisterWordA(arg0: HKL, arg1: REGISTERWORDENUMPROCA, lpszReading: LPCSTR, arg3: DWORD, lpszRegister: LPCSTR, arg5: LPVOID) UINT;
pub extern "imm32" stdcallcc fn ImmEnumRegisterWordW(arg0: HKL, arg1: REGISTERWORDENUMPROCW, lpszReading: LPCWSTR, arg3: DWORD, lpszRegister: LPCWSTR, arg5: LPVOID) UINT;
pub extern "imm32" stdcallcc fn ImmEscapeA(arg0: HKL, arg1: HIMC, arg2: UINT, arg3: LPVOID) LRESULT;
pub extern "imm32" stdcallcc fn ImmEscapeW(arg0: HKL, arg1: HIMC, arg2: UINT, arg3: LPVOID) LRESULT;
pub extern "imm32" stdcallcc fn ImmGetCandidateListA(arg0: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetCandidateListCountA(arg0: HIMC, lpdwListCount: LPDWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetCandidateListCountW(arg0: HIMC, lpdwListCount: LPDWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetCandidateListW(arg0: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetCandidateWindow(arg0: HIMC, arg1: DWORD, lpCandidate: LPCANDIDATEFORM) BOOL;
pub extern "imm32" stdcallcc fn ImmGetCompositionFontA(arg0: HIMC, lplf: LPLOGFONTA) BOOL;
pub extern "imm32" stdcallcc fn ImmGetCompositionFontW(arg0: HIMC, lplf: LPLOGFONTW) BOOL;
pub extern "imm32" stdcallcc fn ImmGetCompositionStringA(arg0: HIMC, arg1: DWORD, lpBuf: LPVOID, dwBufLen: DWORD) LONG;
pub extern "imm32" stdcallcc fn ImmGetCompositionStringW(arg0: HIMC, arg1: DWORD, lpBuf: LPVOID, dwBufLen: DWORD) LONG;
pub extern "imm32" stdcallcc fn ImmGetCompositionWindow(arg0: HIMC, lpCompForm: LPCOMPOSITIONFORM) BOOL;
pub extern "imm32" stdcallcc fn ImmGetContext(arg0: HWND) HIMC;
pub extern "imm32" stdcallcc fn ImmGetConversionListA(arg0: HKL, arg1: HIMC, lpSrc: LPCSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT) DWORD;
pub extern "imm32" stdcallcc fn ImmGetConversionListW(arg0: HKL, arg1: HIMC, lpSrc: LPCWSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT) DWORD;
pub extern "imm32" stdcallcc fn ImmGetConversionStatus(arg0: HIMC, lpfdwConversion: LPDWORD, lpfdwSentence: LPDWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmGetDefaultIMEWnd(arg0: HWND) HWND;
pub extern "imm32" stdcallcc fn ImmGetDescriptionA(arg0: HKL, lpszDescription: LPSTR, uBufLen: UINT) UINT;
pub extern "imm32" stdcallcc fn ImmGetDescriptionW(arg0: HKL, lpszDescription: LPWSTR, uBufLen: UINT) UINT;
pub extern "imm32" stdcallcc fn ImmGetGuideLineA(arg0: HIMC, dwIndex: DWORD, lpBuf: LPSTR, dwBufLen: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetGuideLineW(arg0: HIMC, dwIndex: DWORD, lpBuf: LPWSTR, dwBufLen: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetIMEFileNameA(arg0: HKL, lpszFileName: LPSTR, uBufLen: UINT) UINT;
pub extern "imm32" stdcallcc fn ImmGetIMEFileNameW(arg0: HKL, lpszFileName: LPWSTR, uBufLen: UINT) UINT;
pub extern "imm32" stdcallcc fn ImmGetImeMenuItemsA(arg0: HIMC, arg1: DWORD, arg2: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOA, lpImeMenu: LPIMEMENUITEMINFOA, dwSize: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetImeMenuItemsW(arg0: HIMC, arg1: DWORD, arg2: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOW, lpImeMenu: LPIMEMENUITEMINFOW, dwSize: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetOpenStatus(arg0: HIMC) BOOL;
pub extern "imm32" stdcallcc fn ImmGetProperty(arg0: HKL, arg1: DWORD) DWORD;
pub extern "imm32" stdcallcc fn ImmGetRegisterWordStyleA(arg0: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFA) UINT;
pub extern "imm32" stdcallcc fn ImmGetRegisterWordStyleW(arg0: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFW) UINT;
pub extern "imm32" stdcallcc fn ImmGetStatusWindowPos(arg0: HIMC, lpptPos: LPPOINT) BOOL;
pub extern "imm32" stdcallcc fn ImmGetVirtualKey(arg0: HWND) UINT;
pub extern "imm32" stdcallcc fn ImmInstallIMEA(lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR) HKL;
pub extern "imm32" stdcallcc fn ImmInstallIMEW(lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR) HKL;
pub extern "imm32" stdcallcc fn ImmIsIME(arg0: HKL) BOOL;
pub extern "imm32" stdcallcc fn ImmIsUIMessageA(arg0: HWND, arg1: UINT, arg2: WPARAM, arg3: LPARAM) BOOL;
pub extern "imm32" stdcallcc fn ImmIsUIMessageW(arg0: HWND, arg1: UINT, arg2: WPARAM, arg3: LPARAM) BOOL;
pub extern "imm32" stdcallcc fn ImmNotifyIME(arg0: HIMC, dwAction: DWORD, dwIndex: DWORD, dwValue: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmRegisterWordA(arg0: HKL, lpszReading: LPCSTR, arg2: DWORD, lpszRegister: LPCSTR) BOOL;
pub extern "imm32" stdcallcc fn ImmRegisterWordW(arg0: HKL, lpszReading: LPCWSTR, arg2: DWORD, lpszRegister: LPCWSTR) BOOL;
pub extern "imm32" stdcallcc fn ImmReleaseContext(arg0: HWND, arg1: HIMC) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCandidateWindow(arg0: HIMC, lpCandidate: LPCANDIDATEFORM) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCompositionFontA(arg0: HIMC, lplf: LPLOGFONTA) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCompositionFontW(arg0: HIMC, lplf: LPLOGFONTW) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCompositionStringA(arg0: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCompositionStringW(arg0: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmSetCompositionWindow(arg0: HIMC, lpCompForm: LPCOMPOSITIONFORM) BOOL;
pub extern "imm32" stdcallcc fn ImmSetConversionStatus(arg0: HIMC, arg1: DWORD, arg2: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmSetOpenStatus(arg0: HIMC, arg1: BOOL) BOOL;
pub extern "imm32" stdcallcc fn ImmSetStatusWindowPos(arg0: HIMC, lpptPos: LPPOINT) BOOL;
pub extern "imm32" stdcallcc fn ImmSimulateHotKey(arg0: HWND, arg1: DWORD) BOOL;
pub extern "imm32" stdcallcc fn ImmUnregisterWordA(arg0: HKL, lpszReading: LPCSTR, arg2: DWORD, lpszUnregister: LPCSTR) BOOL;
pub extern "imm32" stdcallcc fn ImmUnregisterWordW(arg0: HKL, lpszReading: LPCWSTR, arg2: DWORD, lpszUnregister: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn AccessCheckAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
pub extern "kernel32" stdcallcc fn AcquireSRWLockExclusive(SRWLock: PSRWLOCK) void;
pub extern "kernel32" stdcallcc fn AcquireSRWLockShared(SRWLock: PSRWLOCK) void;
pub extern "kernel32" stdcallcc fn ActivateActCtx(hActCtx: HANDLE, lpCookie: ?*ULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn AddAtomA(lpString: LPCSTR) ATOM;
pub extern "kernel32" stdcallcc fn AddAtomW(lpString: LPCWSTR) ATOM;
pub extern "kernel32" stdcallcc fn AddConditionalAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AceType: UCHAR, AccessMask: DWORD, pSid: PSID, ConditionStr: PWCHAR, ReturnLength: ?*DWORD) BOOL;
pub extern "kernel32" stdcallcc fn AddConsoleAliasA(Source: LPSTR, Target: LPSTR, ExeName: LPSTR) BOOL;
pub extern "kernel32" stdcallcc fn AddConsoleAliasW(Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR) BOOL;
pub extern "kernel32" stdcallcc fn AddDllDirectory(NewDirectory: PCWSTR) DLL_DIRECTORY_COOKIE;
pub extern "kernel32" stdcallcc fn AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: ?*HANDLE, IntegrityLabel: PSID) BOOL;
pub extern "kernel32" stdcallcc fn AddRefActCtx(hActCtx: HANDLE) void;
pub extern "kernel32" stdcallcc fn AddResourceAttributeAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID, pAttributeInfo: PCLAIM_SECURITY_ATTRIBUTES_INFORMATION, pReturnLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn AddSIDToBoundaryDescriptor(BoundaryDescriptor: ?*HANDLE, RequiredSid: PSID) BOOL;
pub extern "kernel32" stdcallcc fn AddScopedPolicyIDAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
pub extern "kernel32" stdcallcc fn AddSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) BOOL;
pub extern "kernel32" stdcallcc fn AddVectoredContinueHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER) PVOID;
pub extern "kernel32" stdcallcc fn AddVectoredExceptionHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER) PVOID;
pub extern "kernel32" stdcallcc fn AllocConsole() BOOL;
pub extern "kernel32" stdcallcc fn AllocateUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn AllocateUserPhysicalPagesNuma(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn ApplicationRecoveryFinished(bSuccess: BOOL) void;
pub extern "kernel32" stdcallcc fn ApplicationRecoveryInProgress(pbCancelled: PBOOL) HRESULT;
pub extern "kernel32" stdcallcc fn AreFileApisANSI() BOOL;
pub extern "kernel32" stdcallcc fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn AttachConsole(dwProcessId: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn BackupRead(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: ?*LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn BackupSeek(hFile: HANDLE, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: ?*LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn BackupWrite(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: ?*LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn Beep(dwFreq: DWORD, dwDuration: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn BeginUpdateResourceA(pFileName: LPCSTR, bDeleteExistingResources: BOOL) HANDLE;
pub extern "kernel32" stdcallcc fn BeginUpdateResourceW(pFileName: LPCWSTR, bDeleteExistingResources: BOOL) HANDLE;
pub extern "kernel32" stdcallcc fn BindIoCompletionCallback(FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn BuildCommDCBA(lpDef: LPCSTR, lpDCB: LPDCB) BOOL;
pub extern "kernel32" stdcallcc fn BuildCommDCBAndTimeoutsA(lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
pub extern "kernel32" stdcallcc fn BuildCommDCBAndTimeoutsW(lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
pub extern "kernel32" stdcallcc fn BuildCommDCBW(lpDef: LPCWSTR, lpDCB: LPDCB) BOOL;
pub extern "kernel32" stdcallcc fn CallNamedPipeA(lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn CallNamedPipeW(lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn CallbackMayRunLong(pci: PTP_CALLBACK_INSTANCE) BOOL;
pub extern "kernel32" stdcallcc fn CancelDeviceWakeupRequest(hDevice: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CancelIo(hFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CancelIoEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn CancelSynchronousIo(hThread: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CancelThreadpoolIo(pio: PTP_IO) void;
pub extern "kernel32" stdcallcc fn CancelTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CancelWaitableTimer(hTimer: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn ChangeTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, DueTime: ULONG, Period: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn CheckNameLegalDOS8Dot3A(lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn CheckNameLegalDOS8Dot3W(lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn CheckRemoteDebuggerPresent(hProcess: HANDLE, pbDebuggerPresent: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn CheckTokenCapability(TokenHandle: HANDLE, CapabilitySidToCheck: PSID, HasCapability: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn CheckTokenMembership(TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn CheckTokenMembershipEx(TokenHandle: HANDLE, SidToCheck: PSID, Flags: DWORD, IsMember: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn ClearCommBreak(hFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn ClearCommError(hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT) BOOL;
pub extern "kernel32" stdcallcc fn CloseHandle(hObject: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn ClosePrivateNamespace(Handle: HANDLE, Flags: ULONG) BOOLEAN;
pub extern "kernel32" stdcallcc fn CloseThreadpool(ptpp: PTP_POOL) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolCleanupGroup(ptpcg: PTP_CLEANUP_GROUP) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolCleanupGroupMembers(ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: BOOL, pvCleanupContext: PVOID) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolIo(pio: PTP_IO) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolTimer(pti: PTP_TIMER) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolWait(pwa: PTP_WAIT) void;
pub extern "kernel32" stdcallcc fn CloseThreadpoolWork(pwk: PTP_WORK) void;
pub extern "kernel32" stdcallcc fn CommConfigDialogA(lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) BOOL;
pub extern "kernel32" stdcallcc fn CommConfigDialogW(lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) BOOL;
pub extern "kernel32" stdcallcc fn CompareFileTime(lpFileTime1: ?*const FILETIME, lpFileTime2: ?*const FILETIME) LONG;
pub extern "kernel32" stdcallcc fn CompareStringA(Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZCH, cchCount1: c_int, lpString2: PCNZCH, cchCount2: c_int) c_int;
pub extern "kernel32" stdcallcc fn CompareStringEx(lpLocaleName: LPCWSTR, dwCmpFlags: DWORD, lpString1: LPCWCH, cchCount1: c_int, lpString2: LPCWCH, cchCount2: c_int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM) c_int;
pub extern "kernel32" stdcallcc fn CompareStringOrdinal(lpString1: LPCWCH, cchCount1: c_int, lpString2: LPCWCH, cchCount2: c_int, bIgnoreCase: BOOL) c_int;
pub extern "kernel32" stdcallcc fn CompareStringW(Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZWCH, cchCount1: c_int, lpString2: PCNZWCH, cchCount2: c_int) c_int;
pub extern "kernel32" stdcallcc fn ConnectNamedPipe(hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn ContinueDebugEvent(dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn ConvertDefaultLocale(Locale: LCID) LCID;
pub extern "kernel32" stdcallcc fn ConvertFiberToThread() BOOL;
pub extern "kernel32" stdcallcc fn ConvertThreadToFiber(lpParameter: LPVOID) LPVOID;
pub extern "kernel32" stdcallcc fn ConvertThreadToFiberEx(lpParameter: LPVOID, dwFlags: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn CopyContext(Destination: PCONTEXT, ContextFlags: DWORD, Source: PCONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn CopyFile2(pwszExistingFileName: PCWSTR, pwszNewFileName: PCWSTR, pExtendedParameters: ?*COPYFILE2_EXTENDED_PARAMETERS) HRESULT;
pub extern "kernel32" stdcallcc fn CopyFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn CopyFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn CopyFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn CopyFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CopyFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CopyFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn CreateActCtxA(pActCtx: PCACTCTXA) HANDLE;
pub extern "kernel32" stdcallcc fn CreateActCtxW(pActCtx: PCACTCTXW) HANDLE;
pub extern "kernel32" stdcallcc fn CreateBoundaryDescriptorA(Name: LPCSTR, Flags: ULONG) HANDLE;
pub extern "kernel32" stdcallcc fn CreateBoundaryDescriptorW(Name: LPCWSTR, Flags: ULONG) HANDLE;
pub extern "kernel32" stdcallcc fn CreateConsoleScreenBuffer(dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: ?*const SECURITY_ATTRIBUTES, dwFlags: DWORD, lpScreenBufferData: LPVOID) HANDLE;
pub extern "kernel32" stdcallcc fn CreateDirectoryA(lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateDirectoryExA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateDirectoryExW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateDirectoryTransactedA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CreateDirectoryTransactedW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CreateDirectoryW(lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateEnclave(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwInitialCommitment: SIZE_T, flEnclaveType: DWORD, lpEnclaveInformation: LPCVOID, dwInfoLength: DWORD, lpEnclaveError: LPDWORD) LPVOID;
pub extern "kernel32" stdcallcc fn CreateEventA(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateEventExA(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateEventExW(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateEventW(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFiber(dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID) LPVOID;
pub extern "kernel32" stdcallcc fn CreateFiberEx(dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID) LPVOID;
pub extern "kernel32" stdcallcc fn CreateFile2(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwCreationDisposition: DWORD, pCreateExParams: LPCREATEFILE2_EXTENDED_PARAMETERS) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileA(lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileMappingA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileMappingFromApp(hFile: HANDLE, SecurityAttributes: PSECURITY_ATTRIBUTES, PageProtection: ULONG, MaximumSize: ULONG64, Name: PCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileMappingNumaA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR, nndPreferred: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileMappingNumaW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR, nndPreferred: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileMappingW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileTransactedA(lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileTransactedW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID) HANDLE;
pub extern "kernel32" stdcallcc fn CreateFileW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn CreateHardLinkA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateHardLinkTransactedA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CreateHardLinkTransactedW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn CreateHardLinkW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
pub extern "kernel32" stdcallcc fn CreateIoCompletionPort(FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateJobSet(NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn CreateMailslotA(lpName: LPCSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMailslotW(lpName: LPCWSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMemoryResourceNotification(NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMutexA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMutexExA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMutexExW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateMutexW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateNamedPipeA(lpName: LPCSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
pub extern "kernel32" stdcallcc fn CreateNamedPipeW(lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
pub extern "kernel32" stdcallcc fn CreatePipe(hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreatePrivateNamespaceW(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateProcessA(lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn CreateProcessAsUserA(hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn CreateProcessAsUserW(hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn CreateProcessW(lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn CreateRemoteThread(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateRemoteThreadEx(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateSemaphoreA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateSemaphoreExA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateSemaphoreExW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateSemaphoreW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateSymbolicLinkA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD) BOOLEAN;
pub extern "kernel32" stdcallcc fn CreateSymbolicLinkTransactedA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD, hTransaction: HANDLE) BOOLEAN;
pub extern "kernel32" stdcallcc fn CreateSymbolicLinkTransactedW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD, hTransaction: HANDLE) BOOLEAN;
pub extern "kernel32" stdcallcc fn CreateSymbolicLinkW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD) BOOLEAN;
pub extern "kernel32" stdcallcc fn CreateTapePartition(hDevice: HANDLE, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateThreadpool(reserved: PVOID) PTP_POOL;
pub extern "kernel32" stdcallcc fn CreateThreadpoolCleanupGroup() PTP_CLEANUP_GROUP;
pub extern "kernel32" stdcallcc fn CreateThreadpoolIo(fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_IO;
pub extern "kernel32" stdcallcc fn CreateThreadpoolTimer(pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_TIMER;
pub extern "kernel32" stdcallcc fn CreateThreadpoolWait(pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_WAIT;
pub extern "kernel32" stdcallcc fn CreateThreadpoolWork(pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_WORK;
pub extern "kernel32" stdcallcc fn CreateTimerQueue() HANDLE;
pub extern "kernel32" stdcallcc fn CreateTimerQueueTimer(phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn CreateUmsCompletionList(UmsCompletionList: ?*PUMS_COMPLETION_LIST) BOOL;
pub extern "kernel32" stdcallcc fn CreateUmsThreadContext(lpUmsThread: ?*PUMS_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn CreateWaitableTimerA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn CreateWaitableTimerExA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateWaitableTimerExW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn CreateWaitableTimerW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn DeactivateActCtx(dwFlags: DWORD, ulCookie: ULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn DebugActiveProcess(dwProcessId: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn DebugActiveProcessStop(dwProcessId: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn DebugBreak() void;
pub extern "kernel32" stdcallcc fn DebugBreakProcess(Process: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DebugSetProcessKillOnExit(KillOnExit: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn DecodePointer(Ptr: PVOID) PVOID;
pub extern "kernel32" stdcallcc fn DecodeSystemPointer(Ptr: PVOID) PVOID;
pub extern "kernel32" stdcallcc fn DefineDosDeviceA(dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn DefineDosDeviceW(dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn DeleteAtom(nAtom: ATOM) ATOM;
pub extern "kernel32" stdcallcc fn DeleteBoundaryDescriptor(BoundaryDescriptor: HANDLE) void;
pub extern "kernel32" stdcallcc fn DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
pub extern "kernel32" stdcallcc fn DeleteFiber(lpFiber: LPVOID) void;
pub extern "kernel32" stdcallcc fn DeleteFileA(lpFileName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn DeleteFileTransactedA(lpFileName: LPCSTR, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DeleteFileTransactedW(lpFileName: LPCWSTR, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DeleteFileW(lpFileName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn DeleteProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST) void;
pub extern "kernel32" stdcallcc fn DeleteSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER) BOOL;
pub extern "kernel32" stdcallcc fn DeleteTimerQueue(TimerQueue: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DeleteTimerQueueEx(TimerQueue: HANDLE, CompletionEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DeleteTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DeleteUmsCompletionList(UmsCompletionList: PUMS_COMPLETION_LIST) BOOL;
pub extern "kernel32" stdcallcc fn DeleteUmsThreadContext(UmsThread: PUMS_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn DeleteVolumeMountPointA(lpszVolumeMountPoint: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn DequeueUmsCompletionListItems(UmsCompletionList: PUMS_COMPLETION_LIST, WaitTimeOut: DWORD, UmsThreadList: ?*PUMS_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn DeviceIoControl(hDevice: HANDLE, dwIoControlCode: DWORD, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn DisableThreadLibraryCalls(hLibModule: HMODULE) BOOL;
pub extern "kernel32" stdcallcc fn DisableThreadProfiling(PerformanceDataHandle: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn DisassociateCurrentThreadFromCallback(pci: PTP_CALLBACK_INSTANCE) void;
pub extern "kernel32" stdcallcc fn DiscardVirtualMemory(VirtualAddress: PVOID, Size: SIZE_T) DWORD;
pub extern "kernel32" stdcallcc fn DisconnectNamedPipe(hNamedPipe: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn DnsHostnameToComputerNameA(Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn DnsHostnameToComputerNameExW(Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn DnsHostnameToComputerNameW(Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn DosDateTimeToFileTime(wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn DuplicateHandle(hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnableThreadProfiling(ThreadHandle: HANDLE, Flags: DWORD, HardwareCounters: DWORD64, PerformanceDataHandle: ?*HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn EncodePointer(Ptr: PVOID) PVOID;
pub extern "kernel32" stdcallcc fn EncodeSystemPointer(Ptr: PVOID) PVOID;
pub extern "kernel32" stdcallcc fn EndUpdateResourceA(hUpdate: HANDLE, fDiscard: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn EndUpdateResourceW(hUpdate: HANDLE, fDiscard: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
pub extern "kernel32" stdcallcc fn EnterSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnterUmsSchedulingMode(SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO) BOOL;
pub extern "kernel32" stdcallcc fn EnumCalendarInfoA(lpCalInfoEnumProc: CALINFO_ENUMPROCA, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
pub extern "kernel32" stdcallcc fn EnumCalendarInfoExA(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
pub extern "kernel32" stdcallcc fn EnumCalendarInfoExEx(pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX, lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lParam: LPARAM) BOOL;
pub extern "kernel32" stdcallcc fn EnumCalendarInfoExW(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
pub extern "kernel32" stdcallcc fn EnumCalendarInfoW(lpCalInfoEnumProc: CALINFO_ENUMPROCW, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
pub extern "kernel32" stdcallcc fn EnumDateFormatsA(lpDateFmtEnumProc: DATEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumDateFormatsExA(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumDateFormatsExEx(lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM) BOOL;
pub extern "kernel32" stdcallcc fn EnumDateFormatsExW(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumDateFormatsW(lpDateFmtEnumProc: DATEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceLanguagesA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceLanguagesExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceLanguagesExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceLanguagesW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceNamesA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceNamesExA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceNamesExW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceNamesW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceTypesA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceTypesExA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceTypesExW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
pub extern "kernel32" stdcallcc fn EnumResourceTypesW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemFirmwareTables(FirmwareTableProviderSignature: DWORD, pFirmwareTableEnumBuffer: PVOID, BufferSize: DWORD) UINT;
pub extern "kernel32" stdcallcc fn EnumSystemGeoID(GeoClass: GEOCLASS, ParentGeoId: GEOID, lpGeoEnumProc: GEO_ENUMPROC) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemLocalesEx(lpLocaleEnumProcEx: LOCALE_ENUMPROCEX, dwFlags: DWORD, lParam: LPARAM, lpReserved: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumTimeFormatsA(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumTimeFormatsEx(lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM) BOOL;
pub extern "kernel32" stdcallcc fn EnumTimeFormatsW(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn EnumUILanguagesA(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EnumUILanguagesW(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn EraseTape(hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn EscapeCommFunction(hFile: HANDLE, dwFunc: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn ExecuteUmsThread(UmsThread: PUMS_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn ExitProcess(uExitCode: UINT) noreturn;
pub extern "kernel32" stdcallcc fn ExitThread(dwExitCode: DWORD) noreturn;
pub extern "kernel32" stdcallcc fn ExpandEnvironmentStringsA(lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn ExpandEnvironmentStringsW(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn FatalAppExitA(uAction: UINT, lpMessageText: LPCSTR) void;
pub extern "kernel32" stdcallcc fn FatalAppExitW(uAction: UINT, lpMessageText: LPCWSTR) void;
pub extern "kernel32" stdcallcc fn FatalExit(ExitCode: c_int) void;
pub extern "kernel32" stdcallcc fn FileTimeToDosDateTime(lpFileTime: ?*const FILETIME, lpFatDate: LPWORD, lpFatTime: LPWORD) BOOL;
pub extern "kernel32" stdcallcc fn FileTimeToLocalFileTime(lpFileTime: ?*const FILETIME, lpLocalFileTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn FileTimeToSystemTime(lpFileTime: ?*const FILETIME, lpSystemTime: LPSYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn FillConsoleOutputAttribute(hConsoleOutput: HANDLE, wAttribute: WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn FillConsoleOutputCharacterA(hConsoleOutput: HANDLE, cCharacter: CHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn FillConsoleOutputCharacterW(hConsoleOutput: HANDLE, cCharacter: WCHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn FindActCtxSectionGuid(dwFlags: DWORD, lpExtensionGuid: ?*const GUID, ulSectionId: ULONG, lpGuidToFind: ?*const GUID, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
pub extern "kernel32" stdcallcc fn FindActCtxSectionStringA(dwFlags: DWORD, lpExtensionGuid: ?*const GUID, ulSectionId: ULONG, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
pub extern "kernel32" stdcallcc fn FindActCtxSectionStringW(dwFlags: DWORD, lpExtensionGuid: ?*const GUID, ulSectionId: ULONG, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
pub extern "kernel32" stdcallcc fn FindAtomA(lpString: LPCSTR) ATOM;
pub extern "kernel32" stdcallcc fn FindAtomW(lpString: LPCWSTR) ATOM;
pub extern "kernel32" stdcallcc fn FindClose(hFindFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FindCloseChangeNotification(hChangeHandle: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FindFirstChangeNotificationA(lpPathName: LPCSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstChangeNotificationW(lpPathName: LPCWSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileA(lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileExA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileExW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileNameTransactedW(lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWSTR, hTransaction: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileNameW(lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileTransactedA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileTransactedW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstFileW(lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstStreamTransactedW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstStreamW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstVolumeA(lpszVolumeName: LPSTR, cchBufferLength: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstVolumeMountPointA(lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstVolumeMountPointW(lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindFirstVolumeW(lpszVolumeName: LPWSTR, cchBufferLength: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn FindNLSString(Locale: LCID, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, pcchFound: LPINT) c_int;
pub extern "kernel32" stdcallcc fn FindNLSStringEx(lpLocaleName: LPCWSTR, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, pcchFound: LPINT, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: LPARAM) c_int;
pub extern "kernel32" stdcallcc fn FindNextChangeNotification(hChangeHandle: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FindNextFileA(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA) BOOL;
pub extern "kernel32" stdcallcc fn FindNextFileNameW(hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWSTR) BOOL;
pub extern "kernel32" stdcallcc fn FindNextFileW(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW) BOOL;
pub extern "kernel32" stdcallcc fn FindNextStreamW(hFindStream: HANDLE, lpFindStreamData: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn FindNextVolumeA(hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn FindNextVolumeMountPointA(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn FindNextVolumeMountPointW(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn FindNextVolumeW(hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn FindResourceA(hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR) HRSRC;
pub extern "kernel32" stdcallcc fn FindResourceExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD) HRSRC;
pub extern "kernel32" stdcallcc fn FindResourceExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD) HRSRC;
pub extern "kernel32" stdcallcc fn FindResourceW(hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR) HRSRC;
pub extern "kernel32" stdcallcc fn FindStringOrdinal(dwFindStringOrdinalFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, bIgnoreCase: BOOL) c_int;
pub extern "kernel32" stdcallcc fn FindVolumeClose(hFindVolume: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FlsAlloc(lpCallback: PFLS_CALLBACK_FUNCTION) DWORD;
pub extern "kernel32" stdcallcc fn FlsFree(dwFlsIndex: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn FlsGetValue(dwFlsIndex: DWORD) PVOID;
pub extern "kernel32" stdcallcc fn FlsSetValue(dwFlsIndex: DWORD, lpFlsData: PVOID) BOOL;
pub extern "kernel32" stdcallcc fn FlushConsoleInputBuffer(hConsoleInput: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FlushFileBuffers(hFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn FlushInstructionCache(hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn FlushProcessWriteBuffers() void;
pub extern "kernel32" stdcallcc fn FlushViewOfFile(lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn FoldStringA(dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpDestStr: LPSTR, cchDest: c_int) c_int;
pub extern "kernel32" stdcallcc fn FoldStringW(dwMapFlags: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int) c_int;
pub extern "kernel32" stdcallcc fn FormatMessageA(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: ?*va_list) DWORD;
pub extern "kernel32" stdcallcc fn FormatMessageW(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD, Arguments: ?*va_list) DWORD;
pub extern "kernel32" stdcallcc fn FreeConsole() BOOL;
pub extern "kernel32" stdcallcc fn FreeEnvironmentStringsA(penv: LPCH) BOOL;
pub extern "kernel32" stdcallcc fn FreeEnvironmentStringsW(penv: LPWCH) BOOL;
pub extern "kernel32" stdcallcc fn FreeLibrary(hLibModule: HMODULE) BOOL;
pub extern "kernel32" stdcallcc fn FreeLibraryAndExitThread(hLibModule: HMODULE, dwExitCode: DWORD) noreturn;
pub extern "kernel32" stdcallcc fn FreeLibraryWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mod: HMODULE) void;
pub extern "kernel32" stdcallcc fn FreeMemoryJobObject(Buffer: ?*c_void) void;
pub extern "kernel32" stdcallcc fn FreeResource(hResData: HGLOBAL) BOOL;
pub extern "kernel32" stdcallcc fn FreeUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD, dwProcessGroupId: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetACP() UINT;
pub extern "kernel32" stdcallcc fn GetActiveProcessorCount(GroupNumber: WORD) DWORD;
pub extern "kernel32" stdcallcc fn GetActiveProcessorGroupCount() WORD;
pub extern "kernel32" stdcallcc fn GetAppContainerAce(Acl: PACL, StartingAceIndex: DWORD, AppContainerAce: ?*PVOID, AppContainerAceIndex: ?*DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetAppContainerNamedObjectPath(Token: HANDLE, AppContainerSid: PSID, ObjectPathLength: ULONG, ObjectPath: LPWSTR, ReturnLength: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetApplicationRecoveryCallback(hProcess: HANDLE, pRecoveryCallback: ?*APPLICATION_RECOVERY_CALLBACK, ppvParameter: ?*PVOID, pdwPingInterval: PDWORD, pdwFlags: PDWORD) HRESULT;
pub extern "kernel32" stdcallcc fn GetApplicationRestartSettings(hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD) HRESULT;
pub extern "kernel32" stdcallcc fn GetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: c_int) UINT;
pub extern "kernel32" stdcallcc fn GetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: c_int) UINT;
pub extern "kernel32" stdcallcc fn GetBinaryTypeA(lpApplicationName: LPCSTR, lpBinaryType: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetBinaryTypeW(lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetCPInfo(CodePage: UINT, lpCPInfo: LPCPINFO) BOOL;
pub extern "kernel32" stdcallcc fn GetCPInfoExA(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA) BOOL;
pub extern "kernel32" stdcallcc fn GetCPInfoExW(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW) BOOL;
pub extern "kernel32" stdcallcc fn GetCachedSigningLevel(File: HANDLE, Flags: PULONG, SigningLevel: PULONG, Thumbprint: PUCHAR, ThumbprintSize: PULONG, ThumbprintAlgorithm: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPSTR, cchData: c_int, lpValue: LPDWORD) c_int;
pub extern "kernel32" stdcallcc fn GetCalendarInfoEx(lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lpCalData: LPWSTR, cchData: c_int, lpValue: LPDWORD) c_int;
pub extern "kernel32" stdcallcc fn GetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPWSTR, cchData: c_int, lpValue: LPDWORD) c_int;
pub extern "kernel32" stdcallcc fn GetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetCommMask(hFile: HANDLE, lpEvtMask: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetCommModemStatus(hFile: HANDLE, lpModemStat: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetCommProperties(hFile: HANDLE, lpCommProp: LPCOMMPROP) BOOL;
pub extern "kernel32" stdcallcc fn GetCommState(hFile: HANDLE, lpDCB: LPDCB) BOOL;
pub extern "kernel32" stdcallcc fn GetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
pub extern "kernel32" stdcallcc fn GetCommandLineA() LPSTR;
pub extern "kernel32" stdcallcc fn GetCommandLineW() LPWSTR;
pub extern "kernel32" stdcallcc fn GetCompressedFileSizeA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetCompressedFileSizeTransactedA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetCompressedFileSizeTransactedW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetCompressedFileSizeW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetComputerNameA(lpBuffer: LPSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetComputerNameW(lpBuffer: LPWSTR, nSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleAliasA(Source: LPSTR, TargetBuffer: LPSTR, TargetBufferLength: DWORD, ExeName: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasExesA(ExeNameBuffer: LPSTR, ExeNameBufferLength: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasExesLengthA() DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasExesLengthW() DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasExesW(ExeNameBuffer: LPWSTR, ExeNameBufferLength: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasW(Source: LPWSTR, TargetBuffer: LPWSTR, TargetBufferLength: DWORD, ExeName: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasesA(AliasBuffer: LPSTR, AliasBufferLength: DWORD, ExeName: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasesLengthA(ExeName: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasesLengthW(ExeName: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleAliasesW(AliasBuffer: LPWSTR, AliasBufferLength: DWORD, ExeName: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleCP() UINT;
pub extern "kernel32" stdcallcc fn GetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleDisplayMode(lpModeFlags: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleFontSize(hConsoleOutput: HANDLE, nFont: DWORD) COORD;
pub extern "kernel32" stdcallcc fn GetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleOriginalTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleOriginalTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleOutputCP() UINT;
pub extern "kernel32" stdcallcc fn GetConsoleProcessList(lpdwProcessList: LPDWORD, dwProcessCount: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleSelectionInfo(lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO) BOOL;
pub extern "kernel32" stdcallcc fn GetConsoleTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetConsoleWindow() HWND;
pub extern "kernel32" stdcallcc fn GetCurrencyFormatA(Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: ?*const CURRENCYFMTA, lpCurrencyStr: LPSTR, cchCurrency: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetCurrencyFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: ?*const CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetCurrencyFormatW(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: ?*const CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetCurrentActCtx(lphActCtx: ?*HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn GetCurrentConsoleFont(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFont: PCONSOLE_FONT_INFO) BOOL;
pub extern "kernel32" stdcallcc fn GetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX) BOOL;
pub extern "kernel32" stdcallcc fn GetCurrentDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetCurrentProcess() HANDLE;
pub extern "kernel32" stdcallcc fn GetCurrentProcessId() DWORD;
pub extern "kernel32" stdcallcc fn GetCurrentProcessorNumber() DWORD;
pub extern "kernel32" stdcallcc fn GetCurrentProcessorNumberEx(ProcNumber: PPROCESSOR_NUMBER) void;
pub extern "kernel32" stdcallcc fn GetCurrentThread() HANDLE;
pub extern "kernel32" stdcallcc fn GetCurrentThreadId() DWORD;
pub extern "kernel32" stdcallcc fn GetCurrentThreadStackLimits(LowLimit: PULONG_PTR, HighLimit: PULONG_PTR) void;
pub extern "kernel32" stdcallcc fn GetCurrentUmsThread() PUMS_CONTEXT;
pub extern "kernel32" stdcallcc fn GetDateFormatA(Locale: LCID, dwFlags: DWORD, lpDate: ?*const SYSTEMTIME, lpFormat: LPCSTR, lpDateStr: LPSTR, cchDate: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetDateFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDate: ?*const SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: c_int, lpCalendar: LPCWSTR) c_int;
pub extern "kernel32" stdcallcc fn GetDateFormatW(Locale: LCID, dwFlags: DWORD, lpDate: ?*const SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetDevicePowerState(hDevice: HANDLE, pfOn: ?*BOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetDiskFreeSpaceA(lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetDiskFreeSpaceExA(lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER) BOOL;
pub extern "kernel32" stdcallcc fn GetDiskFreeSpaceExW(lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER) BOOL;
pub extern "kernel32" stdcallcc fn GetDiskFreeSpaceW(lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetDllDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetDllDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetDriveTypeA(lpRootPathName: LPCSTR) UINT;
pub extern "kernel32" stdcallcc fn GetDriveTypeW(lpRootPathName: LPCWSTR) UINT;
pub extern "kernel32" stdcallcc fn GetDurationFormat(Locale: LCID, dwFlags: DWORD, lpDuration: ?*const SYSTEMTIME, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetDurationFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDuration: ?*const SYSTEMTIME, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetDynamicTimeZoneInformation(pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION) DWORD;
pub extern "kernel32" stdcallcc fn GetEnabledXStateFeatures() DWORD64;
pub extern "kernel32" stdcallcc fn GetEnvironmentStrings() LPCH;
pub extern "kernel32" stdcallcc fn GetEnvironmentStringsW() LPWCH;
pub extern "kernel32" stdcallcc fn GetEnvironmentVariableA(lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetEnvironmentVariableW(lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetErrorMode() UINT;
pub extern "kernel32" stdcallcc fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetExitCodeThread(hThread: HANDLE, lpExitCode: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetFileAttributesA(lpFileName: LPCSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetFileAttributesExA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn GetFileAttributesExW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn GetFileAttributesTransactedA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn GetFileAttributesTransactedW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn GetFileAttributesW(lpFileName: LPCWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetFileBandwidthReservation(hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetFileInformationByHandle(hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn GetFileInformationByHandleEx(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetFileMUIInfo(dwFlags: DWORD, pcwszFilePath: PCWSTR, pFileMUIInfo: PFILEMUIINFO, pcbFileMUIInfo: ?*DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetFileMUIPath(dwFlags: DWORD, pcwszFilePath: PCWSTR, pwszLanguage: PWSTR, pcchLanguage: PULONG, pwszFileMUIPath: PWSTR, pcchFileMUIPath: PULONG, pululEnumerator: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn GetFileSize(hFile: HANDLE, lpFileSizeHigh: LPDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFileSizeEx(hFile: HANDLE, lpFileSize: PLARGE_INTEGER) BOOL;
pub extern "kernel32" stdcallcc fn GetFileTime(hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn GetFileType(hFile: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetFinalPathNameByHandleA(hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: DWORD, dwFlags: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFinalPathNameByHandleW(hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: DWORD, dwFlags: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFirmwareEnvironmentVariableExA(lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD, pdwAttribubutes: PDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFirmwareEnvironmentVariableExW(lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD, pdwAttribubutes: PDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetFirmwareType(FirmwareType: PFIRMWARE_TYPE) BOOL;
pub extern "kernel32" stdcallcc fn GetFullPathNameA(lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: ?*LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetFullPathNameTransactedA(lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: ?*LPSTR, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetFullPathNameTransactedW(lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ?*LPWSTR, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetFullPathNameW(lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ?*LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetGeoInfoA(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPSTR, cchData: c_int, LangId: LANGID) c_int;
pub extern "kernel32" stdcallcc fn GetGeoInfoW(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPWSTR, cchData: c_int, LangId: LANGID) c_int;
pub extern "kernel32" stdcallcc fn GetHandleInformation(hObject: HANDLE, lpdwFlags: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetLargePageMinimum() SIZE_T;
pub extern "kernel32" stdcallcc fn GetLargestConsoleWindowSize(hConsoleOutput: HANDLE) COORD;
pub extern "kernel32" stdcallcc fn GetLastError() DWORD;
pub extern "kernel32" stdcallcc fn GetLocalTime(lpSystemTime: LPSYSTEMTIME) void;
pub extern "kernel32" stdcallcc fn GetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPSTR, cchData: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetLocaleInfoEx(lpLocaleName: LPCWSTR, LCType: LCTYPE, lpLCData: LPWSTR, cchData: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR, cchData: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetLogicalDriveStringsA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetLogicalDriveStringsW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetLogicalDrives() DWORD;
pub extern "kernel32" stdcallcc fn GetLogicalProcessorInformation(Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetLogicalProcessorInformationEx(RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetLongPathNameA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetLongPathNameTransactedA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetLongPathNameTransactedW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD, hTransaction: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetLongPathNameW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetMailslotInfo(hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetMaximumProcessorCount(GroupNumber: WORD) DWORD;
pub extern "kernel32" stdcallcc fn GetMaximumProcessorGroupCount() WORD;
pub extern "kernel32" stdcallcc fn GetMemoryErrorHandlingCapabilities(Capabilities: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetModuleFileNameA(hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetModuleFileNameW(hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetModuleHandleA(lpModuleName: LPCSTR) HMODULE;
pub extern "kernel32" stdcallcc fn GetModuleHandleExA(dwFlags: DWORD, lpModuleName: LPCSTR, phModule: ?*HMODULE) BOOL;
pub extern "kernel32" stdcallcc fn GetModuleHandleExW(dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: ?*HMODULE) BOOL;
pub extern "kernel32" stdcallcc fn GetModuleHandleW(lpModuleName: LPCWSTR) HMODULE;
pub extern "kernel32" stdcallcc fn GetNLSVersion(Function: NLS_FUNCTION, Locale: LCID, lpVersionInformation: LPNLSVERSIONINFO) BOOL;
pub extern "kernel32" stdcallcc fn GetNLSVersionEx(function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeClientComputerNameA(Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeClientComputerNameW(Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeClientProcessId(Pipe: HANDLE, ClientProcessId: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeClientSessionId(Pipe: HANDLE, ClientSessionId: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeHandleStateA(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeHandleStateW(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeInfo(hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeServerProcessId(Pipe: HANDLE, ServerProcessId: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNamedPipeServerSessionId(Pipe: HANDLE, ServerSessionId: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNativeSystemInfo(lpSystemInfo: LPSYSTEM_INFO) void;
pub extern "kernel32" stdcallcc fn GetNextUmsListItem(UmsContext: PUMS_CONTEXT) PUMS_CONTEXT;
pub extern "kernel32" stdcallcc fn GetNumaAvailableMemoryNode(Node: UCHAR, AvailableBytes: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaAvailableMemoryNodeEx(Node: USHORT, AvailableBytes: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaHighestNodeNumber(HighestNodeNumber: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaNodeNumberFromHandle(hFile: HANDLE, NodeNumber: PUSHORT) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaNodeProcessorMask(Node: UCHAR, ProcessorMask: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaNodeProcessorMaskEx(Node: USHORT, ProcessorMask: PGROUP_AFFINITY) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaProcessorNode(Processor: UCHAR, NodeNumber: PUCHAR) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaProcessorNodeEx(Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaProximityNode(ProximityId: ULONG, NodeNumber: PUCHAR) BOOL;
pub extern "kernel32" stdcallcc fn GetNumaProximityNodeEx(ProximityId: ULONG, NodeNumber: PUSHORT) BOOL;
pub extern "kernel32" stdcallcc fn GetNumberFormatA(Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: ?*const NUMBERFMTA, lpNumberStr: LPSTR, cchNumber: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetNumberFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: ?*const NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetNumberFormatW(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: ?*const NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetOEMCP() UINT;
pub extern "kernel32" stdcallcc fn GetOverlappedResult(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetOverlappedResultEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, dwMilliseconds: DWORD, bAlertable: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn GetPriorityClass(hProcess: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT, lpFileName: LPCSTR) UINT;
pub extern "kernel32" stdcallcc fn GetPrivateProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT, lpFileName: LPCWSTR) UINT;
pub extern "kernel32" stdcallcc fn GetPrivateProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileSectionNamesA(lpszReturnBuffer: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileSectionNamesW(lpszReturnBuffer: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetPrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn GetPrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessAffinityMask(hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessDEPPolicy(hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessDefaultCpuSets(Process: HANDLE, CpuSetIds: PULONG, CpuSetIdCount: ULONG, RequiredIdCount: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessGroupAffinity(hProcess: HANDLE, GroupCount: PUSHORT, GroupArray: PUSHORT) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessHandleCount(hProcess: HANDLE, pdwHandleCount: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessHeap() HANDLE;
pub extern "kernel32" stdcallcc fn GetProcessHeaps(NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetProcessId(Process: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetProcessIdOfThread(Thread: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetProcessInformation(hProcess: HANDLE, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: LPVOID, ProcessInformationSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessIoCounters(hProcess: HANDLE, lpIoCounters: PIO_COUNTERS) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessMitigationPolicy(hProcess: HANDLE, MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: PVOID, dwLength: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessPriorityBoost(hProcess: HANDLE, pDisablePriorityBoost: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessShutdownParameters(lpdwLevel: LPDWORD, lpdwFlags: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessTimes(hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessVersion(ProcessId: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetProcessWorkingSetSize(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessWorkingSetSizeEx(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProcessorSystemCycleTime(Group: USHORT, Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProductInfo(dwOSMajorVersion: DWORD, dwOSMinorVersion: DWORD, dwSpMajorVersion: DWORD, dwSpMinorVersion: DWORD, pdwReturnedProductType: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT) UINT;
pub extern "kernel32" stdcallcc fn GetProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT) UINT;
pub extern "kernel32" stdcallcc fn GetProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetQueuedCompletionStatus(CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: ?*LPOVERLAPPED, dwMilliseconds: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetQueuedCompletionStatusEx(CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: ULONG, ulNumEntriesRemoved: PULONG, dwMilliseconds: DWORD, fAlertable: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetShortPathNameA(lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetShortPathNameW(lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetStartupInfoA(lpStartupInfo: LPSTARTUPINFOA) void;
pub extern "kernel32" stdcallcc fn GetStartupInfoW(lpStartupInfo: LPSTARTUPINFOW) void;
pub extern "kernel32" stdcallcc fn GetStdHandle(nStdHandle: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn GetStringScripts(dwFlags: DWORD, lpString: LPCWSTR, cchString: c_int, lpScripts: LPWSTR, cchScripts: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetStringTypeA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpCharType: LPWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetStringTypeExA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpCharType: LPWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetStringTypeExW(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpCharType: LPWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetStringTypeW(dwInfoType: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpCharType: LPWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemCpuSetInformation(Information: PSYSTEM_CPU_SET_INFORMATION, BufferLength: ULONG, ReturnedLength: PULONG, Process: HANDLE, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemDEPPolicy() DEP_SYSTEM_POLICY_TYPE;
pub extern "kernel32" stdcallcc fn GetSystemDefaultLCID() LCID;
pub extern "kernel32" stdcallcc fn GetSystemDefaultLangID() LANGID;
pub extern "kernel32" stdcallcc fn GetSystemDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetSystemDefaultUILanguage() LANGID;
pub extern "kernel32" stdcallcc fn GetSystemDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetSystemFileCacheSize(lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemFirmwareTable(FirmwareTableProviderSignature: DWORD, FirmwareTableID: DWORD, pFirmwareTableBuffer: PVOID, BufferSize: DWORD) UINT;
pub extern "kernel32" stdcallcc fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO) void;
pub extern "kernel32" stdcallcc fn GetSystemPowerStatus(lpSystemPowerStatus: LPSYSTEM_POWER_STATUS) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemRegistryQuota(pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemTime(lpSystemTime: LPSYSTEMTIME) void;
pub extern "kernel32" stdcallcc fn GetSystemTimeAdjustment(lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME) void;
pub extern "kernel32" stdcallcc fn GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: LPFILETIME) void;
pub extern "kernel32" stdcallcc fn GetSystemTimes(lpIdleTime: PFILETIME, lpKernelTime: PFILETIME, lpUserTime: PFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn GetSystemWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetSystemWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetSystemWow64DirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetSystemWow64DirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetTapeParameters(hDevice: HANDLE, dwOperation: DWORD, lpdwSize: LPDWORD, lpTapeInformation: LPVOID) DWORD;
pub extern "kernel32" stdcallcc fn GetTapePosition(hDevice: HANDLE, dwPositionType: DWORD, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD) DWORD;
pub extern "kernel32" stdcallcc fn GetTapeStatus(hDevice: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetTempFileNameA(lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: UINT, lpTempFileName: LPSTR) UINT;
pub extern "kernel32" stdcallcc fn GetTempFileNameW(lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: UINT, lpTempFileName: LPWSTR) UINT;
pub extern "kernel32" stdcallcc fn GetTempPathA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetTempPathW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn GetThreadContext(hThread: HANDLE, lpContext: LPCONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadDescription(hThread: HANDLE, ppszThreadDescription: ?*PWSTR) HRESULT;
pub extern "kernel32" stdcallcc fn GetThreadErrorMode() DWORD;
pub extern "kernel32" stdcallcc fn GetThreadGroupAffinity(hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadIOPendingFlag(hThread: HANDLE, lpIOIsPending: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadId(Thread: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn GetThreadIdealProcessorEx(hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadInformation(hThread: HANDLE, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: LPVOID, ThreadInformationSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadLocale() LCID;
pub extern "kernel32" stdcallcc fn GetThreadPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadPriority(hThread: HANDLE) c_int;
pub extern "kernel32" stdcallcc fn GetThreadPriorityBoost(hThread: HANDLE, pDisablePriorityBoost: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadSelectedCpuSets(Thread: HANDLE, CpuSetIds: PULONG, CpuSetIdCount: ULONG, RequiredIdCount: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadSelectorEntry(hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadTimes(hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn GetThreadUILanguage() LANGID;
pub extern "kernel32" stdcallcc fn GetTickCount() DWORD;
pub extern "kernel32" stdcallcc fn GetTickCount64() ULONGLONG;
pub extern "kernel32" stdcallcc fn GetTimeFormatA(Locale: LCID, dwFlags: DWORD, lpTime: ?*const SYSTEMTIME, lpFormat: LPCSTR, lpTimeStr: LPSTR, cchTime: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetTimeFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpTime: ?*const SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetTimeFormatW(Locale: LCID, dwFlags: DWORD, lpTime: ?*const SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetTimeZoneInformation(lpTimeZoneInformation: LPTIME_ZONE_INFORMATION) DWORD;
pub extern "kernel32" stdcallcc fn GetTimeZoneInformationForYear(wYear: USHORT, pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION, ptzi: LPTIME_ZONE_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn GetUILanguageInfo(dwFlags: DWORD, pwmszLanguage: PCZZWSTR, pwszFallbackLanguages: PZZWSTR, pcchFallbackLanguages: PDWORD, pAttributes: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetUmsCompletionListEvent(UmsCompletionList: PUMS_COMPLETION_LIST, UmsCompletionEvent: PHANDLE) BOOL;
pub extern "kernel32" stdcallcc fn GetUmsSystemThreadInformation(ThreadHandle: HANDLE, SystemThreadInfo: PUMS_SYSTEM_THREAD_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn GetUserDefaultLCID() LCID;
pub extern "kernel32" stdcallcc fn GetUserDefaultLangID() LANGID;
pub extern "kernel32" stdcallcc fn GetUserDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
pub extern "kernel32" stdcallcc fn GetUserDefaultUILanguage() LANGID;
pub extern "kernel32" stdcallcc fn GetUserGeoID(GeoClass: GEOCLASS) GEOID;
pub extern "kernel32" stdcallcc fn GetUserPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn GetVersion() DWORD;
pub extern "kernel32" stdcallcc fn GetVersionExA(lpVersionInformation: LPOSVERSIONINFOA) BOOL;
pub extern "kernel32" stdcallcc fn GetVersionExW(lpVersionInformation: LPOSVERSIONINFOW) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumeInformationA(lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumeInformationByHandleW(hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumeInformationW(lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumePathNameA(lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumePathNameW(lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumePathNamesForVolumeNameA(lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetVolumePathNamesForVolumeNameW(lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn GetWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
pub extern "kernel32" stdcallcc fn GetWriteWatch(dwFlags: DWORD, lpBaseAddress: PVOID, dwRegionSize: SIZE_T, lpAddresses: ?*PVOID, lpdwCount: ?*ULONG_PTR, lpdwGranularity: LPDWORD) UINT;
pub extern "kernel32" stdcallcc fn GetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: PDWORD64) BOOL;
pub extern "kernel32" stdcallcc fn GlobalAddAtomA(lpString: LPCSTR) ATOM;
pub extern "kernel32" stdcallcc fn GlobalAddAtomExA(lpString: LPCSTR, Flags: DWORD) ATOM;
pub extern "kernel32" stdcallcc fn GlobalAddAtomExW(lpString: LPCWSTR, Flags: DWORD) ATOM;
pub extern "kernel32" stdcallcc fn GlobalAddAtomW(lpString: LPCWSTR) ATOM;
pub extern "kernel32" stdcallcc fn GlobalAlloc(uFlags: UINT, dwBytes: SIZE_T) HGLOBAL;
pub extern "kernel32" stdcallcc fn GlobalCompact(dwMinFree: DWORD) SIZE_T;
pub extern "kernel32" stdcallcc fn GlobalDeleteAtom(nAtom: ATOM) ATOM;
pub extern "kernel32" stdcallcc fn GlobalFindAtomA(lpString: LPCSTR) ATOM;
pub extern "kernel32" stdcallcc fn GlobalFindAtomW(lpString: LPCWSTR) ATOM;
pub extern "kernel32" stdcallcc fn GlobalFix(hMem: HGLOBAL) void;
pub extern "kernel32" stdcallcc fn GlobalFlags(hMem: HGLOBAL) UINT;
pub extern "kernel32" stdcallcc fn GlobalFree(hMem: HGLOBAL) HGLOBAL;
pub extern "kernel32" stdcallcc fn GlobalGetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: c_int) UINT;
pub extern "kernel32" stdcallcc fn GlobalGetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: c_int) UINT;
pub extern "kernel32" stdcallcc fn GlobalHandle(pMem: LPCVOID) HGLOBAL;
pub extern "kernel32" stdcallcc fn GlobalLock(hMem: HGLOBAL) LPVOID;
pub extern "kernel32" stdcallcc fn GlobalMemoryStatus(lpBuffer: LPMEMORYSTATUS) void;
pub extern "kernel32" stdcallcc fn GlobalMemoryStatusEx(lpBuffer: LPMEMORYSTATUSEX) BOOL;
pub extern "kernel32" stdcallcc fn GlobalReAlloc(hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT) HGLOBAL;
pub extern "kernel32" stdcallcc fn GlobalSize(hMem: HGLOBAL) SIZE_T;
pub extern "kernel32" stdcallcc fn GlobalUnWire(hMem: HGLOBAL) BOOL;
pub extern "kernel32" stdcallcc fn GlobalUnfix(hMem: HGLOBAL) void;
pub extern "kernel32" stdcallcc fn GlobalUnlock(hMem: HGLOBAL) BOOL;
pub extern "kernel32" stdcallcc fn GlobalWire(hMem: HGLOBAL) LPVOID;
pub extern "kernel32" stdcallcc fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) LPVOID;
pub extern "kernel32" stdcallcc fn HeapCompact(hHeap: HANDLE, dwFlags: DWORD) SIZE_T;
pub extern "kernel32" stdcallcc fn HeapCreate(flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T) HANDLE;
pub extern "kernel32" stdcallcc fn HeapDestroy(hHeap: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn HeapLock(hHeap: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn HeapQueryInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) LPVOID;
pub extern "kernel32" stdcallcc fn HeapSetInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn HeapSize(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) SIZE_T;
pub extern "kernel32" stdcallcc fn HeapSummary(hHeap: HANDLE, dwFlags: DWORD, lpSummary: LPHEAP_SUMMARY) BOOL;
pub extern "kernel32" stdcallcc fn HeapUnlock(hHeap: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn HeapValidate(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) BOOL;
pub extern "kernel32" stdcallcc fn HeapWalk(hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY) BOOL;
pub extern "kernel32" stdcallcc fn IdnToAscii(dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: c_int, lpASCIICharStr: LPWSTR, cchASCIIChar: c_int) c_int;
pub extern "kernel32" stdcallcc fn IdnToNameprepUnicode(dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: c_int, lpNameprepCharStr: LPWSTR, cchNameprepChar: c_int) c_int;
pub extern "kernel32" stdcallcc fn IdnToUnicode(dwFlags: DWORD, lpASCIICharStr: LPCWSTR, cchASCIIChar: c_int, lpUnicodeCharStr: LPWSTR, cchUnicodeChar: c_int) c_int;
pub extern "kernel32" stdcallcc fn InitAtomTable(nSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn InitOnceBeginInitialize(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: ?*LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn InitOnceComplete(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn InitOnceExecuteOnce(InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: ?*LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn InitOnceInitialize(InitOnce: PINIT_ONCE) void;
pub extern "kernel32" stdcallcc fn InitializeConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
pub extern "kernel32" stdcallcc fn InitializeContext(Buffer: PVOID, ContextFlags: DWORD, Context: ?*PCONTEXT, ContextLength: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn InitializeCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
pub extern "kernel32" stdcallcc fn InitializeCriticalSectionAndSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn InitializeCriticalSectionEx(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn InitializeEnclave(hProcess: HANDLE, lpAddress: LPVOID, lpEnclaveInformation: LPCVOID, dwInfoLength: DWORD, lpEnclaveError: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn InitializeProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: DWORD, dwFlags: DWORD, lpSize: PSIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn InitializeSListHead(ListHead: PSLIST_HEADER) void;
pub extern "kernel32" stdcallcc fn InitializeSRWLock(SRWLock: PSRWLOCK) void;
pub extern "kernel32" stdcallcc fn InitializeSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, lTotalThreads: LONG, lSpinCount: LONG) BOOL;
pub extern "kernel32" stdcallcc fn InstallELAMCertificateInfo(ELAMFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn InterlockedFlushSList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn InterlockedPopEntrySList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn InterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn InterlockedPushListSListEx(ListHead: PSLIST_HEADER, List: PSLIST_ENTRY, ListEnd: PSLIST_ENTRY, Count: ULONG) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn IsBadHugeReadPtr(lp: ?*const c_void, ucb: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsBadHugeWritePtr(lp: LPVOID, ucb: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsBadReadPtr(lp: ?*const c_void, ucb: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsBadStringPtrA(lpsz: LPCSTR, ucchMax: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsBadStringPtrW(lpsz: LPCWSTR, ucchMax: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsBadWritePtr(lp: LPVOID, ucb: UINT_PTR) BOOL;
pub extern "kernel32" stdcallcc fn IsDBCSLeadByte(TestChar: BYTE) BOOL;
pub extern "kernel32" stdcallcc fn IsDBCSLeadByteEx(CodePage: UINT, TestChar: BYTE) BOOL;
pub extern "kernel32" stdcallcc fn IsDebuggerPresent() BOOL;
pub extern "kernel32" stdcallcc fn IsEnclaveTypeSupported(flEnclaveType: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn IsNLSDefinedString(Function: NLS_FUNCTION, dwFlags: DWORD, lpVersionInformation: LPNLSVERSIONINFO, lpString: LPCWSTR, cchStr: INT) BOOL;
pub extern "kernel32" stdcallcc fn IsNativeVhdBoot(NativeVhdBoot: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn IsNormalizedString(NormForm: NORM_FORM, lpString: LPCWSTR, cwLength: c_int) BOOL;
pub extern "kernel32" stdcallcc fn IsProcessCritical(hProcess: HANDLE, Critical: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn IsProcessInJob(ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn IsProcessorFeaturePresent(ProcessorFeature: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn IsSystemResumeAutomatic() BOOL;
pub extern "kernel32" stdcallcc fn IsThreadAFiber() BOOL;
pub extern "kernel32" stdcallcc fn IsThreadpoolTimerSet(pti: PTP_TIMER) BOOL;
pub extern "kernel32" stdcallcc fn IsValidCodePage(CodePage: UINT) BOOL;
pub extern "kernel32" stdcallcc fn IsValidLanguageGroup(LanguageGroup: LGRPID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn IsValidLocale(Locale: LCID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn IsValidLocaleName(lpLocaleName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn IsValidNLSVersion(function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX) DWORD;
pub extern "kernel32" stdcallcc fn IsWow64Process(hProcess: HANDLE, Wow64Process: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn LCIDToLocaleName(Locale: LCID, lpName: LPWSTR, cchName: c_int, dwFlags: DWORD) c_int;
pub extern "kernel32" stdcallcc fn LCMapStringA(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpDestStr: LPSTR, cchDest: c_int) c_int;
pub extern "kernel32" stdcallcc fn LCMapStringEx(lpLocaleName: LPCWSTR, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: LPARAM) c_int;
pub extern "kernel32" stdcallcc fn LCMapStringW(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int) c_int;
pub extern "kernel32" stdcallcc fn LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
pub extern "kernel32" stdcallcc fn LeaveCriticalSectionWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION) void;
pub extern "kernel32" stdcallcc fn LoadEnclaveData(hProcess: HANDLE, lpAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, flProtect: DWORD, lpPageInformation: LPCVOID, dwInfoLength: DWORD, lpNumberOfBytesWritten: PSIZE_T, lpEnclaveError: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn LoadLibraryA(lpLibFileName: LPCSTR) HMODULE;
pub extern "kernel32" stdcallcc fn LoadLibraryExA(lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD) HMODULE;
pub extern "kernel32" stdcallcc fn LoadLibraryExW(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD) HMODULE;
pub extern "kernel32" stdcallcc fn LoadLibraryW(lpLibFileName: LPCWSTR) HMODULE;
pub extern "kernel32" stdcallcc fn LoadModule(lpModuleName: LPCSTR, lpParameterBlock: LPVOID) DWORD;
pub extern "kernel32" stdcallcc fn LoadPackagedLibrary(lpwLibFileName: LPCWSTR, Reserved: DWORD) HMODULE;
pub extern "kernel32" stdcallcc fn LoadResource(hModule: HMODULE, hResInfo: HRSRC) HGLOBAL;
pub extern "kernel32" stdcallcc fn LocalAlloc(uFlags: UINT, uBytes: SIZE_T) HLOCAL;
pub extern "kernel32" stdcallcc fn LocalCompact(uMinFree: UINT) SIZE_T;
pub extern "kernel32" stdcallcc fn LocalFileTimeToFileTime(lpLocalFileTime: ?*const FILETIME, lpFileTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn LocalFlags(hMem: HLOCAL) UINT;
pub extern "kernel32" stdcallcc fn LocalFree(hMem: HLOCAL) HLOCAL;
pub extern "kernel32" stdcallcc fn LocalHandle(pMem: LPCVOID) HLOCAL;
pub extern "kernel32" stdcallcc fn LocalLock(hMem: HLOCAL) LPVOID;
pub extern "kernel32" stdcallcc fn LocalReAlloc(hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT) HLOCAL;
pub extern "kernel32" stdcallcc fn LocalShrink(hMem: HLOCAL, cbNewSize: UINT) SIZE_T;
pub extern "kernel32" stdcallcc fn LocalSize(hMem: HLOCAL) SIZE_T;
pub extern "kernel32" stdcallcc fn LocalUnlock(hMem: HLOCAL) BOOL;
pub extern "kernel32" stdcallcc fn LocaleNameToLCID(lpName: LPCWSTR, dwFlags: DWORD) LCID;
pub extern "kernel32" stdcallcc fn LocateXStateFeature(Context: PCONTEXT, FeatureId: DWORD, Length: PDWORD) PVOID;
pub extern "kernel32" stdcallcc fn LockFile(hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn LockFileEx(hFile: HANDLE, dwFlags: DWORD, dwReserved: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn LockResource(hResData: HGLOBAL) LPVOID;
pub extern "kernel32" stdcallcc fn MapUserPhysicalPages(VirtualAddress: PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn MapUserPhysicalPagesScatter(VirtualAddresses: ?*PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn MapViewOfFile(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T) LPVOID;
pub extern "kernel32" stdcallcc fn MapViewOfFileEx(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID) LPVOID;
pub extern "kernel32" stdcallcc fn MapViewOfFileExNuma(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID, nndPreferred: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn MapViewOfFileFromApp(hFileMappingObject: HANDLE, DesiredAccess: ULONG, FileOffset: ULONG64, NumberOfBytesToMap: SIZE_T) PVOID;
pub extern "kernel32" stdcallcc fn MoveFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileWithProgressA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn MoveFileWithProgressW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn MulDiv(nNumber: c_int, nNumerator: c_int, nDenominator: c_int) c_int;
pub extern "kernel32" stdcallcc fn MultiByteToWideChar(CodePage: UINT, dwFlags: DWORD, lpMultiByteStr: LPCCH, cbMultiByte: c_int, lpWideCharStr: LPWSTR, cchWideChar: c_int) c_int;
pub extern "kernel32" stdcallcc fn NeedCurrentDirectoryForExePathA(ExeName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn NeedCurrentDirectoryForExePathW(ExeName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn NormalizeString(NormForm: NORM_FORM, lpSrcString: LPCWSTR, cwSrcLength: c_int, lpDstString: LPWSTR, cwDstLength: c_int) c_int;
pub extern "kernel32" stdcallcc fn NotifyUILanguageChange(dwFlags: DWORD, pcwstrNewLanguage: PCWSTR, pcwstrPreviousLanguage: PCWSTR, dwReserved: DWORD, pdwStatusRtrn: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn OfferVirtualMemory(VirtualAddress: PVOID, Size: SIZE_T, Priority: OFFER_PRIORITY) DWORD;
pub extern "kernel32" stdcallcc fn OpenEventA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenEventW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenFile(lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT) HFILE;
pub extern "kernel32" stdcallcc fn OpenFileById(hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn OpenFileMappingA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenFileMappingW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenJobObjectA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenJobObjectW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenMutexA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenMutexW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenPrivateNamespaceA(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenPrivateNamespaceW(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenProcess(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn OpenProcessToken(ProcessHandle: HANDLE, DesiredAccess: DWORD, TokenHandle: PHANDLE) BOOL;
pub extern "kernel32" stdcallcc fn OpenSemaphoreA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenSemaphoreW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenThread(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn OpenThreadToken(ThreadHandle: HANDLE, DesiredAccess: DWORD, OpenAsSelf: BOOL, TokenHandle: PHANDLE) BOOL;
pub extern "kernel32" stdcallcc fn OpenWaitableTimerA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OpenWaitableTimerW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR) HANDLE;
pub extern "kernel32" stdcallcc fn OperationStart(OperationStartParams: ?*OPERATION_START_PARAMETERS) BOOL;
pub extern "kernel32" stdcallcc fn OutputDebugStringA(lpOutputString: LPCSTR) void;
pub extern "kernel32" stdcallcc fn OutputDebugStringW(lpOutputString: LPCWSTR) void;
pub extern "kernel32" stdcallcc fn PeekConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn PeekConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn PeekNamedPipe(hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: DWORD, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn PostQueuedCompletionStatus(CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn PowerClearRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) BOOL;
pub extern "kernel32" stdcallcc fn PowerCreateRequest(Context: PREASON_CONTEXT) HANDLE;
pub extern "kernel32" stdcallcc fn PowerSetRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) BOOL;
pub extern "kernel32" stdcallcc fn PrefetchVirtualMemory(hProcess: HANDLE, NumberOfEntries: ULONG_PTR, VirtualAddresses: PWIN32_MEMORY_RANGE_ENTRY, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn PrepareTape(hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn ProcessIdToSessionId(dwProcessId: DWORD, pSessionId: ?*DWORD) BOOL;
pub extern "kernel32" stdcallcc fn PulseEvent(hEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn PurgeComm(hFile: HANDLE, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn QueryActCtxSettingsW(dwFlags: DWORD, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: SIZE_T, pdwWrittenOrRequired: ?*SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn QueryActCtxW(dwFlags: DWORD, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: ULONG, pvBuffer: PVOID, cbBuffer: SIZE_T, pcbWrittenOrRequired: ?*SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn QueryDepthSList(ListHead: PSLIST_HEADER) USHORT;
pub extern "kernel32" stdcallcc fn QueryDosDeviceA(lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn QueryDosDeviceW(lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn QueryFullProcessImageNameA(hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPSTR, lpdwSize: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn QueryFullProcessImageNameW(hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPWSTR, lpdwSize: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn QueryIdleProcessorCycleTime(BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64) BOOL;
pub extern "kernel32" stdcallcc fn QueryIdleProcessorCycleTimeEx(Group: USHORT, BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64) BOOL;
pub extern "kernel32" stdcallcc fn QueryInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn QueryIoRateControlInformationJobObject(hJob: HANDLE, VolumeName: PCWSTR, InfoBlocks: ?*(?*JOBOBJECT_IO_RATE_CONTROL_INFORMATION), InfoBlockCount: ?*ULONG) DWORD;
pub extern "kernel32" stdcallcc fn QueryMemoryResourceNotification(ResourceNotificationHandle: HANDLE, ResourceState: PBOOL) BOOL;
pub extern "kernel32" stdcallcc fn QueryPerformanceCounter(lpPerformanceCount: ?*LARGE_INTEGER) BOOL;
pub extern "kernel32" stdcallcc fn QueryPerformanceFrequency(lpFrequency: ?*LARGE_INTEGER) BOOL;
pub extern "kernel32" stdcallcc fn QueryProcessAffinityUpdateMode(hProcess: HANDLE, lpdwFlags: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn QueryProcessCycleTime(ProcessHandle: HANDLE, CycleTime: PULONG64) BOOL;
pub extern "kernel32" stdcallcc fn QueryProtectedPolicy(PolicyGuid: LPCGUID, PolicyValue: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn QueryThreadCycleTime(ThreadHandle: HANDLE, CycleTime: PULONG64) BOOL;
pub extern "kernel32" stdcallcc fn QueryThreadProfiling(ThreadHandle: HANDLE, Enabled: PBOOLEAN) DWORD;
pub extern "kernel32" stdcallcc fn QueryThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn QueryUmsThreadInformation(UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG, ReturnLength: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn QueryUnbiasedInterruptTime(UnbiasedTime: PULONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn QueueUserAPC(pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR) DWORD;
pub extern "kernel32" stdcallcc fn QueueUserWorkItem(Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn RaiseException(dwExceptionCode: DWORD, dwExceptionFlags: DWORD, nNumberOfArguments: DWORD, lpArguments: ?*const ULONG_PTR) void;
pub extern "kernel32" stdcallcc fn RaiseFailFastException(pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: DWORD) void;
pub extern "kernel32" stdcallcc fn ReOpenFile(hOriginalFile: HANDLE, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD) HANDLE;
pub extern "kernel32" stdcallcc fn ReadConsoleA(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: LPWORD, nLength: DWORD, dwReadCoord: COORD, lpNumberOfAttrsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPWSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT) BOOL;
pub extern "kernel32" stdcallcc fn ReadConsoleW(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL) BOOL;
pub extern "kernel32" stdcallcc fn ReadDirectoryChangesW(hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
pub extern "kernel32" stdcallcc fn ReadFile(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn ReadFileEx(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
pub extern "kernel32" stdcallcc fn ReadFileScatter(hFile: HANDLE, aSegmentArray: ?*FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn ReadProcessMemory(hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: SIZE_T, lpNumberOfBytesRead: ?*SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn ReadThreadProfilingData(PerformanceDataHandle: HANDLE, Flags: DWORD, PerformanceData: PPERFORMANCE_DATA) DWORD;
pub extern "kernel32" stdcallcc fn ReclaimVirtualMemory(VirtualAddress: ?*const c_void, Size: SIZE_T) DWORD;
pub extern "kernel32" stdcallcc fn RegisterApplicationRecoveryCallback(pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: DWORD, dwFlags: DWORD) HRESULT;
pub extern "kernel32" stdcallcc fn RegisterApplicationRestart(pwzCommandline: PCWSTR, dwFlags: DWORD) HRESULT;
pub extern "kernel32" stdcallcc fn RegisterBadMemoryNotification(Callback: PBAD_MEMORY_CALLBACK_ROUTINE) PVOID;
pub extern "kernel32" stdcallcc fn RegisterWaitForSingleObject(phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn ReleaseActCtx(hActCtx: HANDLE) void;
pub extern "kernel32" stdcallcc fn ReleaseMutex(hMutex: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn ReleaseMutexWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mut: HANDLE) void;
pub extern "kernel32" stdcallcc fn ReleaseSRWLockExclusive(SRWLock: PSRWLOCK) void;
pub extern "kernel32" stdcallcc fn ReleaseSRWLockShared(SRWLock: PSRWLOCK) void;
pub extern "kernel32" stdcallcc fn ReleaseSemaphore(hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG) BOOL;
pub extern "kernel32" stdcallcc fn ReleaseSemaphoreWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: DWORD) void;
pub extern "kernel32" stdcallcc fn RemoveDirectoryA(lpPathName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn RemoveDirectoryTransactedA(lpPathName: LPCSTR, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn RemoveDirectoryTransactedW(lpPathName: LPCWSTR, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn RemoveDirectoryW(lpPathName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn RemoveDllDirectory(Cookie: DLL_DIRECTORY_COOKIE) BOOL;
pub extern "kernel32" stdcallcc fn RemoveSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) BOOL;
pub extern "kernel32" stdcallcc fn RemoveVectoredContinueHandler(Handle: PVOID) ULONG;
pub extern "kernel32" stdcallcc fn RemoveVectoredExceptionHandler(Handle: PVOID) ULONG;
pub extern "kernel32" stdcallcc fn ReplaceFileA(lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn ReplaceFileW(lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn ReplacePartitionUnit(TargetPartition: PWSTR, SparePartition: PWSTR, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn RequestDeviceWakeup(hDevice: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn RequestWakeupLatency(latency: LATENCY_TIME) BOOL;
pub extern "kernel32" stdcallcc fn ResetEvent(hEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn ResetWriteWatch(lpBaseAddress: LPVOID, dwRegionSize: SIZE_T) UINT;
pub extern "kernel32" stdcallcc fn ResolveLocaleName(lpNameToResolve: LPCWSTR, lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
pub extern "kernel32" stdcallcc fn ResumeThread(hThread: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn RtlAddFunctionTable(FunctionTable: PRUNTIME_FUNCTION, EntryCount: DWORD, BaseAddress: DWORD64) BOOLEAN;
pub extern "kernel32" stdcallcc fn RtlCaptureContext(ContextRecord: PCONTEXT) void;
pub extern "kernel32" stdcallcc fn RtlCaptureStackBackTrace(FramesToSkip: DWORD, FramesToCapture: DWORD, BackTrace: ?*PVOID, BackTraceHash: PDWORD) WORD;
pub extern "kernel32" stdcallcc fn RtlCompareMemory(Source1: ?*const c_void, Source2: ?*const c_void, Length: SIZE_T) SIZE_T;
pub extern "kernel32" stdcallcc fn RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION) BOOLEAN;
pub extern "kernel32" stdcallcc fn RtlInitializeSListHead(ListHead: PSLIST_HEADER) void;
pub extern "kernel32" stdcallcc fn RtlInstallFunctionTableCallback(TableIdentifier: DWORD64, BaseAddress: DWORD64, Length: DWORD, Callback: PGET_RUNTIME_FUNCTION_CALLBACK, Context: PVOID, OutOfProcessCallbackDll: PCWSTR) BOOLEAN;
pub extern "kernel32" stdcallcc fn RtlInterlockedFlushSList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn RtlInterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn RtlInterlockedPushListSListEx(ListHead: PSLIST_HEADER, List: PSLIST_ENTRY, ListEnd: PSLIST_ENTRY, Count: DWORD) PSLIST_ENTRY;
pub extern "kernel32" stdcallcc fn RtlLookupFunctionEntry(ControlPc: DWORD64, ImageBase: PDWORD64, HistoryTable: PUNWIND_HISTORY_TABLE) PRUNTIME_FUNCTION;
pub extern "kernel32" stdcallcc fn RtlPcToFileHeader(PcValue: PVOID, BaseOfImage: ?*PVOID) PVOID;
pub extern "kernel32" stdcallcc fn RtlQueryDepthSList(ListHead: PSLIST_HEADER) WORD;
pub extern "kernel32" stdcallcc fn RtlRestoreContext(ContextRecord: PCONTEXT, ExceptionRecord: ?*struct__EXCEPTION_RECORD) void;
pub extern "kernel32" stdcallcc fn RtlUnwind(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID) void;
pub extern "kernel32" stdcallcc fn RtlUnwindEx(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID, ContextRecord: PCONTEXT, HistoryTable: PUNWIND_HISTORY_TABLE) void;
pub extern "kernel32" stdcallcc fn RtlVirtualUnwind(HandlerType: DWORD, ImageBase: DWORD64, ControlPc: DWORD64, FunctionEntry: PRUNTIME_FUNCTION, ContextRecord: PCONTEXT, HandlerData: ?*PVOID, EstablisherFrame: PDWORD64, ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS) PEXCEPTION_ROUTINE;
pub extern "kernel32" stdcallcc fn ScrollConsoleScreenBufferA(hConsoleOutput: HANDLE, lpScrollRectangle: ?*const SMALL_RECT, lpClipRectangle: ?*const SMALL_RECT, dwDestinationOrigin: COORD, lpFill: ?*const CHAR_INFO) BOOL;
pub extern "kernel32" stdcallcc fn ScrollConsoleScreenBufferW(hConsoleOutput: HANDLE, lpScrollRectangle: ?*const SMALL_RECT, lpClipRectangle: ?*const SMALL_RECT, dwDestinationOrigin: COORD, lpFill: ?*const CHAR_INFO) BOOL;
pub extern "kernel32" stdcallcc fn SearchPathA(lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: ?*LPSTR) DWORD;
pub extern "kernel32" stdcallcc fn SearchPathW(lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: ?*LPWSTR) DWORD;
pub extern "kernel32" stdcallcc fn SetCachedSigningLevel(SourceFiles: PHANDLE, SourceFileCount: ULONG, Flags: ULONG, TargetFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetCommBreak(hFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetCommMask(hFile: HANDLE, dwEvtMask: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetCommState(hFile: HANDLE, lpDCB: LPDCB) BOOL;
pub extern "kernel32" stdcallcc fn SetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
pub extern "kernel32" stdcallcc fn SetComputerNameA(lpComputerName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetComputerNameEx2W(NameType: COMPUTER_NAME_FORMAT, Flags: DWORD, lpBuffer: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetComputerNameW(lpComputerName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleCP(wCodePageID: UINT) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleCtrlHandler(HandlerRoutine: PHANDLER_ROUTINE, Add: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: ?*const CONSOLE_CURSOR_INFO) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleCursorPosition(hConsoleOutput: HANDLE, dwCursorPosition: COORD) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleDisplayMode(hConsoleOutput: HANDLE, dwFlags: DWORD, lpNewScreenBufferDimensions: PCOORD) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleMode(hConsoleHandle: HANDLE, dwMode: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleOutputCP(wCodePageID: UINT) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleScreenBufferSize(hConsoleOutput: HANDLE, dwSize: COORD) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: WORD) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleTitleA(lpConsoleTitle: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleTitleW(lpConsoleTitle: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetConsoleWindowInfo(hConsoleOutput: HANDLE, bAbsolute: BOOL, lpConsoleWindow: ?*const SMALL_RECT) BOOL;
pub extern "kernel32" stdcallcc fn SetCriticalSectionSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn SetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX) BOOL;
pub extern "kernel32" stdcallcc fn SetCurrentDirectoryA(lpPathName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetCurrentDirectoryW(lpPathName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetDefaultDllDirectories(DirectoryFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetDllDirectoryA(lpPathName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetDllDirectoryW(lpPathName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetDynamicTimeZoneInformation(lpTimeZoneInformation: ?*const DYNAMIC_TIME_ZONE_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn SetEndOfFile(hFile: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetEnvironmentStringsA(NewEnvironment: LPCH) BOOL;
pub extern "kernel32" stdcallcc fn SetEnvironmentStringsW(NewEnvironment: LPWCH) BOOL;
pub extern "kernel32" stdcallcc fn SetEnvironmentVariableA(lpName: LPCSTR, lpValue: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetEnvironmentVariableW(lpName: LPCWSTR, lpValue: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetErrorMode(uMode: UINT) UINT;
pub extern "kernel32" stdcallcc fn SetEvent(hEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetEventWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, evt: HANDLE) void;
pub extern "kernel32" stdcallcc fn SetFileApisToANSI() void;
pub extern "kernel32" stdcallcc fn SetFileApisToOEM() void;
pub extern "kernel32" stdcallcc fn SetFileAttributesA(lpFileName: LPCSTR, dwFileAttributes: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFileAttributesTransactedA(lpFileName: LPCSTR, dwFileAttributes: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetFileAttributesTransactedW(lpFileName: LPCWSTR, dwFileAttributes: DWORD, hTransaction: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFileBandwidthReservation(hFile: HANDLE, nPeriodMilliseconds: DWORD, nBytesPerPeriod: DWORD, bDiscardable: BOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFileCompletionNotificationModes(FileHandle: HANDLE, Flags: UCHAR) BOOL;
pub extern "kernel32" stdcallcc fn SetFileInformationByHandle(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFileIoOverlappedRange(FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetFilePointer(hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn SetFilePointerEx(hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFileShortNameA(hFile: HANDLE, lpShortName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetFileShortNameW(hFile: HANDLE, lpShortName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetFileTime(hFile: HANDLE, lpCreationTime: ?*const FILETIME, lpLastAccessTime: ?*const FILETIME, lpLastWriteTime: ?*const FILETIME) BOOL;
pub extern "kernel32" stdcallcc fn SetFileValidData(hFile: HANDLE, ValidDataLength: LONGLONG) BOOL;
pub extern "kernel32" stdcallcc fn SetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFirmwareEnvironmentVariableExA(lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD, dwAttributes: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFirmwareEnvironmentVariableExW(lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD, dwAttributes: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetHandleCount(uNumber: UINT) UINT;
pub extern "kernel32" stdcallcc fn SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetIoRateControlInformationJobObject(hJob: HANDLE, IoRateControlInfo: ?*JOBOBJECT_IO_RATE_CONTROL_INFORMATION) DWORD;
pub extern "kernel32" stdcallcc fn SetLastError(dwErrCode: DWORD) void;
pub extern "kernel32" stdcallcc fn SetLocalTime(lpSystemTime: ?*const SYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn SetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetMailslotInfo(hMailslot: HANDLE, lReadTimeout: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetMessageWaitingIndicator(hMsgIndicator: HANDLE, ulMsgCount: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetNamedPipeHandleState(hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetPriorityClass(hProcess: HANDLE, dwPriorityClass: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessAffinityMask(hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessAffinityUpdateMode(hProcess: HANDLE, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessDEPPolicy(dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessDefaultCpuSets(Process: HANDLE, CpuSetIds: ?*const ULONG, CpuSetIdCount: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessInformation(hProcess: HANDLE, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: LPVOID, ProcessInformationSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessMitigationPolicy(MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: PVOID, dwLength: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessPreferredUILanguages(dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessPriorityBoost(hProcess: HANDLE, bDisablePriorityBoost: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessShutdownParameters(dwLevel: DWORD, dwFlags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessWorkingSetSize(hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn SetProcessWorkingSetSizeEx(hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T, Flags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetProtectedPolicy(PolicyGuid: LPCGUID, PolicyValue: ULONG_PTR, OldPolicyValue: PULONG_PTR) BOOL;
pub extern "kernel32" stdcallcc fn SetSearchPathMode(Flags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetStdHandle(nStdHandle: DWORD, hHandle: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetStdHandleEx(nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetSystemFileCacheSize(MinimumFileCacheSize: SIZE_T, MaximumFileCacheSize: SIZE_T, Flags: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetSystemPowerState(fSuspend: BOOL, fForce: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetSystemTime(lpSystemTime: ?*const SYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn SetSystemTimeAdjustment(dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetTapeParameters(hDevice: HANDLE, dwOperation: DWORD, lpTapeInformation: LPVOID) DWORD;
pub extern "kernel32" stdcallcc fn SetTapePosition(hDevice: HANDLE, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn SetThreadAffinityMask(hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR) DWORD_PTR;
pub extern "kernel32" stdcallcc fn SetThreadContext(hThread: HANDLE, lpContext: ?*const CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadDescription(hThread: HANDLE, lpThreadDescription: PCWSTR) HRESULT;
pub extern "kernel32" stdcallcc fn SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadExecutionState(esFlags: EXECUTION_STATE) EXECUTION_STATE;
pub extern "kernel32" stdcallcc fn SetThreadGroupAffinity(hThread: HANDLE, GroupAffinity: ?*const GROUP_AFFINITY, PreviousGroupAffinity: PGROUP_AFFINITY) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadIdealProcessor(hThread: HANDLE, dwIdealProcessor: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn SetThreadIdealProcessorEx(hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER, lpPreviousIdealProcessor: PPROCESSOR_NUMBER) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadInformation(hThread: HANDLE, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: LPVOID, ThreadInformationSize: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadLocale(Locale: LCID) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadPreferredUILanguages(dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadPriority(hThread: HANDLE, nPriority: c_int) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadPriorityBoost(hThread: HANDLE, bDisablePriorityBoost: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadSelectedCpuSets(Thread: HANDLE, CpuSetIds: ?*const ULONG, CpuSetIdCount: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadStackGuarantee(StackSizeInBytes: PULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadToken(Thread: PHANDLE, Token: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadUILanguage(LangId: LANGID) LANGID;
pub extern "kernel32" stdcallcc fn SetThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadpoolThreadMaximum(ptpp: PTP_POOL, cthrdMost: DWORD) void;
pub extern "kernel32" stdcallcc fn SetThreadpoolThreadMinimum(ptpp: PTP_POOL, cthrdMic: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadpoolTimer(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD) void;
pub extern "kernel32" stdcallcc fn SetThreadpoolTimerEx(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SetThreadpoolWait(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME) void;
pub extern "kernel32" stdcallcc fn SetThreadpoolWaitEx(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME, Reserved: PVOID) BOOL;
pub extern "kernel32" stdcallcc fn SetTimeZoneInformation(lpTimeZoneInformation: ?*const TIME_ZONE_INFORMATION) BOOL;
pub extern "kernel32" stdcallcc fn SetTimerQueueTimer(TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, PreferIo: BOOL) HANDLE;
pub extern "kernel32" stdcallcc fn SetUmsThreadInformation(UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER) LPTOP_LEVEL_EXCEPTION_FILTER;
pub extern "kernel32" stdcallcc fn SetUserGeoID(GeoId: GEOID) BOOL;
pub extern "kernel32" stdcallcc fn SetVolumeLabelA(lpRootPathName: LPCSTR, lpVolumeName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetVolumeLabelW(lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn SetWaitableTimer(hTimer: HANDLE, lpDueTime: ?*const LARGE_INTEGER, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL) BOOL;
pub extern "kernel32" stdcallcc fn SetWaitableTimerEx(hTimer: HANDLE, lpDueTime: ?*const LARGE_INTEGER, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: DWORD64) BOOL;
pub extern "kernel32" stdcallcc fn SetupComm(hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SignalObjectAndWait(hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn SizeofResource(hModule: HMODULE, hResInfo: HRSRC) DWORD;
pub extern "kernel32" stdcallcc fn Sleep(dwMilliseconds: DWORD) void;
pub extern "kernel32" stdcallcc fn SleepConditionVariableCS(ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn SleepEx(dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn StartThreadpoolIo(pio: PTP_IO) void;
pub extern "kernel32" stdcallcc fn SubmitThreadpoolWork(pwk: PTP_WORK) void;
pub extern "kernel32" stdcallcc fn SuspendThread(hThread: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn SwitchToFiber(lpFiber: LPVOID) void;
pub extern "kernel32" stdcallcc fn SwitchToThread() BOOL;
pub extern "kernel32" stdcallcc fn SystemTimeToFileTime(lpSystemTime: ?*const SYSTEMTIME, lpFileTime: LPFILETIME) BOOL;
pub extern "kernel32" stdcallcc fn SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: ?*const TIME_ZONE_INFORMATION, lpUniversalTime: ?*const SYSTEMTIME, lpLocalTime: LPSYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn SystemTimeToTzSpecificLocalTimeEx(lpTimeZoneInformation: ?*const DYNAMIC_TIME_ZONE_INFORMATION, lpUniversalTime: ?*const SYSTEMTIME, lpLocalTime: LPSYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn TerminateJobObject(hJob: HANDLE, uExitCode: UINT) BOOL;
pub extern "kernel32" stdcallcc fn TerminateProcess(hProcess: HANDLE, uExitCode: UINT) BOOL;
pub extern "kernel32" stdcallcc fn TerminateThread(hThread: HANDLE, dwExitCode: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn TlsAlloc() DWORD;
pub extern "kernel32" stdcallcc fn TlsFree(dwTlsIndex: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn TlsGetValue(dwTlsIndex: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn TlsSetValue(dwTlsIndex: DWORD, lpTlsValue: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn TransactNamedPipe(hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn TransmitCommChar(hFile: HANDLE, cChar: u8) BOOL;
pub extern "kernel32" stdcallcc fn TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK) BOOLEAN;
pub extern "kernel32" stdcallcc fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) BOOLEAN;
pub extern "kernel32" stdcallcc fn TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) BOOL;
pub extern "kernel32" stdcallcc fn TrySubmitThreadpoolCallback(pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) BOOL;
pub extern "kernel32" stdcallcc fn TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation: ?*const TIME_ZONE_INFORMATION, lpLocalTime: ?*const SYSTEMTIME, lpUniversalTime: LPSYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn TzSpecificLocalTimeToSystemTimeEx(lpTimeZoneInformation: ?*const DYNAMIC_TIME_ZONE_INFORMATION, lpLocalTime: ?*const SYSTEMTIME, lpUniversalTime: LPSYSTEMTIME) BOOL;
pub extern "kernel32" stdcallcc fn UmsThreadYield(SchedulerParam: PVOID) BOOL;
pub extern "kernel32" stdcallcc fn UnhandledExceptionFilter(ExceptionInfo: ?*struct__EXCEPTION_POINTERS) LONG;
pub extern "kernel32" stdcallcc fn UnlockFile(hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn UnlockFileEx(hFile: HANDLE, dwReserved: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn UnmapViewOfFile(lpBaseAddress: LPCVOID) BOOL;
pub extern "kernel32" stdcallcc fn UnmapViewOfFileEx(BaseAddress: PVOID, UnmapFlags: ULONG) BOOL;
pub extern "kernel32" stdcallcc fn UnregisterApplicationRecoveryCallback() HRESULT;
pub extern "kernel32" stdcallcc fn UnregisterApplicationRestart() HRESULT;
pub extern "kernel32" stdcallcc fn UnregisterBadMemoryNotification(RegistrationHandle: PVOID) BOOL;
pub extern "kernel32" stdcallcc fn UnregisterWait(WaitHandle: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn UnregisterWaitEx(WaitHandle: HANDLE, CompletionEvent: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn UpdateProcThreadAttribute(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: DWORD, Attribute: DWORD_PTR, lpValue: PVOID, cbSize: SIZE_T, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn UpdateResourceA(hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn UpdateResourceW(hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn VerLanguageNameA(wLang: DWORD, szLang: LPSTR, cchLang: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn VerLanguageNameW(wLang: DWORD, szLang: LPWSTR, cchLang: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn VerSetConditionMask(ConditionMask: ULONGLONG, TypeMask: DWORD, Condition: BYTE) ULONGLONG;
pub extern "kernel32" stdcallcc fn VerifyScripts(dwFlags: DWORD, lpLocaleScripts: LPCWSTR, cchLocaleScripts: c_int, lpTestScripts: LPCWSTR, cchTestScripts: c_int) BOOL;
pub extern "kernel32" stdcallcc fn VerifyVersionInfoA(lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG) BOOL;
pub extern "kernel32" stdcallcc fn VerifyVersionInfoW(lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG) BOOL;
pub extern "kernel32" stdcallcc fn VirtualAlloc(lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn VirtualAllocEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn VirtualAllocExNuma(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD, nndPreferred: DWORD) LPVOID;
pub extern "kernel32" stdcallcc fn VirtualFree(lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn VirtualFreeEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn VirtualProtect(lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn VirtualProtectEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD) BOOL;
pub extern "kernel32" stdcallcc fn VirtualQuery(lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T) SIZE_T;
pub extern "kernel32" stdcallcc fn VirtualQueryEx(hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T) SIZE_T;
pub extern "kernel32" stdcallcc fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn WTSGetActiveConsoleSessionId() DWORD;
pub extern "kernel32" stdcallcc fn WaitCommEvent(hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn WaitForDebugEvent(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn WaitForDebugEventEx(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn WaitForMultipleObjects(nCount: DWORD, lpHandles: ?*const HANDLE, bWaitAll: BOOL, dwMilliseconds: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn WaitForMultipleObjectsEx(nCount: DWORD, lpHandles: ?*const HANDLE, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) DWORD;
pub extern "kernel32" stdcallcc fn WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn WaitForThreadpoolIoCallbacks(pio: PTP_IO, fCancelPendingCallbacks: BOOL) void;
pub extern "kernel32" stdcallcc fn WaitForThreadpoolTimerCallbacks(pti: PTP_TIMER, fCancelPendingCallbacks: BOOL) void;
pub extern "kernel32" stdcallcc fn WaitForThreadpoolWaitCallbacks(pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL) void;
pub extern "kernel32" stdcallcc fn WaitForThreadpoolWorkCallbacks(pwk: PTP_WORK, fCancelPendingCallbacks: BOOL) void;
pub extern "kernel32" stdcallcc fn WaitNamedPipeA(lpNamedPipeName: LPCSTR, nTimeOut: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn WaitNamedPipeW(lpNamedPipeName: LPCWSTR, nTimeOut: DWORD) BOOL;
pub extern "kernel32" stdcallcc fn WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
pub extern "kernel32" stdcallcc fn WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
pub extern "kernel32" stdcallcc fn WideCharToMultiByte(CodePage: UINT, dwFlags: DWORD, lpWideCharStr: LPCWCH, cchWideChar: c_int, lpMultiByteStr: LPSTR, cbMultiByte: c_int, lpDefaultChar: LPCCH, lpUsedDefaultChar: LPBOOL) c_int;
pub extern "kernel32" stdcallcc fn WinExec(lpCmdLine: LPCSTR, uCmdShow: UINT) UINT;
pub extern "kernel32" stdcallcc fn Wow64DisableWow64FsRedirection(OldValue: ?*PVOID) BOOL;
pub extern "kernel32" stdcallcc fn Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOLEAN) BOOLEAN;
pub extern "kernel32" stdcallcc fn Wow64GetThreadContext(hThread: HANDLE, lpContext: PWOW64_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn Wow64GetThreadSelectorEntry(hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: PWOW64_LDT_ENTRY) BOOL;
pub extern "kernel32" stdcallcc fn Wow64RevertWow64FsRedirection(OlValue: PVOID) BOOL;
pub extern "kernel32" stdcallcc fn Wow64SetThreadContext(hThread: HANDLE, lpContext: ?*const WOW64_CONTEXT) BOOL;
pub extern "kernel32" stdcallcc fn Wow64SuspendThread(hThread: HANDLE) DWORD;
pub extern "kernel32" stdcallcc fn WriteConsoleA(hConsoleOutput: HANDLE, lpBuffer: ?*const c_void, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleInputA(hConsoleInput: HANDLE, lpBuffer: ?*const INPUT_RECORD, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleInputW(hConsoleInput: HANDLE, lpBuffer: ?*const INPUT_RECORD, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: ?*const CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: ?*const WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPCSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPCWSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: ?*const CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT) BOOL;
pub extern "kernel32" stdcallcc fn WriteConsoleW(hConsoleOutput: HANDLE, lpBuffer: ?*const c_void, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID) BOOL;
pub extern "kernel32" stdcallcc fn WriteFile(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn WriteFileEx(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
pub extern "kernel32" stdcallcc fn WriteFileGather(hFile: HANDLE, aSegmentArray: ?*FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn WritePrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn WriteProcessMemory(hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, lpNumberOfBytesWritten: ?*SIZE_T) BOOL;
pub extern "kernel32" stdcallcc fn WriteProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn WriteProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn WriteProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR) BOOL;
pub extern "kernel32" stdcallcc fn WriteProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR) BOOL;
pub extern "kernel32" stdcallcc fn WriteTapemark(hDevice: HANDLE, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: BOOL) DWORD;
pub extern "kernel32" stdcallcc fn ZombifyActCtx(hActCtx: HANDLE) BOOL;
pub extern "kernel32" stdcallcc fn lstrcatA(lpString1: LPSTR, lpString2: LPCSTR) LPSTR;
pub extern "kernel32" stdcallcc fn lstrcatW(lpString1: LPWSTR, lpString2: LPCWSTR) LPWSTR;
pub extern "kernel32" stdcallcc fn lstrcmpA(lpString1: LPCSTR, lpString2: LPCSTR) c_int;
pub extern "kernel32" stdcallcc fn lstrcmpW(lpString1: LPCWSTR, lpString2: LPCWSTR) c_int;
pub extern "kernel32" stdcallcc fn lstrcmpiA(lpString1: LPCSTR, lpString2: LPCSTR) c_int;
pub extern "kernel32" stdcallcc fn lstrcmpiW(lpString1: LPCWSTR, lpString2: LPCWSTR) c_int;
pub extern "kernel32" stdcallcc fn lstrcpyA(lpString1: LPSTR, lpString2: LPCSTR) LPSTR;
pub extern "kernel32" stdcallcc fn lstrcpyW(lpString1: LPWSTR, lpString2: LPCWSTR) LPWSTR;
pub extern "kernel32" stdcallcc fn lstrcpynA(lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: c_int) LPSTR;
pub extern "kernel32" stdcallcc fn lstrcpynW(lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: c_int) LPWSTR;
pub extern "kernel32" stdcallcc fn lstrlenA(lpString: LPCSTR) c_int;
pub extern "kernel32" stdcallcc fn lstrlenW(lpString: LPCWSTR) c_int;
pub extern "kernel32" stdcallcc fn uaw_CharUpperW(String: LPUWSTR) LPUWSTR;
pub extern "kernel32" stdcallcc fn uaw_lstrcmpW(String1: PCUWSTR, String2: PCUWSTR) c_int;
pub extern "kernel32" stdcallcc fn uaw_lstrcmpiW(String1: PCUWSTR, String2: PCUWSTR) c_int;
pub extern "kernel32" stdcallcc fn uaw_lstrlenW(String: LPCUWSTR) c_int;
pub extern "kernel32" stdcallcc fn uaw_wcschr(String: PCUWSTR, Character: WCHAR) PUWSTR;
pub extern "kernel32" stdcallcc fn uaw_wcscpy(Destination: PUWSTR, Source: PCUWSTR) PUWSTR;
pub extern "kernel32" stdcallcc fn uaw_wcsicmp(String1: PCUWSTR, String2: PCUWSTR) c_int;
pub extern "kernel32" stdcallcc fn uaw_wcslen(String: PCUWSTR) usize;
pub extern "kernel32" stdcallcc fn uaw_wcsrchr(String: PCUWSTR, Character: WCHAR) PUWSTR;
pub extern "lz32" stdcallcc fn CopyLZFile(hfSource: INT, hfDest: INT) LONG;
pub extern "lz32" stdcallcc fn GetExpandedNameA(lpszSource: LPSTR, lpszBuffer: LPSTR) INT;
pub extern "lz32" stdcallcc fn GetExpandedNameW(lpszSource: LPWSTR, lpszBuffer: LPWSTR) INT;
pub extern "lz32" stdcallcc fn LZClose(hFile: INT) void;
pub extern "lz32" stdcallcc fn LZCopy(hfSource: INT, hfDest: INT) LONG;
pub extern "lz32" stdcallcc fn LZDone() void;
pub extern "lz32" stdcallcc fn LZInit(hfSource: INT) INT;
pub extern "lz32" stdcallcc fn LZOpenFileA(lpFileName: LPSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD) INT;
pub extern "lz32" stdcallcc fn LZOpenFileW(lpFileName: LPWSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD) INT;
pub extern "lz32" stdcallcc fn LZRead(hFile: INT, lpBuffer: ?*CHAR, cbRead: INT) INT;
pub extern "lz32" stdcallcc fn LZSeek(hFile: INT, lOffset: LONG, iOrigin: INT) LONG;
pub extern "lz32" stdcallcc fn LZStart() INT;
pub extern "mincore" stdcallcc fn GetOsSafeBootMode(Flags: PDWORD) BOOL;
pub extern "mincore" stdcallcc fn WaitOnAddress(Address: ?*volatile c_void, CompareAddress: PVOID, AddressSize: SIZE_T, dwMilliseconds: DWORD) BOOL;
pub extern "mincore" stdcallcc fn WakeByAddressAll(Address: PVOID) void;
pub extern "mincore" stdcallcc fn WakeByAddressSingle(Address: PVOID) void;
pub extern "mpr" stdcallcc fn MultinetGetConnectionPerformanceA(lpNetResource: LPNETRESOURCEA, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT) DWORD;
pub extern "mpr" stdcallcc fn MultinetGetConnectionPerformanceW(lpNetResource: LPNETRESOURCEW, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnection2A(lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnection2W(lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnection3A(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnection3W(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnectionA(lpRemoteName: LPCSTR, lpPassword: LPCSTR, lpLocalName: LPCSTR) DWORD;
pub extern "mpr" stdcallcc fn WNetAddConnectionW(lpRemoteName: LPCWSTR, lpPassword: LPCWSTR, lpLocalName: LPCWSTR) DWORD;
pub extern "mpr" stdcallcc fn WNetCancelConnection2A(lpName: LPCSTR, dwFlags: DWORD, fForce: BOOL) DWORD;
pub extern "mpr" stdcallcc fn WNetCancelConnection2W(lpName: LPCWSTR, dwFlags: DWORD, fForce: BOOL) DWORD;
pub extern "mpr" stdcallcc fn WNetCancelConnectionA(lpName: LPCSTR, fForce: BOOL) DWORD;
pub extern "mpr" stdcallcc fn WNetCancelConnectionW(lpName: LPCWSTR, fForce: BOOL) DWORD;
pub extern "mpr" stdcallcc fn WNetCloseEnum(hEnum: HANDLE) DWORD;
pub extern "mpr" stdcallcc fn WNetConnectionDialog(hwnd: HWND, dwType: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetConnectionDialog1A(lpConnDlgStruct: LPCONNECTDLGSTRUCTA) DWORD;
pub extern "mpr" stdcallcc fn WNetConnectionDialog1W(lpConnDlgStruct: LPCONNECTDLGSTRUCTW) DWORD;
pub extern "mpr" stdcallcc fn WNetDisconnectDialog(hwnd: HWND, dwType: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetDisconnectDialog1A(lpConnDlgStruct: LPDISCDLGSTRUCTA) DWORD;
pub extern "mpr" stdcallcc fn WNetDisconnectDialog1W(lpConnDlgStruct: LPDISCDLGSTRUCTW) DWORD;
pub extern "mpr" stdcallcc fn WNetEnumResourceA(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetEnumResourceW(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetConnectionA(lpLocalName: LPCSTR, lpRemoteName: LPSTR, lpnLength: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetConnectionW(lpLocalName: LPCWSTR, lpRemoteName: LPWSTR, lpnLength: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetLastErrorA(lpError: LPDWORD, lpErrorBuf: LPSTR, nErrorBufSize: DWORD, lpNameBuf: LPSTR, nNameBufSize: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetLastErrorW(lpError: LPDWORD, lpErrorBuf: LPWSTR, nErrorBufSize: DWORD, lpNameBuf: LPWSTR, nNameBufSize: DWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetNetworkInformationA(lpProvider: LPCSTR, lpNetInfoStruct: LPNETINFOSTRUCT) DWORD;
pub extern "mpr" stdcallcc fn WNetGetNetworkInformationW(lpProvider: LPCWSTR, lpNetInfoStruct: LPNETINFOSTRUCT) DWORD;
pub extern "mpr" stdcallcc fn WNetGetProviderNameA(dwNetType: DWORD, lpProviderName: LPSTR, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetProviderNameW(dwNetType: DWORD, lpProviderName: LPWSTR, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetResourceInformationA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: ?*LPSTR) DWORD;
pub extern "mpr" stdcallcc fn WNetGetResourceInformationW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: ?*LPWSTR) DWORD;
pub extern "mpr" stdcallcc fn WNetGetResourceParentA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetResourceParentW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetUniversalNameA(lpLocalPath: LPCSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetUniversalNameW(lpLocalPath: LPCWSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetUserA(lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetGetUserW(lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetOpenEnumA(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEA, lphEnum: LPHANDLE) DWORD;
pub extern "mpr" stdcallcc fn WNetOpenEnumW(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEW, lphEnum: LPHANDLE) DWORD;
pub extern "mpr" stdcallcc fn WNetRestoreSingleConnectionW(hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: BOOL) DWORD;
pub extern "mpr" stdcallcc fn WNetUseConnectionA(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserId: LPCSTR, dwFlags: DWORD, lpAccessName: LPSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD) DWORD;
pub extern "mpr" stdcallcc fn WNetUseConnectionW(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserId: LPCWSTR, dwFlags: DWORD, lpAccessName: LPWSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD) DWORD;
pub extern "mswsock" stdcallcc fn AcceptEx(sListenSocket: SOCKET, sAcceptSocket: SOCKET, lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, lpdwBytesReceived: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
pub extern "mswsock" stdcallcc fn GetAcceptExSockaddrs(lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, LocalSockaddr: ?*(?*struct_sockaddr), LocalSockaddrLength: LPINT, RemoteSockaddr: ?*(?*struct_sockaddr), RemoteSockaddrLength: LPINT) void;
pub extern "mswsock" stdcallcc fn TransmitFile(hSocket: SOCKET, hFile: HANDLE, nNumberOfBytesToWrite: DWORD, nNumberOfBytesPerSend: DWORD, lpOverlapped: LPOVERLAPPED, lpTransmitBuffers: LPTRANSMIT_FILE_BUFFERS, dwReserved: DWORD) BOOL;
pub extern "mswsock" stdcallcc fn WSARecvEx(s: SOCKET, buf: ?[*]u8, len: c_int, flags: ?*c_int) c_int;
pub extern "ncrypt" stdcallcc fn NCryptCreateClaim(hSubjectKey: NCRYPT_KEY_HANDLE, hAuthorityKey: NCRYPT_KEY_HANDLE, dwClaimType: DWORD, pParameterList: ?*NCryptBufferDesc, pbClaimBlob: PBYTE, cbClaimBlob: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptCreatePersistedKey(hProvider: NCRYPT_PROV_HANDLE, phKey: ?*NCRYPT_KEY_HANDLE, pszAlgId: LPCWSTR, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptDecrypt(hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: ?*c_void, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptDeleteKey(hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptDeriveKey(hSharedSecret: NCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: ?*NCryptBufferDesc, pbDerivedKey: PBYTE, cbDerivedKey: DWORD, pcbResult: ?*DWORD, dwFlags: ULONG) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptEncrypt(hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: ?*c_void, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptEnumAlgorithms(hProvider: NCRYPT_PROV_HANDLE, dwAlgOperations: DWORD, pdwAlgCount: ?*DWORD, ppAlgList: ?*(?*NCryptAlgorithmName), dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptEnumKeys(hProvider: NCRYPT_PROV_HANDLE, pszScope: LPCWSTR, ppKeyName: ?*(?*NCryptKeyName), ppEnumState: ?*PVOID, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptEnumStorageProviders(pdwProviderCount: ?*DWORD, ppProviderList: ?*(?*NCryptProviderName), dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptExportKey(hKey: NCRYPT_KEY_HANDLE, hExportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: ?*NCryptBufferDesc, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptFinalizeKey(hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptFreeBuffer(pvInput: PVOID) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptFreeObject(hObject: NCRYPT_HANDLE) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptGetProperty(hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptImportKey(hProvider: NCRYPT_PROV_HANDLE, hImportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: ?*NCryptBufferDesc, phKey: ?*NCRYPT_KEY_HANDLE, pbData: PBYTE, cbData: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptIsAlgSupported(hProvider: NCRYPT_PROV_HANDLE, pszAlgId: LPCWSTR, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptIsKeyHandle(hKey: NCRYPT_KEY_HANDLE) BOOL;
pub extern "ncrypt" stdcallcc fn NCryptKeyDerivation(hKey: NCRYPT_KEY_HANDLE, pParameterList: ?*NCryptBufferDesc, pbDerivedKey: PUCHAR, cbDerivedKey: DWORD, pcbResult: ?*DWORD, dwFlags: ULONG) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptNotifyChangeKey(hProvider: NCRYPT_PROV_HANDLE, phEvent: ?*HANDLE, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptOpenKey(hProvider: NCRYPT_PROV_HANDLE, phKey: ?*NCRYPT_KEY_HANDLE, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptOpenStorageProvider(phProvider: ?*NCRYPT_PROV_HANDLE, pszProviderName: LPCWSTR, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptSecretAgreement(hPrivKey: NCRYPT_KEY_HANDLE, hPubKey: NCRYPT_KEY_HANDLE, phAgreedSecret: ?*NCRYPT_SECRET_HANDLE, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptSetProperty(hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PBYTE, cbInput: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptSignHash(hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: ?*c_void, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, pcbResult: ?*DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptTranslateHandle(phProvider: ?*NCRYPT_PROV_HANDLE, phKey: ?*NCRYPT_KEY_HANDLE, hLegacyProv: HCRYPTPROV, hLegacyKey: HCRYPTKEY, dwLegacyKeySpec: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptVerifyClaim(hSubjectKey: NCRYPT_KEY_HANDLE, hAuthorityKey: NCRYPT_KEY_HANDLE, dwClaimType: DWORD, pParameterList: ?*NCryptBufferDesc, pbClaimBlob: PBYTE, cbClaimBlob: DWORD, pOutput: ?*NCryptBufferDesc, dwFlags: DWORD) SECURITY_STATUS;
pub extern "ncrypt" stdcallcc fn NCryptVerifySignature(hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: ?*c_void, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, dwFlags: DWORD) SECURITY_STATUS;
pub extern "netapi32" stdcallcc fn Netbios(pncb: PNCB) UCHAR;
pub extern "ntdll" stdcallcc fn RtlCrc32(Buffer: ?*const c_void, Size: usize, InitialCrc: DWORD) DWORD;
pub extern "ntdll" stdcallcc fn RtlCrc64(Buffer: ?*const c_void, Size: usize, InitialCrc: ULONGLONG) ULONGLONG;
pub extern "ntdll" stdcallcc fn RtlFirstEntrySList(ListHead: ?*const SLIST_HEADER) PSLIST_ENTRY;
pub extern "ntdll" stdcallcc fn RtlGetProductInfo(OSMajorVersion: DWORD, OSMinorVersion: DWORD, SpMajorVersion: DWORD, SpMinorVersion: DWORD, ReturnedProductType: PDWORD) BOOLEAN;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserFree(arg0: ?*c_ulong, arg1: ?*ASYNC_STGMEDIUM) void;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserFree64(arg0: ?*c_ulong, arg1: ?*ASYNC_STGMEDIUM) void;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*ASYNC_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*ASYNC_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*ASYNC_STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*ASYNC_STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*ASYNC_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn ASYNC_STGMEDIUM_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*ASYNC_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(This: ?*AsyncIAdviseSink2, pmk: ?*IMoniker) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(This: ?*AsyncIAdviseSink2, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(This: ?*AsyncIAdviseSink2, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(This: ?*AsyncIAdviseSink2) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(This: ?*AsyncIAdviseSink2) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(This: ?*AsyncIAdviseSink2) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnClose_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnClose_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnDataChange_Proxy(This: ?*AsyncIAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*STGMEDIUM) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnDataChange_Stub(This: ?*AsyncIAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*ASYNC_STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnRename_Proxy(This: ?*AsyncIAdviseSink, pmk: ?*IMoniker) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnRename_Stub(This: ?*AsyncIAdviseSink, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnSave_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnSave_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnViewChange_Proxy(This: ?*AsyncIAdviseSink, dwAspect: DWORD, lindex: LONG) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_OnViewChange_Stub(This: ?*AsyncIAdviseSink, dwAspect: DWORD, lindex: LONG) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnClose_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(This: ?*AsyncIAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*ASYNC_STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(This: ?*AsyncIAdviseSink, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnRename_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnSave_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(This: ?*AsyncIAdviseSink, dwAspect: DWORD, lindex: LONG) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnClose_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnClose_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnDataChange_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnDataChange_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnRename_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnRename_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnSave_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnSave_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnViewChange_Proxy(This: ?*AsyncIAdviseSink) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_OnViewChange_Stub(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnClose_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnRename_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnSave_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(This: ?*AsyncIAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn BSTR_UserFree(arg0: ?*c_ulong, arg1: ?*BSTR) void;
pub extern "ole32" stdcallcc fn BSTR_UserFree64(arg0: ?*c_ulong, arg1: ?*BSTR) void;
pub extern "ole32" stdcallcc fn BSTR_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*BSTR) ?[*]u8;
pub extern "ole32" stdcallcc fn BSTR_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*BSTR) ?[*]u8;
pub extern "ole32" stdcallcc fn BSTR_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*BSTR) c_ulong;
pub extern "ole32" stdcallcc fn BSTR_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*BSTR) c_ulong;
pub extern "ole32" stdcallcc fn BSTR_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*BSTR) ?[*]u8;
pub extern "ole32" stdcallcc fn BSTR_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*BSTR) ?[*]u8;
pub extern "ole32" stdcallcc fn BindMoniker(pmk: LPMONIKER, grfOpt: DWORD, iidResult: ?*const IID, ppvResult: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserFree(arg0: ?*c_ulong, arg1: ?*CLEANLOCALSTORAGE) void;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserFree64(arg0: ?*c_ulong, arg1: ?*CLEANLOCALSTORAGE) void;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLEANLOCALSTORAGE) ?[*]u8;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLEANLOCALSTORAGE) ?[*]u8;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*CLEANLOCALSTORAGE) c_ulong;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*CLEANLOCALSTORAGE) c_ulong;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLEANLOCALSTORAGE) ?[*]u8;
pub extern "ole32" stdcallcc fn CLEANLOCALSTORAGE_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLEANLOCALSTORAGE) ?[*]u8;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserFree(arg0: ?*c_ulong, arg1: ?*CLIPFORMAT) void;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserFree64(arg0: ?*c_ulong, arg1: ?*CLIPFORMAT) void;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLIPFORMAT) ?[*]u8;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLIPFORMAT) ?[*]u8;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*CLIPFORMAT) c_ulong;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*CLIPFORMAT) c_ulong;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLIPFORMAT) ?[*]u8;
pub extern "ole32" stdcallcc fn CLIPFORMAT_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*CLIPFORMAT) ?[*]u8;
pub extern "ole32" stdcallcc fn CLSIDFromProgID(lpszProgID: LPCOLESTR, lpclsid: LPCLSID) HRESULT;
pub extern "ole32" stdcallcc fn CLSIDFromProgIDEx(lpszProgID: LPCOLESTR, lpclsid: LPCLSID) HRESULT;
pub extern "ole32" stdcallcc fn CLSIDFromString(lpsz: LPCOLESTR, pclsid: LPCLSID) HRESULT;
pub extern "ole32" stdcallcc fn CoAddRefServerProcess() ULONG;
pub extern "ole32" stdcallcc fn CoAllowSetForegroundWindow(pUnk: ?*IUnknown, lpvReserved: LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoAllowUnmarshalerCLSID(clsid: ?*const IID) HRESULT;
pub extern "ole32" stdcallcc fn CoBuildVersion() DWORD;
pub extern "ole32" stdcallcc fn CoCancelCall(dwThreadId: DWORD, ulTimeout: ULONG) HRESULT;
pub extern "ole32" stdcallcc fn CoCopyProxy(pProxy: ?*IUnknown, ppCopy: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateFreeThreadedMarshaler(punkOuter: LPUNKNOWN, ppunkMarshal: ?*LPUNKNOWN) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateGuid(pguid: ?*GUID) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateInstance(rclsid: ?*const IID, pUnkOuter: LPUNKNOWN, dwClsContext: DWORD, riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateInstanceEx(Clsid: ?*const IID, punkOuter: ?*IUnknown, dwClsCtx: DWORD, pServerInfo: ?*COSERVERINFO, dwCount: DWORD, pResults: ?*MULTI_QI) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateInstanceFromApp(Clsid: ?*const IID, punkOuter: ?*IUnknown, dwClsCtx: DWORD, reserved: PVOID, dwCount: DWORD, pResults: ?*MULTI_QI) HRESULT;
pub extern "ole32" stdcallcc fn CoCreateStandardMalloc(memctx: DWORD, ppMalloc: ?*(?*IMalloc)) HRESULT;
pub extern "ole32" stdcallcc fn CoDecodeProxy(dwClientPid: DWORD, ui64ProxyAddress: UINT64, pServerInformation: PServerInformation) HRESULT;
pub extern "ole32" stdcallcc fn CoDecrementMTAUsage(Cookie: CO_MTA_USAGE_COOKIE) HRESULT;
pub extern "ole32" stdcallcc fn CoDisableCallCancellation(pReserved: LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoDisconnectContext(dwTimeout: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoDisconnectObject(pUnk: LPUNKNOWN, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoDosDateTimeToFileTime(nDosDate: WORD, nDosTime: WORD, lpFileTime: ?*FILETIME) BOOL;
pub extern "ole32" stdcallcc fn CoEnableCallCancellation(pReserved: LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoFileTimeNow(lpFileTime: ?*FILETIME) HRESULT;
pub extern "ole32" stdcallcc fn CoFileTimeToDosDateTime(lpFileTime: ?*FILETIME, lpDosDate: LPWORD, lpDosTime: LPWORD) BOOL;
pub extern "ole32" stdcallcc fn CoFreeAllLibraries() void;
pub extern "ole32" stdcallcc fn CoFreeLibrary(hInst: HINSTANCE) void;
pub extern "ole32" stdcallcc fn CoFreeUnusedLibraries() void;
pub extern "ole32" stdcallcc fn CoFreeUnusedLibrariesEx(dwUnloadDelay: DWORD, dwReserved: DWORD) void;
pub extern "ole32" stdcallcc fn CoGetApartmentType(pAptType: ?*APTTYPE, pAptQualifier: ?*APTTYPEQUALIFIER) HRESULT;
pub extern "ole32" stdcallcc fn CoGetCallContext(riid: ?*const IID, ppInterface: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn CoGetCallerTID(lpdwTID: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoGetCancelObject(dwThreadId: DWORD, iid: ?*const IID, ppUnk: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn CoGetClassObject(rclsid: ?*const IID, dwClsContext: DWORD, pvReserved: LPVOID, riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetClassObjectFromURL(rCLASSID: ?*const IID, szCODE: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szTYPE: LPCWSTR, pBindCtx: LPBINDCTX, dwClsContext: DWORD, pvReserved: LPVOID, riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetContextToken(pToken: ?*ULONG_PTR) HRESULT;
pub extern "ole32" stdcallcc fn CoGetCurrentLogicalThreadId(pguid: ?*GUID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetCurrentProcess() DWORD;
pub extern "ole32" stdcallcc fn CoGetDefaultContext(aptType: APTTYPE, riid: ?*const IID, ppv: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn CoGetInstanceFromFile(pServerInfo: ?*COSERVERINFO, pClsid: ?*CLSID, punkOuter: ?*IUnknown, dwClsCtx: DWORD, grfMode: DWORD, pwszName: ?*OLECHAR, dwCount: DWORD, pResults: ?*MULTI_QI) HRESULT;
pub extern "ole32" stdcallcc fn CoGetInstanceFromIStorage(pServerInfo: ?*COSERVERINFO, pClsid: ?*CLSID, punkOuter: ?*IUnknown, dwClsCtx: DWORD, pstg: ?*struct_IStorage, dwCount: DWORD, pResults: ?*MULTI_QI) HRESULT;
pub extern "ole32" stdcallcc fn CoGetInterfaceAndReleaseStream(pStm: LPSTREAM, iid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetMalloc(dwMemContext: DWORD, ppMalloc: ?*LPMALLOC) HRESULT;
pub extern "ole32" stdcallcc fn CoGetMarshalSizeMax(pulSize: ?*ULONG, riid: ?*const IID, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoGetObject(pszName: LPCWSTR, pBindOptions: ?*BIND_OPTS, riid: ?*const IID, ppv: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn CoGetObjectContext(riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetPSClsid(riid: ?*const IID, pClsid: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn CoGetStandardMarshal(riid: ?*const IID, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD, ppMarshal: ?*LPMARSHAL) HRESULT;
pub extern "ole32" stdcallcc fn CoGetStdMarshalEx(pUnkOuter: LPUNKNOWN, smexflags: DWORD, ppUnkInner: ?*LPUNKNOWN) HRESULT;
pub extern "ole32" stdcallcc fn CoGetSystemSecurityPermissions(comSDType: COMSD, ppSD: ?*PSECURITY_DESCRIPTOR) HRESULT;
pub extern "ole32" stdcallcc fn CoGetTreatAsClass(clsidOld: ?*const IID, pClsidNew: LPCLSID) HRESULT;
pub extern "ole32" stdcallcc fn CoImpersonateClient() HRESULT;
pub extern "ole32" stdcallcc fn CoIncrementMTAUsage(pCookie: ?*CO_MTA_USAGE_COOKIE) HRESULT;
pub extern "ole32" stdcallcc fn CoInitialize(pvReserved: LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoInitializeEx(pvReserved: LPVOID, dwCoInit: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoInitializeSecurity(pSecDesc: PSECURITY_DESCRIPTOR, cAuthSvc: LONG, asAuthSvc: ?*SOLE_AUTHENTICATION_SERVICE, pReserved1: ?*c_void, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthList: ?*c_void, dwCapabilities: DWORD, pReserved3: ?*c_void) HRESULT;
pub extern "ole32" stdcallcc fn CoInstall(pbc: ?*IBindCtx, dwFlags: DWORD, pClassSpec: ?*uCLSSPEC, pQuery: ?*QUERYCONTEXT, pszCodeBase: LPWSTR) HRESULT;
pub extern "ole32" stdcallcc fn CoInvalidateRemoteMachineBindings(pszMachineName: LPOLESTR) HRESULT;
pub extern "ole32" stdcallcc fn CoIsHandlerConnected(pUnk: LPUNKNOWN) BOOL;
pub extern "ole32" stdcallcc fn CoIsOle1Class(rclsid: ?*const IID) BOOL;
pub extern "ole32" stdcallcc fn CoLoadLibrary(lpszLibName: LPOLESTR, bAutoFree: BOOL) HINSTANCE;
pub extern "ole32" stdcallcc fn CoLockObjectExternal(pUnk: LPUNKNOWN, fLock: BOOL, fLastUnlockReleases: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn CoMarshalHresult(pstm: LPSTREAM, hresult: HRESULT) HRESULT;
pub extern "ole32" stdcallcc fn CoMarshalInterThreadInterfaceInStream(riid: ?*const IID, pUnk: LPUNKNOWN, ppStm: ?*LPSTREAM) HRESULT;
pub extern "ole32" stdcallcc fn CoMarshalInterface(pStm: LPSTREAM, riid: ?*const IID, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoQueryAuthenticationServices(pcAuthSvc: ?*DWORD, asAuthSvc: ?*(?*SOLE_AUTHENTICATION_SERVICE)) HRESULT;
pub extern "ole32" stdcallcc fn CoQueryClientBlanket(pAuthnSvc: ?*DWORD, pAuthzSvc: ?*DWORD, pServerPrincName: ?*LPOLESTR, pAuthnLevel: ?*DWORD, pImpLevel: ?*DWORD, pPrivs: ?*RPC_AUTHZ_HANDLE, pCapabilities: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoQueryProxyBlanket(pProxy: ?*IUnknown, pwAuthnSvc: ?*DWORD, pAuthzSvc: ?*DWORD, pServerPrincName: ?*LPOLESTR, pAuthnLevel: ?*DWORD, pImpLevel: ?*DWORD, pAuthInfo: ?*RPC_AUTH_IDENTITY_HANDLE, pCapabilites: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterActivationFilter(pActivationFilter: ?*IActivationFilter) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterChannelHook(ExtensionUuid: ?*const GUID, pChannelHook: ?*IChannelHook) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterClassObject(rclsid: ?*const IID, pUnk: LPUNKNOWN, dwClsContext: DWORD, flags: DWORD, lpdwRegister: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterInitializeSpy(pSpy: ?*IInitializeSpy, puliCookie: ?*ULARGE_INTEGER) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterMallocSpy(pMallocSpy: LPMALLOCSPY) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterMessageFilter(lpMessageFilter: LPMESSAGEFILTER, lplpMessageFilter: ?*LPMESSAGEFILTER) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterPSClsid(riid: ?*const IID, rclsid: ?*const IID) HRESULT;
pub extern "ole32" stdcallcc fn CoRegisterSurrogate(pSurrogate: LPSURROGATE) HRESULT;
pub extern "ole32" stdcallcc fn CoReleaseMarshalData(pStm: LPSTREAM) HRESULT;
pub extern "ole32" stdcallcc fn CoReleaseServerProcess() ULONG;
pub extern "ole32" stdcallcc fn CoResumeClassObjects() HRESULT;
pub extern "ole32" stdcallcc fn CoRevertToSelf() HRESULT;
pub extern "ole32" stdcallcc fn CoRevokeClassObject(dwRegister: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoRevokeInitializeSpy(uliCookie: ULARGE_INTEGER) HRESULT;
pub extern "ole32" stdcallcc fn CoRevokeMallocSpy() HRESULT;
pub extern "ole32" stdcallcc fn CoSetCancelObject(pUnk: ?*IUnknown) HRESULT;
pub extern "ole32" stdcallcc fn CoSetProxyBlanket(pProxy: ?*IUnknown, dwAuthnSvc: DWORD, dwAuthzSvc: DWORD, pServerPrincName: ?*OLECHAR, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthInfo: RPC_AUTH_IDENTITY_HANDLE, dwCapabilities: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoSuspendClassObjects() HRESULT;
pub extern "ole32" stdcallcc fn CoSwitchCallContext(pNewObject: ?*IUnknown, ppOldObject: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn CoTaskMemAlloc(cb: SIZE_T) LPVOID;
pub extern "ole32" stdcallcc fn CoTaskMemFree(pv: LPVOID) void;
pub extern "ole32" stdcallcc fn CoTaskMemRealloc(pv: LPVOID, cb: SIZE_T) LPVOID;
pub extern "ole32" stdcallcc fn CoTestCancel() HRESULT;
pub extern "ole32" stdcallcc fn CoTreatAsClass(clsidOld: ?*const IID, clsidNew: ?*const IID) HRESULT;
pub extern "ole32" stdcallcc fn CoUninitialize() void;
pub extern "ole32" stdcallcc fn CoUnmarshalHresult(pstm: LPSTREAM, phresult: ?*HRESULT) HRESULT;
pub extern "ole32" stdcallcc fn CoUnmarshalInterface(pStm: LPSTREAM, riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CoWaitForMultipleHandles(dwFlags: DWORD, dwTimeout: DWORD, cHandles: ULONG, pHandles: LPHANDLE, lpdwindex: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn CoWaitForMultipleObjects(dwFlags: DWORD, dwTimeout: DWORD, cHandles: ULONG, pHandles: ?*const HANDLE, lpdwindex: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn CompareSecurityIds(pbSecurityId1: ?*BYTE, dwLen1: DWORD, pbSecurityId2: ?*BYTE, dwLen2: DWORD, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CompatFlagsFromClsid(pclsid: ?*CLSID, pdwCompatFlags: LPDWORD, pdwMiscStatusFlags: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn CreateAntiMoniker(ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateAsyncBindCtx(reserved: DWORD, pBSCb: ?*IBindStatusCallback, pEFetc: ?*IEnumFORMATETC, ppBC: ?*(?*IBindCtx)) HRESULT;
pub extern "ole32" stdcallcc fn CreateAsyncBindCtxEx(pbc: ?*IBindCtx, dwOptions: DWORD, pBSCb: ?*IBindStatusCallback, pEnum: ?*IEnumFORMATETC, ppBC: ?*(?*IBindCtx), reserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CreateBindCtx(reserved: DWORD, ppbc: ?*LPBC) HRESULT;
pub extern "ole32" stdcallcc fn CreateClassMoniker(rclsid: ?*const IID, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateDataAdviseHolder(ppDAHolder: ?*LPDATAADVISEHOLDER) HRESULT;
pub extern "ole32" stdcallcc fn CreateDataCache(pUnkOuter: LPUNKNOWN, rclsid: ?*const IID, iid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn CreateFileMoniker(lpszPathName: LPCOLESTR, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateFormatEnumerator(cfmtetc: UINT, rgfmtetc: ?*FORMATETC, ppenumfmtetc: ?*(?*IEnumFORMATETC)) HRESULT;
pub extern "ole32" stdcallcc fn CreateGenericComposite(pmkFirst: LPMONIKER, pmkRest: LPMONIKER, ppmkComposite: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateILockBytesOnHGlobal(hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, pplkbyt: ?*LPLOCKBYTES) HRESULT;
pub extern "ole32" stdcallcc fn CreateIUriBuilder(pIUri: ?*IUri, dwFlags: DWORD, dwReserved: DWORD_PTR, ppIUriBuilder: ?*(?*IUriBuilder)) HRESULT;
pub extern "ole32" stdcallcc fn CreateItemMoniker(lpszDelim: LPCOLESTR, lpszItem: LPCOLESTR, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateObjrefMoniker(punk: LPUNKNOWN, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreatePointerMoniker(punk: LPUNKNOWN, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateStdProgressIndicator(hwndParent: HWND, pszTitle: LPCOLESTR, pIbscCaller: ?*IBindStatusCallback, ppIbsc: ?*(?*IBindStatusCallback)) HRESULT;
pub extern "ole32" stdcallcc fn CreateStreamOnHGlobal(hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, ppstm: ?*LPSTREAM) HRESULT;
pub extern "ole32" stdcallcc fn CreateURLBinding(lpszUrl: LPCWSTR, pbc: ?*IBindCtx, ppBdg: ?*(?*IBinding)) HRESULT;
pub extern "ole32" stdcallcc fn CreateURLMoniker(pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn CreateURLMonikerEx(pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: ?*LPMONIKER, dwFlags: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CreateURLMonikerEx2(pMkCtx: LPMONIKER, pUri: ?*IUri, ppmk: ?*LPMONIKER, dwFlags: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn CreateUri(pwzURI: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: ?*(?*IUri)) HRESULT;
pub extern "ole32" stdcallcc fn CreateUriFromMultiByteString(pszANSIInputUri: LPCSTR, dwEncodingFlags: DWORD, dwCodePage: DWORD, dwCreateFlags: DWORD, dwReserved: DWORD_PTR, ppUri: ?*(?*IUri)) HRESULT;
pub extern "ole32" stdcallcc fn CreateUriWithFragment(pwzURI: LPCWSTR, pwzFragment: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: ?*(?*IUri)) HRESULT;
pub extern "ole32" stdcallcc fn DcomChannelSetHResult(pvReserved: LPVOID, pulReserved: ?*ULONG, appsHR: HRESULT) HRESULT;
pub extern "ole32" stdcallcc fn DllCanUnloadNow() HRESULT;
pub extern "ole32" stdcallcc fn DllGetClassObject(rclsid: ?*const IID, riid: ?*const IID, ppv: ?*LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserFree(arg0: ?*c_ulong, arg1: ?*FLAG_STGMEDIUM) void;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserFree64(arg0: ?*c_ulong, arg1: ?*FLAG_STGMEDIUM) void;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*FLAG_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*FLAG_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*FLAG_STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*FLAG_STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*FLAG_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn FLAG_STGMEDIUM_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*FLAG_STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn FaultInIEFeature(hWnd: HWND, pClassSpec: ?*uCLSSPEC, pQuery: ?*QUERYCONTEXT, dwFlags: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn FindMediaType(rgszTypes: LPCSTR, rgcfTypes: ?*CLIPFORMAT) HRESULT;
pub extern "ole32" stdcallcc fn FindMediaTypeClass(pBC: LPBC, szType: LPCSTR, pclsID: ?*CLSID, reserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn FindMimeFromData(pBC: LPBC, pwzUrl: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, pwzMimeProposed: LPCWSTR, dwMimeFlags: DWORD, ppwzMimeOut: ?*LPWSTR, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn FmtIdToPropStgName(pfmtid: ?*const FMTID, oszName: LPOLESTR) HRESULT;
pub extern "ole32" stdcallcc fn FreePropVariantArray(cVariants: ULONG, rgvars: ?*PROPVARIANT) HRESULT;
pub extern "ole32" stdcallcc fn GetClassFile(szFilename: LPCOLESTR, pclsid: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn GetClassFileOrMime(pBC: LPBC, szFilename: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, szMime: LPCWSTR, dwReserved: DWORD, pclsid: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn GetClassURL(szURL: LPCWSTR, pClsID: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn GetComponentIDFromCLSSPEC(pClassspec: ?*uCLSSPEC, ppszComponentID: ?*LPSTR) HRESULT;
pub extern "ole32" stdcallcc fn GetConvertStg(pStg: LPSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn GetHGlobalFromILockBytes(plkbyt: LPLOCKBYTES, phglobal: ?*HGLOBAL) HRESULT;
pub extern "ole32" stdcallcc fn GetHGlobalFromStream(pstm: LPSTREAM, phglobal: ?*HGLOBAL) HRESULT;
pub extern "ole32" stdcallcc fn GetRunningObjectTable(reserved: DWORD, pprot: ?*LPRUNNINGOBJECTTABLE) HRESULT;
pub extern "ole32" stdcallcc fn HACCEL_UserFree(arg0: ?*c_ulong, arg1: ?*HACCEL) void;
pub extern "ole32" stdcallcc fn HACCEL_UserFree64(arg0: ?*c_ulong, arg1: ?*HACCEL) void;
pub extern "ole32" stdcallcc fn HACCEL_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HACCEL) ?[*]u8;
pub extern "ole32" stdcallcc fn HACCEL_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HACCEL) ?[*]u8;
pub extern "ole32" stdcallcc fn HACCEL_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HACCEL) c_ulong;
pub extern "ole32" stdcallcc fn HACCEL_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HACCEL) c_ulong;
pub extern "ole32" stdcallcc fn HACCEL_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HACCEL) ?[*]u8;
pub extern "ole32" stdcallcc fn HACCEL_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HACCEL) ?[*]u8;
pub extern "ole32" stdcallcc fn HBITMAP_UserFree(arg0: ?*c_ulong, arg1: ?*HBITMAP) void;
pub extern "ole32" stdcallcc fn HBITMAP_UserFree64(arg0: ?*c_ulong, arg1: ?*HBITMAP) void;
pub extern "ole32" stdcallcc fn HBITMAP_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HBITMAP) ?[*]u8;
pub extern "ole32" stdcallcc fn HBITMAP_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HBITMAP) ?[*]u8;
pub extern "ole32" stdcallcc fn HBITMAP_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HBITMAP) c_ulong;
pub extern "ole32" stdcallcc fn HBITMAP_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HBITMAP) c_ulong;
pub extern "ole32" stdcallcc fn HBITMAP_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HBITMAP) ?[*]u8;
pub extern "ole32" stdcallcc fn HBITMAP_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HBITMAP) ?[*]u8;
pub extern "ole32" stdcallcc fn HDC_UserFree(arg0: ?*c_ulong, arg1: ?*HDC) void;
pub extern "ole32" stdcallcc fn HDC_UserFree64(arg0: ?*c_ulong, arg1: ?*HDC) void;
pub extern "ole32" stdcallcc fn HDC_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HDC) ?[*]u8;
pub extern "ole32" stdcallcc fn HDC_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HDC) ?[*]u8;
pub extern "ole32" stdcallcc fn HDC_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HDC) c_ulong;
pub extern "ole32" stdcallcc fn HDC_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HDC) c_ulong;
pub extern "ole32" stdcallcc fn HDC_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HDC) ?[*]u8;
pub extern "ole32" stdcallcc fn HDC_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HDC) ?[*]u8;
pub extern "ole32" stdcallcc fn HGLOBAL_UserFree(arg0: ?*c_ulong, arg1: ?*HGLOBAL) void;
pub extern "ole32" stdcallcc fn HGLOBAL_UserFree64(arg0: ?*c_ulong, arg1: ?*HGLOBAL) void;
pub extern "ole32" stdcallcc fn HGLOBAL_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HGLOBAL) ?[*]u8;
pub extern "ole32" stdcallcc fn HGLOBAL_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HGLOBAL) ?[*]u8;
pub extern "ole32" stdcallcc fn HGLOBAL_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HGLOBAL) c_ulong;
pub extern "ole32" stdcallcc fn HGLOBAL_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HGLOBAL) c_ulong;
pub extern "ole32" stdcallcc fn HGLOBAL_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HGLOBAL) ?[*]u8;
pub extern "ole32" stdcallcc fn HGLOBAL_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HGLOBAL) ?[*]u8;
pub extern "ole32" stdcallcc fn HICON_UserFree(arg0: ?*c_ulong, arg1: ?*HICON) void;
pub extern "ole32" stdcallcc fn HICON_UserFree64(arg0: ?*c_ulong, arg1: ?*HICON) void;
pub extern "ole32" stdcallcc fn HICON_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HICON) ?[*]u8;
pub extern "ole32" stdcallcc fn HICON_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HICON) ?[*]u8;
pub extern "ole32" stdcallcc fn HICON_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HICON) c_ulong;
pub extern "ole32" stdcallcc fn HICON_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HICON) c_ulong;
pub extern "ole32" stdcallcc fn HICON_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HICON) ?[*]u8;
pub extern "ole32" stdcallcc fn HICON_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HICON) ?[*]u8;
pub extern "ole32" stdcallcc fn HMENU_UserFree(arg0: ?*c_ulong, arg1: ?*HMENU) void;
pub extern "ole32" stdcallcc fn HMENU_UserFree64(arg0: ?*c_ulong, arg1: ?*HMENU) void;
pub extern "ole32" stdcallcc fn HMENU_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HMENU) ?[*]u8;
pub extern "ole32" stdcallcc fn HMENU_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HMENU) ?[*]u8;
pub extern "ole32" stdcallcc fn HMENU_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HMENU) c_ulong;
pub extern "ole32" stdcallcc fn HMENU_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HMENU) c_ulong;
pub extern "ole32" stdcallcc fn HMENU_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HMENU) ?[*]u8;
pub extern "ole32" stdcallcc fn HMENU_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HMENU) ?[*]u8;
pub extern "ole32" stdcallcc fn HWND_UserFree(arg0: ?*c_ulong, arg1: ?*HWND) void;
pub extern "ole32" stdcallcc fn HWND_UserFree64(arg0: ?*c_ulong, arg1: ?*HWND) void;
pub extern "ole32" stdcallcc fn HWND_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HWND) ?[*]u8;
pub extern "ole32" stdcallcc fn HWND_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HWND) ?[*]u8;
pub extern "ole32" stdcallcc fn HWND_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HWND) c_ulong;
pub extern "ole32" stdcallcc fn HWND_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*HWND) c_ulong;
pub extern "ole32" stdcallcc fn HWND_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HWND) ?[*]u8;
pub extern "ole32" stdcallcc fn HWND_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*HWND) ?[*]u8;
pub extern "ole32" stdcallcc fn IAdviseSink2_OnLinkSrcChange_Proxy(This: ?*IAdviseSink2, pmk: ?*IMoniker) void;
pub extern "ole32" stdcallcc fn IAdviseSink2_OnLinkSrcChange_Stub(This: ?*IAdviseSink2, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink2_RemoteOnLinkSrcChange_Proxy(This: ?*IAdviseSink2, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink2_RemoteOnLinkSrcChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnClose_Proxy(This: ?*IAdviseSink) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnClose_Stub(This: ?*IAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_OnDataChange_Proxy(This: ?*IAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*STGMEDIUM) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnDataChange_Stub(This: ?*IAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*ASYNC_STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_OnRename_Proxy(This: ?*IAdviseSink, pmk: ?*IMoniker) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnRename_Stub(This: ?*IAdviseSink, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_OnSave_Proxy(This: ?*IAdviseSink) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnSave_Stub(This: ?*IAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_OnViewChange_Proxy(This: ?*IAdviseSink, dwAspect: DWORD, lindex: LONG) void;
pub extern "ole32" stdcallcc fn IAdviseSink_OnViewChange_Stub(This: ?*IAdviseSink, dwAspect: DWORD, lindex: LONG) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnClose_Proxy(This: ?*IAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnClose_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnDataChange_Proxy(This: ?*IAdviseSink, pFormatetc: ?*FORMATETC, pStgmed: ?*ASYNC_STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnDataChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnRename_Proxy(This: ?*IAdviseSink, pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnRename_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnSave_Proxy(This: ?*IAdviseSink) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnSave_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnViewChange_Proxy(This: ?*IAdviseSink, dwAspect: DWORD, lindex: LONG) HRESULT;
pub extern "ole32" stdcallcc fn IAdviseSink_RemoteOnViewChange_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindCtx_GetBindOptions_Proxy(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS) HRESULT;
pub extern "ole32" stdcallcc fn IBindCtx_GetBindOptions_Stub(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS2) HRESULT;
pub extern "ole32" stdcallcc fn IBindCtx_RemoteGetBindOptions_Proxy(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS2) HRESULT;
pub extern "ole32" stdcallcc fn IBindCtx_RemoteGetBindOptions_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindCtx_RemoteSetBindOptions_Proxy(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS2) HRESULT;
pub extern "ole32" stdcallcc fn IBindCtx_RemoteSetBindOptions_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindCtx_SetBindOptions_Proxy(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS) HRESULT;
pub extern "ole32" stdcallcc fn IBindCtx_SetBindOptions_Stub(This: ?*IBindCtx, pbindopts: ?*BIND_OPTS2) HRESULT;
pub extern "ole32" stdcallcc fn IBindHost_RemoteMonikerBindToObject_Proxy(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IBindHost_RemoteMonikerBindToObject_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindHost_RemoteMonikerBindToStorage_Proxy(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IBindHost_RemoteMonikerBindToStorage_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(This: ?*IBindStatusCallbackEx, grfBINDF: ?*DWORD, pbindinfo: ?*RemBINDINFO, pstgmed: ?*RemSTGMEDIUM, grfBINDF2: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindStatusCallback_RemoteGetBindInfo_Proxy(This: ?*IBindStatusCallback, grfBINDF: ?*DWORD, pbindinfo: ?*RemBINDINFO, pstgmed: ?*RemSTGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IBindStatusCallback_RemoteGetBindInfo_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBindStatusCallback_RemoteOnDataAvailable_Proxy(This: ?*IBindStatusCallback, grfBSCF: DWORD, dwSize: DWORD, pformatetc: ?*RemFORMATETC, pstgmed: ?*RemSTGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IBindStatusCallback_RemoteOnDataAvailable_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IBinding_RemoteGetBindResult_Proxy(This: ?*IBinding, pclsidProtocol: ?*CLSID, pdwResult: ?*DWORD, pszResult: ?*LPOLESTR, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IBinding_RemoteGetBindResult_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IDataObject_GetDataHere_Proxy(This: ?*IDataObject, pformatetc: ?*FORMATETC, pmedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_GetDataHere_Stub(This: ?*IDataObject, pformatetc: ?*FORMATETC, pRemoteMedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_GetData_Proxy(This: ?*IDataObject, pformatetcIn: ?*FORMATETC, pmedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_GetData_Stub(This: ?*IDataObject, pformatetcIn: ?*FORMATETC, pRemoteMedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_RemoteGetDataHere_Proxy(This: ?*IDataObject, pformatetc: ?*FORMATETC, pRemoteMedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_RemoteGetDataHere_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IDataObject_RemoteGetData_Proxy(This: ?*IDataObject, pformatetcIn: ?*FORMATETC, pRemoteMedium: ?*STGMEDIUM) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_RemoteGetData_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IDataObject_RemoteSetData_Proxy(This: ?*IDataObject, pformatetc: ?*FORMATETC, pmedium: ?*FLAG_STGMEDIUM, fRelease: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_RemoteSetData_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IDataObject_SetData_Proxy(This: ?*IDataObject, pformatetc: ?*FORMATETC, pmedium: ?*STGMEDIUM, fRelease: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IDataObject_SetData_Stub(This: ?*IDataObject, pformatetc: ?*FORMATETC, pmedium: ?*FLAG_STGMEDIUM, fRelease: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IDispatch_Invoke_Proxy(This: ?*IDispatch, dispIdMember: DISPID, riid: ?*const IID, lcid: LCID, wFlags: WORD, pDispParams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pExcepInfo: ?*EXCEPINFO, puArgErr: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn IDispatch_Invoke_Stub(This: ?*IDispatch, dispIdMember: DISPID, riid: ?*const IID, lcid: LCID, dwFlags: DWORD, pDispParams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pExcepInfo: ?*EXCEPINFO, pArgErr: ?*UINT, cVarRef: UINT, rgVarRefIdx: ?*UINT, rgVarRef: ?*VARIANTARG) HRESULT;
pub extern "ole32" stdcallcc fn IDispatch_RemoteInvoke_Proxy(This: ?*IDispatch, dispIdMember: DISPID, riid: ?*const IID, lcid: LCID, dwFlags: DWORD, pDispParams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pExcepInfo: ?*EXCEPINFO, pArgErr: ?*UINT, cVarRef: UINT, rgVarRefIdx: ?*UINT, rgVarRef: ?*VARIANTARG) HRESULT;
pub extern "ole32" stdcallcc fn IDispatch_RemoteInvoke_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEInstallScope(pdwScope: LPDWORD) HRESULT;
pub extern "ole32" stdcallcc fn IEnumFORMATETC_Next_Proxy(This: ?*IEnumFORMATETC, celt: ULONG, rgelt: ?*FORMATETC, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumFORMATETC_Next_Stub(This: ?*IEnumFORMATETC, celt: ULONG, rgelt: ?*FORMATETC, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumFORMATETC_RemoteNext_Proxy(This: ?*IEnumFORMATETC, celt: ULONG, rgelt: ?*FORMATETC, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumFORMATETC_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumMoniker_Next_Proxy(This: ?*IEnumMoniker, celt: ULONG, rgelt: ?*(?*IMoniker), pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumMoniker_Next_Stub(This: ?*IEnumMoniker, celt: ULONG, rgelt: ?*(?*IMoniker), pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumMoniker_RemoteNext_Proxy(This: ?*IEnumMoniker, celt: ULONG, rgelt: ?*(?*IMoniker), pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumMoniker_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumOLEVERB_Next_Proxy(This: ?*IEnumOLEVERB, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumOLEVERB_Next_Stub(This: ?*IEnumOLEVERB, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumOLEVERB_RemoteNext_Proxy(This: ?*IEnumOLEVERB, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumOLEVERB_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumSTATDATA_Next_Proxy(This: ?*IEnumSTATDATA, celt: ULONG, rgelt: ?*STATDATA, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATDATA_Next_Stub(This: ?*IEnumSTATDATA, celt: ULONG, rgelt: ?*STATDATA, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATDATA_RemoteNext_Proxy(This: ?*IEnumSTATDATA, celt: ULONG, rgelt: ?*STATDATA, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATDATA_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSETSTG_Next_Proxy(This: ?*IEnumSTATPROPSETSTG, celt: ULONG, rgelt: ?*STATPROPSETSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSETSTG_Next_Stub(This: ?*IEnumSTATPROPSETSTG, celt: ULONG, rgelt: ?*STATPROPSETSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSETSTG_RemoteNext_Proxy(This: ?*IEnumSTATPROPSETSTG, celt: ULONG, rgelt: ?*STATPROPSETSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSETSTG_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSTG_Next_Proxy(This: ?*IEnumSTATPROPSTG, celt: ULONG, rgelt: ?*STATPROPSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSTG_Next_Stub(This: ?*IEnumSTATPROPSTG, celt: ULONG, rgelt: ?*STATPROPSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSTG_RemoteNext_Proxy(This: ?*IEnumSTATPROPSTG, celt: ULONG, rgelt: ?*STATPROPSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATPROPSTG_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumSTATSTG_Next_Proxy(This: ?*IEnumSTATSTG, celt: ULONG, rgelt: ?*STATSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATSTG_Next_Stub(This: ?*IEnumSTATSTG, celt: ULONG, rgelt: ?*STATSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATSTG_RemoteNext_Proxy(This: ?*IEnumSTATSTG, celt: ULONG, rgelt: ?*STATSTG, pceltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumSTATSTG_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IEnumVARIANT_Next_Proxy(This: ?*IEnumVARIANT, celt: ULONG, rgVar: ?*VARIANT, pCeltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumVARIANT_Next_Stub(This: ?*IEnumVARIANT, celt: ULONG, rgVar: ?*VARIANT, pCeltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumVARIANT_RemoteNext_Proxy(This: ?*IEnumVARIANT, celt: ULONG, rgVar: ?*VARIANT, pCeltFetched: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IEnumVARIANT_RemoteNext_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IFillLockBytes_FillAppend_Proxy(This: ?*IFillLockBytes, pv: ?*const c_void, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_FillAppend_Stub(This: ?*IFillLockBytes, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_FillAt_Proxy(This: ?*IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const c_void, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_FillAt_Stub(This: ?*IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_RemoteFillAppend_Proxy(This: ?*IFillLockBytes, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_RemoteFillAppend_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IFillLockBytes_RemoteFillAt_Proxy(This: ?*IFillLockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IFillLockBytes_RemoteFillAt_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IIDFromString(lpsz: LPCOLESTR, lpiid: LPIID) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_ReadAt_Proxy(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*c_void, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_ReadAt_Stub(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*byte, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_RemoteReadAt_Proxy(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*byte, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_RemoteReadAt_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ILockBytes_RemoteWriteAt_Proxy(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_RemoteWriteAt_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ILockBytes_WriteAt_Proxy(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const c_void, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ILockBytes_WriteAt_Stub(This: ?*ILockBytes, ulOffset: ULARGE_INTEGER, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_BindToObject_Proxy(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riidResult: ?*const IID, ppvResult: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_BindToObject_Stub(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riidResult: ?*const IID, ppvResult: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_BindToStorage_Proxy(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riid: ?*const IID, ppvObj: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_BindToStorage_Stub(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_RemoteBindToObject_Proxy(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riidResult: ?*const IID, ppvResult: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_RemoteBindToObject_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IMoniker_RemoteBindToStorage_Proxy(This: ?*IMoniker, pbc: ?*IBindCtx, pmkToLeft: ?*IMoniker, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IMoniker_RemoteBindToStorage_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IOleCache2_RemoteUpdateCache_Proxy(This: ?*IOleCache2, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR) HRESULT;
pub extern "ole32" stdcallcc fn IOleCache2_RemoteUpdateCache_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IOleCache2_UpdateCache_Proxy(This: ?*IOleCache2, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LPVOID) HRESULT;
pub extern "ole32" stdcallcc fn IOleCache2_UpdateCache_Stub(This: ?*IOleCache2, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(This: ?*IOleInPlaceActiveObject, prcBorder: LPCRECT, riid: ?*const IID, pUIWindow: ?*IOleInPlaceUIWindow, fFrameWindow: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_RemoteResizeBorder_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(This: ?*IOleInPlaceActiveObject) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_ResizeBorder_Proxy(This: ?*IOleInPlaceActiveObject, prcBorder: LPCRECT, pUIWindow: ?*IOleInPlaceUIWindow, fFrameWindow: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_ResizeBorder_Stub(This: ?*IOleInPlaceActiveObject, prcBorder: LPCRECT, riid: ?*const IID, pUIWindow: ?*IOleInPlaceUIWindow, fFrameWindow: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_TranslateAccelerator_Proxy(This: ?*IOleInPlaceActiveObject, lpmsg: LPMSG) HRESULT;
pub extern "ole32" stdcallcc fn IOleInPlaceActiveObject_TranslateAccelerator_Stub(This: ?*IOleInPlaceActiveObject) HRESULT;
pub extern "ole32" stdcallcc fn IPropertyBag_Read_Proxy(This: ?*IPropertyBag, pszPropName: LPCOLESTR, pVar: ?*VARIANT, pErrorLog: ?*IErrorLog) HRESULT;
pub extern "ole32" stdcallcc fn IPropertyBag_Read_Stub(This: ?*IPropertyBag, pszPropName: LPCOLESTR, pVar: ?*VARIANT, pErrorLog: ?*IErrorLog, varType: DWORD, pUnkObj: ?*IUnknown) HRESULT;
pub extern "ole32" stdcallcc fn IPropertyBag_RemoteRead_Proxy(This: ?*IPropertyBag, pszPropName: LPCOLESTR, pVar: ?*VARIANT, pErrorLog: ?*IErrorLog, varType: DWORD, pUnkObj: ?*IUnknown) HRESULT;
pub extern "ole32" stdcallcc fn IPropertyBag_RemoteRead_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IRunnableObject_IsRunning_Proxy(This: ?*IRunnableObject) BOOL;
pub extern "ole32" stdcallcc fn IRunnableObject_IsRunning_Stub(This: ?*IRunnableObject) HRESULT;
pub extern "ole32" stdcallcc fn IRunnableObject_RemoteIsRunning_Proxy(This: ?*IRunnableObject) HRESULT;
pub extern "ole32" stdcallcc fn IRunnableObject_RemoteIsRunning_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IServiceProvider_QueryService_Proxy(This: ?*IServiceProvider, guidService: ?*const GUID, riid: ?*const IID, ppvObject: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn IServiceProvider_QueryService_Stub(This: ?*IServiceProvider, guidService: ?*const GUID, riid: ?*const IID, ppvObject: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IServiceProvider_RemoteQueryService_Proxy(This: ?*IServiceProvider, guidService: ?*const GUID, riid: ?*const IID, ppvObject: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn IServiceProvider_RemoteQueryService_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IStorage_CopyTo_Proxy(This: ?*IStorage, ciidExclude: DWORD, rgiidExclude: ?*const IID, snbExclude: SNB, pstgDest: ?*IStorage) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_CopyTo_Stub(This: ?*IStorage, ciidExclude: DWORD, rgiidExclude: ?*const IID, snbExclude: SNB, pstgDest: ?*IStorage) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_EnumElements_Proxy(This: ?*IStorage, reserved1: DWORD, reserved2: ?*c_void, reserved3: DWORD, ppenum: ?*(?*IEnumSTATSTG)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_EnumElements_Stub(This: ?*IStorage, reserved1: DWORD, cbReserved2: ULONG, reserved2: ?*byte, reserved3: DWORD, ppenum: ?*(?*IEnumSTATSTG)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_OpenStream_Proxy(This: ?*IStorage, pwcsName: ?*const OLECHAR, reserved1: ?*c_void, grfMode: DWORD, reserved2: DWORD, ppstm: ?*(?*IStream)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_OpenStream_Stub(This: ?*IStorage, pwcsName: ?*const OLECHAR, cbReserved1: ULONG, reserved1: ?*byte, grfMode: DWORD, reserved2: DWORD, ppstm: ?*(?*IStream)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_RemoteCopyTo_Proxy(This: ?*IStorage, ciidExclude: DWORD, rgiidExclude: ?*const IID, snbExclude: SNB, pstgDest: ?*IStorage) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_RemoteCopyTo_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IStorage_RemoteEnumElements_Proxy(This: ?*IStorage, reserved1: DWORD, cbReserved2: ULONG, reserved2: ?*byte, reserved3: DWORD, ppenum: ?*(?*IEnumSTATSTG)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_RemoteEnumElements_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IStorage_RemoteOpenStream_Proxy(This: ?*IStorage, pwcsName: ?*const OLECHAR, cbReserved1: ULONG, reserved1: ?*byte, grfMode: DWORD, reserved2: DWORD, ppstm: ?*(?*IStream)) HRESULT;
pub extern "ole32" stdcallcc fn IStorage_RemoteOpenStream_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeComp_BindType_Proxy(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo), ppTComp: ?*(?*ITypeComp)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_BindType_Stub(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_Bind_Proxy(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ?*(?*ITypeInfo), pDescKind: ?*DESCKIND, pBindPtr: ?*BINDPTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_Bind_Stub(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ?*(?*ITypeInfo), pDescKind: ?*DESCKIND, ppFuncDesc: ?*LPFUNCDESC, ppVarDesc: ?*LPVARDESC, ppTypeComp: ?*(?*ITypeComp), pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_RemoteBindType_Proxy(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_RemoteBindType_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeComp_RemoteBind_Proxy(This: ?*ITypeComp, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ?*(?*ITypeInfo), pDescKind: ?*DESCKIND, ppFuncDesc: ?*LPFUNCDESC, ppVarDesc: ?*LPVARDESC, ppTypeComp: ?*(?*ITypeComp), pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeComp_RemoteBind_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo2_GetDocumentation2_Proxy(This: ?*ITypeInfo2, memid: MEMBERID, lcid: LCID, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo2_GetDocumentation2_Stub(This: ?*ITypeInfo2, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo2_RemoteGetDocumentation2_Proxy(This: ?*ITypeInfo2, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo2_RemoteGetDocumentation2_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_AddressOfMember_Proxy(This: ?*ITypeInfo, memid: MEMBERID, invKind: INVOKEKIND, ppv: ?*PVOID) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_AddressOfMember_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_CreateInstance_Proxy(This: ?*ITypeInfo, pUnkOuter: ?*IUnknown, riid: ?*const IID, ppvObj: ?*PVOID) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_CreateInstance_Stub(This: ?*ITypeInfo, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetContainingTypeLib_Proxy(This: ?*ITypeInfo, ppTLib: ?*(?*ITypeLib), pIndex: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetContainingTypeLib_Stub(This: ?*ITypeInfo, ppTLib: ?*(?*ITypeLib), pIndex: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetDllEntry_Proxy(This: ?*ITypeInfo, memid: MEMBERID, invKind: INVOKEKIND, pBstrDllName: ?*BSTR, pBstrName: ?*BSTR, pwOrdinal: ?*WORD) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetDllEntry_Stub(This: ?*ITypeInfo, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: ?*BSTR, pBstrName: ?*BSTR, pwOrdinal: ?*WORD) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetDocumentation_Proxy(This: ?*ITypeInfo, memid: MEMBERID, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetDocumentation_Stub(This: ?*ITypeInfo, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetFuncDesc_Proxy(This: ?*ITypeInfo, index: UINT, ppFuncDesc: ?*(?*FUNCDESC)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetFuncDesc_Stub(This: ?*ITypeInfo, index: UINT, ppFuncDesc: ?*LPFUNCDESC, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetIDsOfNames_Proxy(This: ?*ITypeInfo, rgszNames: ?*LPOLESTR, cNames: UINT, pMemId: ?*MEMBERID) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetIDsOfNames_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetNames_Proxy(This: ?*ITypeInfo, memid: MEMBERID, rgBstrNames: ?*BSTR, cMaxNames: UINT, pcNames: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetNames_Stub(This: ?*ITypeInfo, memid: MEMBERID, rgBstrNames: ?*BSTR, cMaxNames: UINT, pcNames: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetTypeAttr_Proxy(This: ?*ITypeInfo, ppTypeAttr: ?*(?*TYPEATTR)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetTypeAttr_Stub(This: ?*ITypeInfo, ppTypeAttr: ?*LPTYPEATTR, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetVarDesc_Proxy(This: ?*ITypeInfo, index: UINT, ppVarDesc: ?*(?*VARDESC)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_GetVarDesc_Stub(This: ?*ITypeInfo, index: UINT, ppVarDesc: ?*LPVARDESC, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_Invoke_Proxy(This: ?*ITypeInfo, pvInstance: PVOID, memid: MEMBERID, wFlags: WORD, pDispParams: ?*DISPPARAMS, pVarResult: ?*VARIANT, pExcepInfo: ?*EXCEPINFO, puArgErr: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_Invoke_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalAddressOfMember_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalAddressOfMember_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalGetIDsOfNames_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalGetIDsOfNames_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalInvoke_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalInvoke_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseFuncDesc_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseFuncDesc_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseTypeAttr_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseTypeAttr_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseVarDesc_Proxy(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_LocalReleaseVarDesc_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseFuncDesc_Proxy(This: ?*ITypeInfo, pFuncDesc: ?*FUNCDESC) void;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseFuncDesc_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseTypeAttr_Proxy(This: ?*ITypeInfo, pTypeAttr: ?*TYPEATTR) void;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseTypeAttr_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseVarDesc_Proxy(This: ?*ITypeInfo, pVarDesc: ?*VARDESC) void;
pub extern "ole32" stdcallcc fn ITypeInfo_ReleaseVarDesc_Stub(This: ?*ITypeInfo) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteCreateInstance_Proxy(This: ?*ITypeInfo, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteCreateInstance_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetContainingTypeLib_Proxy(This: ?*ITypeInfo, ppTLib: ?*(?*ITypeLib), pIndex: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetContainingTypeLib_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetDllEntry_Proxy(This: ?*ITypeInfo, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: ?*BSTR, pBstrName: ?*BSTR, pwOrdinal: ?*WORD) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetDllEntry_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetDocumentation_Proxy(This: ?*ITypeInfo, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetDocumentation_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetFuncDesc_Proxy(This: ?*ITypeInfo, index: UINT, ppFuncDesc: ?*LPFUNCDESC, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetFuncDesc_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetNames_Proxy(This: ?*ITypeInfo, memid: MEMBERID, rgBstrNames: ?*BSTR, cMaxNames: UINT, pcNames: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetNames_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetTypeAttr_Proxy(This: ?*ITypeInfo, ppTypeAttr: ?*LPTYPEATTR, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetTypeAttr_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetVarDesc_Proxy(This: ?*ITypeInfo, index: UINT, ppVarDesc: ?*LPVARDESC, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeInfo_RemoteGetVarDesc_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib2_GetDocumentation2_Proxy(This: ?*ITypeLib2, index: INT, lcid: LCID, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_GetDocumentation2_Stub(This: ?*ITypeLib2, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_GetLibStatistics_Proxy(This: ?*ITypeLib2, pcUniqueNames: ?*ULONG, pcchUniqueNames: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_GetLibStatistics_Stub(This: ?*ITypeLib2, pcUniqueNames: ?*ULONG, pcchUniqueNames: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_RemoteGetDocumentation2_Proxy(This: ?*ITypeLib2, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: ?*BSTR, pdwHelpStringContext: ?*DWORD, pbstrHelpStringDll: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_RemoteGetDocumentation2_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib2_RemoteGetLibStatistics_Proxy(This: ?*ITypeLib2, pcUniqueNames: ?*ULONG, pcchUniqueNames: ?*ULONG) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib2_RemoteGetLibStatistics_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_FindName_Proxy(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo), rgMemId: ?*MEMBERID, pcFound: ?*USHORT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_FindName_Stub(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo), rgMemId: ?*MEMBERID, pcFound: ?*USHORT, pBstrLibName: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_GetDocumentation_Proxy(This: ?*ITypeLib, index: INT, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_GetDocumentation_Stub(This: ?*ITypeLib, index: INT, refPtrFlags: DWORD, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_GetLibAttr_Proxy(This: ?*ITypeLib, ppTLibAttr: ?*(?*TLIBATTR)) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_GetLibAttr_Stub(This: ?*ITypeLib, ppTLibAttr: ?*LPTLIBATTR, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_GetTypeInfoCount_Proxy(This: ?*ITypeLib) UINT;
pub extern "ole32" stdcallcc fn ITypeLib_GetTypeInfoCount_Stub(This: ?*ITypeLib, pcTInfo: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_IsName_Proxy(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: ?*BOOL) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_IsName_Stub(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: ?*BOOL, pBstrLibName: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_LocalReleaseTLibAttr_Proxy(This: ?*ITypeLib) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_LocalReleaseTLibAttr_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_ReleaseTLibAttr_Proxy(This: ?*ITypeLib, pTLibAttr: ?*TLIBATTR) void;
pub extern "ole32" stdcallcc fn ITypeLib_ReleaseTLibAttr_Stub(This: ?*ITypeLib) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteFindName_Proxy(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ?*(?*ITypeInfo), rgMemId: ?*MEMBERID, pcFound: ?*USHORT, pBstrLibName: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteFindName_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetDocumentation_Proxy(This: ?*ITypeLib, index: INT, refPtrFlags: DWORD, pBstrName: ?*BSTR, pBstrDocString: ?*BSTR, pdwHelpContext: ?*DWORD, pBstrHelpFile: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetDocumentation_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetLibAttr_Proxy(This: ?*ITypeLib, ppTLibAttr: ?*LPTLIBATTR, pDummy: ?*CLEANLOCALSTORAGE) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetLibAttr_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetTypeInfoCount_Proxy(This: ?*ITypeLib, pcTInfo: ?*UINT) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteGetTypeInfoCount_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteIsName_Proxy(This: ?*ITypeLib, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: ?*BOOL, pBstrLibName: ?*BSTR) HRESULT;
pub extern "ole32" stdcallcc fn ITypeLib_RemoteIsName_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IViewObject_Draw_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ?*c_void, ptd: ?*DVTARGETDEVICE, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pfnContinue: ?extern fn(ULONG_PTR) BOOL, dwContinue: ULONG_PTR) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_Draw_Stub(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: ?*DVTARGETDEVICE, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: ?*IContinue) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_Freeze_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ?*c_void, pdwFreeze: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_Freeze_Stub(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_GetAdvise_Proxy(This: ?*IViewObject, pAspects: ?*DWORD, pAdvf: ?*DWORD, ppAdvSink: ?*(?*IAdviseSink)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_GetAdvise_Stub(This: ?*IViewObject, pAspects: ?*DWORD, pAdvf: ?*DWORD, ppAdvSink: ?*(?*IAdviseSink)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_GetColorSet_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ?*c_void, ptd: ?*DVTARGETDEVICE, hicTargetDev: HDC, ppColorSet: ?*(?*LOGPALETTE)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_GetColorSet_Stub(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: ?*DVTARGETDEVICE, hicTargetDev: ULONG_PTR, ppColorSet: ?*(?*LOGPALETTE)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_RemoteDraw_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: ?*DVTARGETDEVICE, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: ?*IContinue) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_RemoteDraw_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IViewObject_RemoteFreeze_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_RemoteFreeze_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IViewObject_RemoteGetAdvise_Proxy(This: ?*IViewObject, pAspects: ?*DWORD, pAdvf: ?*DWORD, ppAdvSink: ?*(?*IAdviseSink)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_RemoteGetAdvise_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IViewObject_RemoteGetColorSet_Proxy(This: ?*IViewObject, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: ?*DVTARGETDEVICE, hicTargetDev: ULONG_PTR, ppColorSet: ?*(?*LOGPALETTE)) HRESULT;
pub extern "ole32" stdcallcc fn IViewObject_RemoteGetColorSet_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IWinInetHttpInfo_RemoteQueryInfo_Proxy(This: ?*IWinInetHttpInfo, dwOption: DWORD, pBuffer: ?*BYTE, pcbBuf: ?*DWORD, pdwFlags: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IWinInetHttpInfo_RemoteQueryInfo_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IWinInetInfo_RemoteQueryOption_Proxy(This: ?*IWinInetInfo, dwOption: DWORD, pBuffer: ?*BYTE, pcbBuf: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn IWinInetInfo_RemoteQueryOption_Stub(This: ?*IRpcStubBuffer, _pRpcChannelBuffer: ?*IRpcChannelBuffer, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: ?*DWORD) void;
pub extern "ole32" stdcallcc fn IsAsyncMoniker(pmk: ?*IMoniker) HRESULT;
pub extern "ole32" stdcallcc fn IsValidURL(pBC: LPBC, szURL: LPCWSTR, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserFree(arg0: ?*c_ulong, arg1: ?*LPSAFEARRAY) void;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserFree64(arg0: ?*c_ulong, arg1: ?*LPSAFEARRAY) void;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*LPSAFEARRAY) ?[*]u8;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*LPSAFEARRAY) ?[*]u8;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*LPSAFEARRAY) c_ulong;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*LPSAFEARRAY) c_ulong;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*LPSAFEARRAY) ?[*]u8;
pub extern "ole32" stdcallcc fn LPSAFEARRAY_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*LPSAFEARRAY) ?[*]u8;
pub extern "ole32" stdcallcc fn MkParseDisplayName(pbc: LPBC, szUserName: LPCOLESTR, pchEaten: ?*ULONG, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn MkParseDisplayNameEx(pbc: ?*IBindCtx, szDisplayName: LPCWSTR, pchEaten: ?*ULONG, ppmk: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn MonikerCommonPrefixWith(pmkThis: LPMONIKER, pmkOther: LPMONIKER, ppmkCommon: ?*LPMONIKER) HRESULT;
pub extern "ole32" stdcallcc fn MonikerRelativePathTo(pmkSrc: LPMONIKER, pmkDest: LPMONIKER, ppmkRelPath: ?*LPMONIKER, dwReserved: BOOL) HRESULT;
pub extern "ole32" stdcallcc fn ObtainUserAgentString(dwOption: DWORD, pszUAOut: LPSTR, cbSize: ?*DWORD) HRESULT;
pub extern "ole32" stdcallcc fn ProgIDFromCLSID(clsid: ?*const IID, lplpszProgID: ?*LPOLESTR) HRESULT;
pub extern "ole32" stdcallcc fn PropStgNameToFmtId(oszName: LPOLESTR, pfmtid: ?*FMTID) HRESULT;
pub extern "ole32" stdcallcc fn PropVariantClear(pvar: ?*PROPVARIANT) HRESULT;
pub extern "ole32" stdcallcc fn PropVariantCopy(pvarDest: ?*PROPVARIANT, pvarSrc: ?*const PROPVARIANT) HRESULT;
pub extern "ole32" stdcallcc fn ReadClassStg(pStg: LPSTORAGE, pclsid: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn ReadClassStm(pStm: LPSTREAM, pclsid: ?*CLSID) HRESULT;
pub extern "ole32" stdcallcc fn RegisterBindStatusCallback(pBC: LPBC, pBSCb: ?*IBindStatusCallback, ppBSCBPrev: ?*(?*IBindStatusCallback), dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn RegisterFormatEnumerator(pBC: LPBC, pEFetc: ?*IEnumFORMATETC, reserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn RegisterMediaTypeClass(pBC: LPBC, ctypes: UINT, rgszTypes: ?*const LPCSTR, rgclsID: ?*CLSID, reserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn RegisterMediaTypes(ctypes: UINT, rgszTypes: ?*const LPCSTR, rgcfTypes: ?*CLIPFORMAT) HRESULT;
pub extern "ole32" stdcallcc fn RevokeBindStatusCallback(pBC: LPBC, pBSCb: ?*IBindStatusCallback) HRESULT;
pub extern "ole32" stdcallcc fn RevokeFormatEnumerator(pBC: LPBC, pEFetc: ?*IEnumFORMATETC) HRESULT;
pub extern "ole32" stdcallcc fn RoGetAgileReference(options: enum_AgileReferenceOptions, riid: ?*const IID, pUnk: ?*IUnknown, ppAgileReference: ?*(?*IAgileReference)) HRESULT;
pub extern "ole32" stdcallcc fn SNB_UserFree(arg0: ?*c_ulong, arg1: ?*SNB) void;
pub extern "ole32" stdcallcc fn SNB_UserFree64(arg0: ?*c_ulong, arg1: ?*SNB) void;
pub extern "ole32" stdcallcc fn SNB_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*SNB) ?[*]u8;
pub extern "ole32" stdcallcc fn SNB_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*SNB) ?[*]u8;
pub extern "ole32" stdcallcc fn SNB_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*SNB) c_ulong;
pub extern "ole32" stdcallcc fn SNB_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*SNB) c_ulong;
pub extern "ole32" stdcallcc fn SNB_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*SNB) ?[*]u8;
pub extern "ole32" stdcallcc fn SNB_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*SNB) ?[*]u8;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserFree(arg0: ?*c_ulong, arg1: ?*STGMEDIUM) void;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserFree64(arg0: ?*c_ulong, arg1: ?*STGMEDIUM) void;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*STGMEDIUM) c_ulong;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn STGMEDIUM_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*STGMEDIUM) ?[*]u8;
pub extern "ole32" stdcallcc fn SetAccessForIEAppContainer(hObject: HANDLE, ieObjectType: IEObjectType, dwAccessMask: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn StgConvertVariantToProperty(pvar: ?*const PROPVARIANT, CodePage: USHORT, pprop: ?*SERIALIZEDPROPERTYVALUE, pcb: ?*ULONG, pid: PROPID, fReserved: BOOLEAN, pcIndirect: ?*ULONG) ?*SERIALIZEDPROPERTYVALUE;
pub extern "ole32" stdcallcc fn StgCreateDocfile(pwcsName: ?*const WCHAR, grfMode: DWORD, reserved: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgCreateDocfileOnILockBytes(plkbyt: ?*ILockBytes, grfMode: DWORD, reserved: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgCreatePropSetStg(pStorage: ?*IStorage, dwReserved: DWORD, ppPropSetStg: ?*(?*IPropertySetStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgCreatePropStg(pUnk: ?*IUnknown, fmtid: ?*const IID, pclsid: ?*const CLSID, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: ?*(?*IPropertyStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgCreateStorageEx(pwcsName: ?*const WCHAR, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: ?*STGOPTIONS, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: ?*const IID, ppObjectOpen: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn StgGetIFillLockBytesOnFile(pwcsName: ?*const OLECHAR, ppflb: ?*(?*IFillLockBytes)) HRESULT;
pub extern "ole32" stdcallcc fn StgGetIFillLockBytesOnILockBytes(pilb: ?*ILockBytes, ppflb: ?*(?*IFillLockBytes)) HRESULT;
pub extern "ole32" stdcallcc fn StgIsStorageFile(pwcsName: ?*const WCHAR) HRESULT;
pub extern "ole32" stdcallcc fn StgIsStorageILockBytes(plkbyt: ?*ILockBytes) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenAsyncDocfileOnIFillLockBytes(pflb: ?*IFillLockBytes, grfMode: DWORD, asyncFlags: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenLayoutDocfile(pwcsDfName: ?*const OLECHAR, grfMode: DWORD, reserved: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenPropStg(pUnk: ?*IUnknown, fmtid: ?*const IID, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: ?*(?*IPropertyStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenStorage(pwcsName: ?*const WCHAR, pstgPriority: ?*IStorage, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenStorageEx(pwcsName: ?*const WCHAR, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: ?*STGOPTIONS, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: ?*const IID, ppObjectOpen: ?*(?*c_void)) HRESULT;
pub extern "ole32" stdcallcc fn StgOpenStorageOnILockBytes(plkbyt: ?*ILockBytes, pstgPriority: ?*IStorage, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: ?*(?*IStorage)) HRESULT;
pub extern "ole32" stdcallcc fn StgSetTimes(lpszName: ?*const WCHAR, pctime: ?*const FILETIME, patime: ?*const FILETIME, pmtime: ?*const FILETIME) HRESULT;
pub extern "ole32" stdcallcc fn StringFromCLSID(rclsid: ?*const IID, lplpsz: ?*LPOLESTR) HRESULT;
pub extern "ole32" stdcallcc fn StringFromGUID2(rguid: ?*const GUID, lpsz: LPOLESTR, cchMax: c_int) c_int;
pub extern "ole32" stdcallcc fn StringFromIID(rclsid: ?*const IID, lplpsz: ?*LPOLESTR) HRESULT;
pub extern "ole32" stdcallcc fn UrlMkGetSessionOption(dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, pdwBufferLengthOut: ?*DWORD, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn UrlMkSetSessionOption(dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, dwReserved: DWORD) HRESULT;
pub extern "ole32" stdcallcc fn VARIANT_UserFree(arg0: ?*c_ulong, arg1: ?*VARIANT) void;
pub extern "ole32" stdcallcc fn VARIANT_UserFree64(arg0: ?*c_ulong, arg1: ?*VARIANT) void;
pub extern "ole32" stdcallcc fn VARIANT_UserMarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*VARIANT) ?[*]u8;
pub extern "ole32" stdcallcc fn VARIANT_UserMarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*VARIANT) ?[*]u8;
pub extern "ole32" stdcallcc fn VARIANT_UserSize(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*VARIANT) c_ulong;
pub extern "ole32" stdcallcc fn VARIANT_UserSize64(arg0: ?*c_ulong, arg1: c_ulong, arg2: ?*VARIANT) c_ulong;
pub extern "ole32" stdcallcc fn VARIANT_UserUnmarshal(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*VARIANT) ?[*]u8;
pub extern "ole32" stdcallcc fn VARIANT_UserUnmarshal64(arg0: ?*c_ulong, arg1: ?[*]u8, arg2: ?*VARIANT) ?[*]u8;
pub extern "ole32" stdcallcc fn WriteClassStg(pStg: LPSTORAGE, rclsid: ?*const IID) HRESULT;
pub extern "ole32" stdcallcc fn WriteClassStm(pStm: LPSTREAM, rclsid: ?*const IID) HRESULT;
pub extern "oleaut32" stdcallcc fn BstrFromVector(psa: ?*SAFEARRAY, pbstr: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn ClearCustData(pCustData: LPCUSTDATA) void;
pub extern "oleaut32" stdcallcc fn CreateDispTypeInfo(pidata: ?*INTERFACEDATA, lcid: LCID, pptinfo: ?*(?*ITypeInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn CreateErrorInfo(pperrinfo: ?*(?*ICreateErrorInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn CreateOleAdviseHolder(ppOAHolder: ?*LPOLEADVISEHOLDER) HRESULT;
pub extern "oleaut32" stdcallcc fn CreateStdDispatch(punkOuter: ?*IUnknown, pvThis: ?*c_void, ptinfo: ?*ITypeInfo, ppunkStdDisp: ?*(?*IUnknown)) HRESULT;
pub extern "oleaut32" stdcallcc fn CreateTypeLib(syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: ?*(?*ICreateTypeLib)) HRESULT;
pub extern "oleaut32" stdcallcc fn CreateTypeLib2(syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: ?*(?*ICreateTypeLib2)) HRESULT;
pub extern "oleaut32" stdcallcc fn DispCallFunc(pvInstance: ?*c_void, oVft: ULONG_PTR, cc: CALLCONV, vtReturn: VARTYPE, cActuals: UINT, prgvt: ?*VARTYPE, prgpvarg: ?*(?*VARIANTARG), pvargResult: ?*VARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn DispGetIDsOfNames(ptinfo: ?*ITypeInfo, rgszNames: ?*(?*OLECHAR), cNames: UINT, rgdispid: ?*DISPID) HRESULT;
pub extern "oleaut32" stdcallcc fn DispGetParam(pdispparams: ?*DISPPARAMS, position: UINT, vtTarg: VARTYPE, pvarResult: ?*VARIANT, puArgErr: ?*UINT) HRESULT;
pub extern "oleaut32" stdcallcc fn DispInvoke(_this: ?*c_void, ptinfo: ?*ITypeInfo, dispidMember: DISPID, wFlags: WORD, pparams: ?*DISPPARAMS, pvarResult: ?*VARIANT, pexcepinfo: ?*EXCEPINFO, puArgErr: ?*UINT) HRESULT;
pub extern "oleaut32" stdcallcc fn DoDragDrop(pDataObj: LPDATAOBJECT, pDropSource: LPDROPSOURCE, dwOKEffects: DWORD, pdwEffect: LPDWORD) HRESULT;
pub extern "oleaut32" stdcallcc fn DosDateTimeToVariantTime(wDosDate: USHORT, wDosTime: USHORT, pvtime: ?*DOUBLE) INT;
pub extern "oleaut32" stdcallcc fn GetActiveObject(rclsid: ?*const IID, pvReserved: ?*c_void, ppunk: ?*(?*IUnknown)) HRESULT;
pub extern "oleaut32" stdcallcc fn GetAltMonthNames(lcid: LCID, prgp: ?*(?*LPOLESTR)) HRESULT;
pub extern "oleaut32" stdcallcc fn GetErrorInfo(dwReserved: ULONG, pperrinfo: ?*(?*IErrorInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn GetRecordInfoFromGuids(rGuidTypeLib: ?*const GUID, uVerMajor: ULONG, uVerMinor: ULONG, lcid: LCID, rGuidTypeInfo: ?*const GUID, ppRecInfo: ?*(?*IRecordInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn GetRecordInfoFromTypeInfo(pTypeInfo: ?*ITypeInfo, ppRecInfo: ?*(?*IRecordInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn IsAccelerator(hAccel: HACCEL, cAccelEntries: c_int, lpMsg: LPMSG, lpwCmd: ?*WORD) BOOL;
pub extern "oleaut32" stdcallcc fn LHashValOfNameSys(syskind: SYSKIND, lcid: LCID, szName: ?*const OLECHAR) ULONG;
pub extern "oleaut32" stdcallcc fn LHashValOfNameSysA(syskind: SYSKIND, lcid: LCID, szName: LPCSTR) ULONG;
pub extern "oleaut32" stdcallcc fn LoadRegTypeLib(rguid: ?*const GUID, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, pptlib: ?*(?*ITypeLib)) HRESULT;
pub extern "oleaut32" stdcallcc fn LoadTypeLib(szFile: LPCOLESTR, pptlib: ?*(?*ITypeLib)) HRESULT;
pub extern "oleaut32" stdcallcc fn LoadTypeLibEx(szFile: LPCOLESTR, regkind: REGKIND, pptlib: ?*(?*ITypeLib)) HRESULT;
pub extern "oleaut32" stdcallcc fn OaBuildVersion() ULONG;
pub extern "oleaut32" stdcallcc fn OaEnablePerUserTLibRegistration() void;
pub extern "oleaut32" stdcallcc fn OleBuildVersion() DWORD;
pub extern "oleaut32" stdcallcc fn OleConvertIStorageToOLESTREAM(pstg: LPSTORAGE, lpolestream: LPOLESTREAM) HRESULT;
pub extern "oleaut32" stdcallcc fn OleConvertIStorageToOLESTREAMEx(pstg: LPSTORAGE, cfFormat: CLIPFORMAT, lWidth: LONG, lHeight: LONG, dwSize: DWORD, pmedium: LPSTGMEDIUM, polestm: LPOLESTREAM) HRESULT;
pub extern "oleaut32" stdcallcc fn OleConvertOLESTREAMToIStorage(lpolestream: LPOLESTREAM, pstg: LPSTORAGE, ptd: ?*const DVTARGETDEVICE) HRESULT;
pub extern "oleaut32" stdcallcc fn OleConvertOLESTREAMToIStorageEx(polestm: LPOLESTREAM, pstg: LPSTORAGE, pcfFormat: ?*CLIPFORMAT, plwWidth: ?*LONG, plHeight: ?*LONG, pdwSize: ?*DWORD, pmedium: LPSTGMEDIUM) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreate(rclsid: ?*const IID, riid: ?*const IID, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateDefaultHandler(clsid: ?*const IID, pUnkOuter: LPUNKNOWN, riid: ?*const IID, lplpObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateEmbeddingHelper(clsid: ?*const IID, pUnkOuter: LPUNKNOWN, flags: DWORD, pCF: LPCLASSFACTORY, riid: ?*const IID, lplpObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateEx(rclsid: ?*const IID, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateFromData(pSrcDataObj: LPDATAOBJECT, riid: ?*const IID, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateFromDataEx(pSrcDataObj: LPDATAOBJECT, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateFromFile(rclsid: ?*const IID, lpszFileName: LPCOLESTR, riid: ?*const IID, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateFromFileEx(rclsid: ?*const IID, lpszFileName: LPCOLESTR, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLink(pmkLinkSrc: LPMONIKER, riid: ?*const IID, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLinkEx(pmkLinkSrc: LPMONIKER, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLinkFromData(pSrcDataObj: LPDATAOBJECT, riid: ?*const IID, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLinkFromDataEx(pSrcDataObj: LPDATAOBJECT, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLinkToFile(lpszFileName: LPCOLESTR, riid: ?*const IID, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateLinkToFileEx(lpszFileName: LPCOLESTR, riid: ?*const IID, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: ?*DWORD, rgFormatEtc: LPFORMATETC, lpAdviseSink: ?*IAdviseSink, rgdwConnection: ?*DWORD, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleCreateMenuDescriptor(hmenuCombined: HMENU, lpMenuWidths: LPOLEMENUGROUPWIDTHS) HOLEMENU;
pub extern "oleaut32" stdcallcc fn OleCreateStaticFromData(pSrcDataObj: LPDATAOBJECT, iid: ?*const IID, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleDestroyMenuDescriptor(holemenu: HOLEMENU) HRESULT;
pub extern "oleaut32" stdcallcc fn OleDoAutoConvert(pStg: LPSTORAGE, pClsidNew: LPCLSID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleDraw(pUnknown: LPUNKNOWN, dwAspect: DWORD, hdcDraw: HDC, lprcBounds: LPCRECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleDuplicateData(hSrc: HANDLE, cfFormat: CLIPFORMAT, uiFlags: UINT) HANDLE;
pub extern "oleaut32" stdcallcc fn OleFlushClipboard() HRESULT;
pub extern "oleaut32" stdcallcc fn OleGetAutoConvert(clsidOld: ?*const IID, pClsidNew: LPCLSID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleGetClipboard(ppDataObj: ?*LPDATAOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleGetClipboardWithEnterpriseInfo(dataObject: ?*(?*IDataObject), dataEnterpriseId: ?*PWSTR, sourceDescription: ?*PWSTR, targetDescription: ?*PWSTR, dataDescription: ?*PWSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn OleGetIconOfClass(rclsid: ?*const IID, lpszLabel: LPOLESTR, fUseTypeAsLabel: BOOL) HGLOBAL;
pub extern "oleaut32" stdcallcc fn OleGetIconOfFile(lpszPath: LPOLESTR, fUseFileAsLabel: BOOL) HGLOBAL;
pub extern "oleaut32" stdcallcc fn OleInitialize(pvReserved: LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleIsCurrentClipboard(pDataObj: LPDATAOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleIsRunning(pObject: LPOLEOBJECT) BOOL;
pub extern "oleaut32" stdcallcc fn OleLoad(pStg: LPSTORAGE, riid: ?*const IID, pClientSite: LPOLECLIENTSITE, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleLoadFromStream(pStm: LPSTREAM, iidInterface: ?*const IID, ppvObj: ?*LPVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleLockRunning(pUnknown: LPUNKNOWN, fLock: BOOL, fLastUnlockCloses: BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn OleMetafilePictFromIconAndLabel(hIcon: HICON, lpszLabel: LPOLESTR, lpszSourceFile: LPOLESTR, iIconIndex: UINT) HGLOBAL;
pub extern "oleaut32" stdcallcc fn OleNoteObjectVisible(pUnknown: LPUNKNOWN, fVisible: BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn OleQueryCreateFromData(pSrcDataObject: LPDATAOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleQueryLinkFromData(pSrcDataObject: LPDATAOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleRegEnumFormatEtc(clsid: ?*const IID, dwDirection: DWORD, ppenum: ?*LPENUMFORMATETC) HRESULT;
pub extern "oleaut32" stdcallcc fn OleRegEnumVerbs(clsid: ?*const IID, ppenum: ?*LPENUMOLEVERB) HRESULT;
pub extern "oleaut32" stdcallcc fn OleRegGetMiscStatus(clsid: ?*const IID, dwAspect: DWORD, pdwStatus: ?*DWORD) HRESULT;
pub extern "oleaut32" stdcallcc fn OleRegGetUserType(clsid: ?*const IID, dwFormOfType: DWORD, pszUserType: ?*LPOLESTR) HRESULT;
pub extern "oleaut32" stdcallcc fn OleRun(pUnknown: LPUNKNOWN) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSave(pPS: LPPERSISTSTORAGE, pStg: LPSTORAGE, fSameAsLoad: BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSaveToStream(pPStm: LPPERSISTSTREAM, pStm: LPSTREAM) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSetAutoConvert(clsidOld: ?*const IID, clsidNew: ?*const IID) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSetClipboard(pDataObj: LPDATAOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSetContainedObject(pUnknown: LPUNKNOWN, fContained: BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn OleSetMenuDescriptor(holemenu: HOLEMENU, hwndFrame: HWND, hwndActiveObject: HWND, lpFrame: LPOLEINPLACEFRAME, lpActiveObj: LPOLEINPLACEACTIVEOBJECT) HRESULT;
pub extern "oleaut32" stdcallcc fn OleTranslateAccelerator(lpFrame: LPOLEINPLACEFRAME, lpFrameInfo: LPOLEINPLACEFRAMEINFO, lpmsg: LPMSG) HRESULT;
pub extern "oleaut32" stdcallcc fn OleUninitialize() void;
pub extern "oleaut32" stdcallcc fn QueryPathOfRegTypeLib(guid: ?*const GUID, wMaj: USHORT, wMin: USHORT, lcid: LCID, lpbstrPathName: LPBSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn ReadFmtUserTypeStg(pstg: LPSTORAGE, pcf: ?*CLIPFORMAT, lplpszUserType: ?*LPOLESTR) HRESULT;
pub extern "oleaut32" stdcallcc fn RegisterActiveObject(punk: ?*IUnknown, rclsid: ?*const IID, dwFlags: DWORD, pdwRegister: ?*DWORD) HRESULT;
pub extern "oleaut32" stdcallcc fn RegisterDragDrop(hwnd: HWND, pDropTarget: LPDROPTARGET) HRESULT;
pub extern "oleaut32" stdcallcc fn RegisterTypeLib(ptlib: ?*ITypeLib, szFullPath: LPCOLESTR, szHelpDir: LPCOLESTR) HRESULT;
pub extern "oleaut32" stdcallcc fn RegisterTypeLibForUser(ptlib: ?*ITypeLib, szFullPath: ?*OLECHAR, szHelpDir: ?*OLECHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn ReleaseStgMedium(arg0: LPSTGMEDIUM) void;
pub extern "oleaut32" stdcallcc fn RevokeActiveObject(dwRegister: DWORD, pvReserved: ?*c_void) HRESULT;
pub extern "oleaut32" stdcallcc fn RevokeDragDrop(hwnd: HWND) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayAccessData(psa: ?*SAFEARRAY, ppvData: ?*(?*c_void)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayAddRef(psa: ?*SAFEARRAY, ppDataToRelease: ?*PVOID) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayAllocData(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayAllocDescriptor(cDims: UINT, ppsaOut: ?*(?*SAFEARRAY)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayAllocDescriptorEx(vt: VARTYPE, cDims: UINT, ppsaOut: ?*(?*SAFEARRAY)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayCopy(psa: ?*SAFEARRAY, ppsaOut: ?*(?*SAFEARRAY)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayCopyData(psaSource: ?*SAFEARRAY, psaTarget: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayCreate(vt: VARTYPE, cDims: UINT, rgsabound: ?*SAFEARRAYBOUND) ?*SAFEARRAY;
pub extern "oleaut32" stdcallcc fn SafeArrayCreateEx(vt: VARTYPE, cDims: UINT, rgsabound: ?*SAFEARRAYBOUND, pvExtra: PVOID) ?*SAFEARRAY;
pub extern "oleaut32" stdcallcc fn SafeArrayCreateVector(vt: VARTYPE, lLbound: LONG, cElements: ULONG) ?*SAFEARRAY;
pub extern "oleaut32" stdcallcc fn SafeArrayCreateVectorEx(vt: VARTYPE, lLbound: LONG, cElements: ULONG, pvExtra: PVOID) ?*SAFEARRAY;
pub extern "oleaut32" stdcallcc fn SafeArrayDestroy(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayDestroyData(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayDestroyDescriptor(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetDim(psa: ?*SAFEARRAY) UINT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetElement(psa: ?*SAFEARRAY, rgIndices: ?*LONG, pv: ?*c_void) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetElemsize(psa: ?*SAFEARRAY) UINT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetIID(psa: ?*SAFEARRAY, pguid: ?*GUID) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetLBound(psa: ?*SAFEARRAY, nDim: UINT, plLbound: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetRecordInfo(psa: ?*SAFEARRAY, prinfo: ?*(?*IRecordInfo)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetUBound(psa: ?*SAFEARRAY, nDim: UINT, plUbound: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayGetVartype(psa: ?*SAFEARRAY, pvt: ?*VARTYPE) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayLock(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayPtrOfIndex(psa: ?*SAFEARRAY, rgIndices: ?*LONG, ppvData: ?*(?*c_void)) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayPutElement(psa: ?*SAFEARRAY, rgIndices: ?*LONG, pv: ?*c_void) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayRedim(psa: ?*SAFEARRAY, psaboundNew: ?*SAFEARRAYBOUND) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayReleaseData(pData: PVOID) void;
pub extern "oleaut32" stdcallcc fn SafeArrayReleaseDescriptor(psa: ?*SAFEARRAY) void;
pub extern "oleaut32" stdcallcc fn SafeArraySetIID(psa: ?*SAFEARRAY, guid: ?*const GUID) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArraySetRecordInfo(psa: ?*SAFEARRAY, prinfo: ?*IRecordInfo) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayUnaccessData(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SafeArrayUnlock(psa: ?*SAFEARRAY) HRESULT;
pub extern "oleaut32" stdcallcc fn SetConvertStg(pStg: LPSTORAGE, fConvert: BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn SetErrorInfo(dwReserved: ULONG, perrinfo: ?*IErrorInfo) HRESULT;
pub extern "oleaut32" stdcallcc fn SysAddRefString(bstrString: BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn SysAllocString(psz: ?*const OLECHAR) BSTR;
pub extern "oleaut32" stdcallcc fn SysAllocStringByteLen(psz: LPCSTR, len: UINT) BSTR;
pub extern "oleaut32" stdcallcc fn SysAllocStringLen(strIn: ?*const OLECHAR, ui: UINT) BSTR;
pub extern "oleaut32" stdcallcc fn SysFreeString(bstrString: BSTR) void;
pub extern "oleaut32" stdcallcc fn SysReAllocString(pbstr: ?*BSTR, psz: ?*const OLECHAR) INT;
pub extern "oleaut32" stdcallcc fn SysReAllocStringLen(pbstr: ?*BSTR, psz: ?*const OLECHAR, len: c_uint) INT;
pub extern "oleaut32" stdcallcc fn SysReleaseString(bstrString: BSTR) void;
pub extern "oleaut32" stdcallcc fn SysStringByteLen(bstr: BSTR) UINT;
pub extern "oleaut32" stdcallcc fn SysStringLen(pbstr: BSTR) UINT;
pub extern "oleaut32" stdcallcc fn SystemTimeToVariantTime(lpSystemTime: LPSYSTEMTIME, pvtime: ?*DOUBLE) INT;
pub extern "oleaut32" stdcallcc fn UnRegisterTypeLib(libID: ?*const GUID, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, syskind: SYSKIND) HRESULT;
pub extern "oleaut32" stdcallcc fn UnRegisterTypeLibForUser(libID: ?*const GUID, wMajorVerNum: WORD, wMinorVerNum: WORD, lcid: LCID, syskind: SYSKIND) HRESULT;
pub extern "oleaut32" stdcallcc fn VarAbs(pvarIn: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarAdd(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarAnd(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromCy(cyIn: CY, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromDate(dateIn: DATE, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromDec(pdecIn: ?*const DECIMAL, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromDisp(pdispIn: ?*IDispatch, lcid: LCID, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromI1(cIn: CHAR, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromI2(sIn: SHORT, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromI4(lIn: LONG, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromI8(i64In: LONG64, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromR4(fltIn: FLOAT, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromR8(dblIn: DOUBLE, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromUI1(bIn: BYTE, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromUI2(uiIn: USHORT, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromUI4(ulIn: ULONG, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBoolFromUI8(i64In: ULONG64, pboolOut: ?*VARIANT_BOOL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrCat(bstrLeft: BSTR, bstrRight: BSTR, pbstrResult: LPBSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrCmp(bstrLeft: BSTR, bstrRight: BSTR, lcid: LCID, dwFlags: ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromBool(boolIn: VARIANT_BOOL, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromCy(cyIn: CY, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromDate(dateIn: DATE, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromDec(pdecIn: ?*const DECIMAL, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromDisp(pdispIn: ?*IDispatch, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromI1(cIn: CHAR, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromI2(iVal: SHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromI4(lIn: LONG, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromI8(i64In: LONG64, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromR4(fltIn: FLOAT, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromR8(dblIn: DOUBLE, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromUI1(bVal: BYTE, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromUI2(uiIn: USHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromUI4(ulIn: ULONG, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarBstrFromUI8(ui64In: ULONG64, lcid: LCID, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCat(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCmp(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, lcid: LCID, dwFlags: ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyAbs(cyIn: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyAdd(cyLeft: CY, cyRight: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyCmp(cyLeft: CY, cyRight: CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyCmpR8(cyLeft: CY, dblRight: f64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFix(cyIn: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromBool(boolIn: VARIANT_BOOL, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromDate(dateIn: DATE, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromDec(pdecIn: ?*const DECIMAL, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromDisp(pdispIn: ?*IDispatch, lcid: LCID, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromI1(cIn: CHAR, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromI2(sIn: SHORT, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromI4(lIn: LONG, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromI8(i64In: LONG64, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromR4(fltIn: FLOAT, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromR8(dblIn: DOUBLE, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromUI1(bIn: BYTE, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromUI2(uiIn: USHORT, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromUI4(ulIn: ULONG, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyFromUI8(ui64In: ULONG64, pcyOut: ?*CY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyInt(cyIn: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyMul(cyLeft: CY, cyRight: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyMulI4(cyLeft: CY, lRight: LONG, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyMulI8(cyLeft: CY, lRight: LONG64, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyNeg(cyIn: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCyRound(cyIn: CY, cDecimals: c_int, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarCySub(cyLeft: CY, cyRight: CY, pcyResult: LPCY) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromBool(boolIn: VARIANT_BOOL, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromCy(cyIn: CY, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromDec(pdecIn: ?*const DECIMAL, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromDisp(pdispIn: ?*IDispatch, lcid: LCID, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromI1(cIn: CHAR, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromI2(sIn: SHORT, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromI4(lIn: LONG, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromI8(i64In: LONG64, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromR4(fltIn: FLOAT, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromR8(dblIn: DOUBLE, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUI1(bIn: BYTE, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUI2(uiIn: USHORT, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUI4(ulIn: ULONG, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUI8(ui64In: ULONG64, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUdate(pudateIn: ?*UDATE, dwFlags: ULONG, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDateFromUdateEx(pudateIn: ?*UDATE, lcid: LCID, dwFlags: ULONG, pdateOut: ?*DATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecAbs(pdecIn: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecAdd(pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecCmp(pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecCmpR8(pdecLeft: LPDECIMAL, dblRight: f64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecDiv(pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFix(pdecIn: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromBool(boolIn: VARIANT_BOOL, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromCy(cyIn: CY, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromDate(dateIn: DATE, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromDisp(pdispIn: ?*IDispatch, lcid: LCID, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromI1(cIn: CHAR, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromI2(uiIn: SHORT, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromI4(lIn: LONG, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromI8(i64In: LONG64, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromR4(fltIn: FLOAT, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromR8(dblIn: DOUBLE, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromUI1(bIn: BYTE, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromUI2(uiIn: USHORT, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromUI4(ulIn: ULONG, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecFromUI8(ui64In: ULONG64, pdecOut: ?*DECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecInt(pdecIn: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecMul(pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecNeg(pdecIn: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecRound(pdecIn: LPDECIMAL, cDecimals: c_int, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDecSub(pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL) HRESULT;
pub extern "oleaut32" stdcallcc fn VarDiv(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarEqv(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFix(pvarIn: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormat(pvarIn: LPVARIANT, pstrFormat: LPOLESTR, iFirstDay: c_int, iFirstWeek: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormatCurrency(pvarIn: LPVARIANT, iNumDig: c_int, iIncLead: c_int, iUseParens: c_int, iGroup: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormatDateTime(pvarIn: LPVARIANT, iNamedFormat: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormatFromTokens(pvarIn: LPVARIANT, pstrFormat: LPOLESTR, pbTokCur: LPBYTE, dwFlags: ULONG, pbstrOut: ?*BSTR, lcid: LCID) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormatNumber(pvarIn: LPVARIANT, iNumDig: c_int, iIncLead: c_int, iUseParens: c_int, iGroup: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarFormatPercent(pvarIn: LPVARIANT, iNumDig: c_int, iIncLead: c_int, iUseParens: c_int, iGroup: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromBool(boolIn: VARIANT_BOOL, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromCy(cyIn: CY, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromDate(dateIn: DATE, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromDec(pdecIn: ?*const DECIMAL, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromI2(uiIn: SHORT, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromI4(lIn: LONG, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromI8(i64In: LONG64, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromR4(fltIn: FLOAT, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromR8(dblIn: DOUBLE, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromUI1(bIn: BYTE, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromUI2(uiIn: USHORT, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromUI4(ulIn: ULONG, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI1FromUI8(i64In: ULONG64, pcOut: ?*CHAR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromBool(boolIn: VARIANT_BOOL, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromCy(cyIn: CY, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromDate(dateIn: DATE, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromDec(pdecIn: ?*const DECIMAL, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromDisp(pdispIn: ?*IDispatch, lcid: LCID, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromI1(cIn: CHAR, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromI4(lIn: LONG, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromI8(i64In: LONG64, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromR4(fltIn: FLOAT, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromR8(dblIn: DOUBLE, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromUI1(bIn: BYTE, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromUI2(uiIn: USHORT, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromUI4(ulIn: ULONG, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI2FromUI8(ui64In: ULONG64, psOut: ?*SHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromBool(boolIn: VARIANT_BOOL, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromCy(cyIn: CY, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromDate(dateIn: DATE, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromDec(pdecIn: ?*const DECIMAL, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromDisp(pdispIn: ?*IDispatch, lcid: LCID, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromI1(cIn: CHAR, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromI2(sIn: SHORT, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromI8(i64In: LONG64, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromR4(fltIn: FLOAT, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromR8(dblIn: DOUBLE, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromUI1(bIn: BYTE, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromUI2(uiIn: USHORT, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromUI4(ulIn: ULONG, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI4FromUI8(ui64In: ULONG64, plOut: ?*LONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromBool(boolIn: VARIANT_BOOL, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromCy(cyIn: CY, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromDate(dateIn: DATE, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromDec(pdecIn: ?*const DECIMAL, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromI1(cIn: CHAR, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromI2(sIn: SHORT, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromR4(fltIn: FLOAT, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromR8(dblIn: DOUBLE, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromUI1(bIn: BYTE, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromUI2(uiIn: USHORT, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromUI4(ulIn: ULONG, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarI8FromUI8(ui64In: ULONG64, pi64Out: ?*LONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarIdiv(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarImp(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarInt(pvarIn: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarMod(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarMonthName(iMonth: c_int, fAbbrev: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarMul(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarNeg(pvarIn: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarNot(pvarIn: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarNumFromParseNum(pnumprs: ?*NUMPARSE, rgbDig: ?*BYTE, dwVtBits: ULONG, pvar: ?*VARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarOr(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarParseNumFromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pnumprs: ?*NUMPARSE, rgbDig: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarPow(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4CmpR8(fltLeft: f32, dblRight: f64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromBool(boolIn: VARIANT_BOOL, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromCy(cyIn: CY, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromDate(dateIn: DATE, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromDec(pdecIn: ?*const DECIMAL, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromI1(cIn: CHAR, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromI2(sIn: SHORT, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromI4(lIn: LONG, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromI8(i64In: LONG64, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromR8(dblIn: DOUBLE, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromUI1(bIn: BYTE, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromUI2(uiIn: USHORT, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromUI4(ulIn: ULONG, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR4FromUI8(ui64In: ULONG64, pfltOut: ?*FLOAT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromBool(boolIn: VARIANT_BOOL, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromCy(cyIn: CY, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromDate(dateIn: DATE, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromDec(pdecIn: ?*const DECIMAL, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromI1(cIn: CHAR, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromI2(sIn: SHORT, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromI4(lIn: LONG, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromI8(i64In: LONG64, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromR4(fltIn: FLOAT, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromUI1(bIn: BYTE, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromUI2(uiIn: USHORT, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromUI4(ulIn: ULONG, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8FromUI8(ui64In: ULONG64, pdblOut: ?*DOUBLE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8Pow(dblLeft: f64, dblRight: f64, pdblResult: ?*f64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarR8Round(dblIn: f64, cDecimals: c_int, pdblResult: ?*f64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarRound(pvarIn: LPVARIANT, cDecimals: c_int, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarSub(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarTokenizeFormatString(pstrFormat: LPOLESTR, rgbTok: LPBYTE, cbTok: c_int, iFirstDay: c_int, iFirstWeek: c_int, lcid: LCID, pcbActual: ?*c_int) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromBool(boolIn: VARIANT_BOOL, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromCy(cyIn: CY, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromDate(dateIn: DATE, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromDec(pdecIn: ?*const DECIMAL, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromI1(cIn: CHAR, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromI2(sIn: SHORT, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromI4(lIn: LONG, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromI8(i64In: LONG64, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromR4(fltIn: FLOAT, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromR8(dblIn: DOUBLE, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromUI2(uiIn: USHORT, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromUI4(ulIn: ULONG, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI1FromUI8(ui64In: ULONG64, pbOut: ?*BYTE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromBool(boolIn: VARIANT_BOOL, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromCy(cyIn: CY, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromDate(dateIn: DATE, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromDec(pdecIn: ?*const DECIMAL, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromDisp(pdispIn: ?*IDispatch, lcid: LCID, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromI1(cIn: CHAR, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromI2(uiIn: SHORT, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromI4(lIn: LONG, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromI8(i64In: LONG64, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromR4(fltIn: FLOAT, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromR8(dblIn: DOUBLE, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromUI1(bIn: BYTE, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromUI4(ulIn: ULONG, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI2FromUI8(i64In: ULONG64, puiOut: ?*USHORT) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromBool(boolIn: VARIANT_BOOL, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromCy(cyIn: CY, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromDate(dateIn: DATE, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromDec(pdecIn: ?*const DECIMAL, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromI1(cIn: CHAR, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromI2(uiIn: SHORT, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromI4(lIn: LONG, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromI8(i64In: LONG64, plOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromR4(fltIn: FLOAT, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromR8(dblIn: DOUBLE, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromUI1(bIn: BYTE, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromUI2(uiIn: USHORT, pulOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI4FromUI8(ui64In: ULONG64, plOut: ?*ULONG) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromBool(boolIn: VARIANT_BOOL, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromCy(cyIn: CY, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromDate(dateIn: DATE, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromDec(pdecIn: ?*const DECIMAL, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromDisp(pdispIn: ?*IDispatch, lcid: LCID, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromI1(cIn: CHAR, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromI2(sIn: SHORT, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromI4(lIn: LONG, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromI8(ui64In: LONG64, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromR4(fltIn: FLOAT, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromR8(dblIn: DOUBLE, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromStr(strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromUI1(bIn: BYTE, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromUI2(uiIn: USHORT, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUI8FromUI4(ulIn: ULONG, pi64Out: ?*ULONG64) HRESULT;
pub extern "oleaut32" stdcallcc fn VarUdateFromDate(dateIn: DATE, dwFlags: ULONG, pudateOut: ?*UDATE) HRESULT;
pub extern "oleaut32" stdcallcc fn VarWeekdayName(iWeekday: c_int, fAbbrev: c_int, iFirstDay: c_int, dwFlags: ULONG, pbstrOut: ?*BSTR) HRESULT;
pub extern "oleaut32" stdcallcc fn VarXor(pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantChangeType(pvargDest: ?*VARIANTARG, pvarSrc: ?*const VARIANTARG, wFlags: USHORT, vt: VARTYPE) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantChangeTypeEx(pvargDest: ?*VARIANTARG, pvarSrc: ?*const VARIANTARG, lcid: LCID, wFlags: USHORT, vt: VARTYPE) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantClear(pvarg: ?*VARIANTARG) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantCopy(pvargDest: ?*VARIANTARG, pvargSrc: ?*const VARIANTARG) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantCopyInd(pvarDest: ?*VARIANT, pvargSrc: ?*const VARIANTARG) HRESULT;
pub extern "oleaut32" stdcallcc fn VariantInit(pvarg: ?*VARIANTARG) void;
pub extern "oleaut32" stdcallcc fn VariantTimeToDosDateTime(vtime: DOUBLE, pwDosDate: ?*USHORT, pwDosTime: ?*USHORT) INT;
pub extern "oleaut32" stdcallcc fn VariantTimeToSystemTime(vtime: DOUBLE, lpSystemTime: LPSYSTEMTIME) INT;
pub extern "oleaut32" stdcallcc fn VectorFromBstr(bstr: BSTR, ppsa: ?*(?*SAFEARRAY)) HRESULT;
pub extern "oleaut32" stdcallcc fn WriteFmtUserTypeStg(pstg: LPSTORAGE, cf: CLIPFORMAT, lpszUserType: LPOLESTR) HRESULT;
pub extern "opengl32" stdcallcc fn wglCopyContext(arg0: HGLRC, arg1: HGLRC, arg2: UINT) BOOL;
pub extern "opengl32" stdcallcc fn wglCreateContext(arg0: HDC) HGLRC;
pub extern "opengl32" stdcallcc fn wglCreateLayerContext(arg0: HDC, arg1: c_int) HGLRC;
pub extern "opengl32" stdcallcc fn wglDeleteContext(arg0: HGLRC) BOOL;
pub extern "opengl32" stdcallcc fn wglDescribeLayerPlane(arg0: HDC, arg1: c_int, arg2: c_int, arg3: UINT, arg4: LPLAYERPLANEDESCRIPTOR) BOOL;
pub extern "opengl32" stdcallcc fn wglGetCurrentContext() HGLRC;
pub extern "opengl32" stdcallcc fn wglGetCurrentDC() HDC;
pub extern "opengl32" stdcallcc fn wglGetLayerPaletteEntries(arg0: HDC, arg1: c_int, arg2: c_int, arg3: c_int, arg4: ?*COLORREF) c_int;
pub extern "opengl32" stdcallcc fn wglGetProcAddress(LPCSTR) PROC;
pub extern "opengl32" stdcallcc fn wglMakeCurrent(arg0: HDC, arg1: HGLRC) BOOL;
pub extern "opengl32" stdcallcc fn wglRealizeLayerPalette(arg0: HDC, arg1: c_int, arg2: BOOL) BOOL;
pub extern "opengl32" stdcallcc fn wglSetLayerPaletteEntries(arg0: HDC, arg1: c_int, arg2: c_int, arg3: c_int, arg4: ?*const COLORREF) c_int;
pub extern "opengl32" stdcallcc fn wglShareLists(arg0: HGLRC, arg1: HGLRC) BOOL;
pub extern "opengl32" stdcallcc fn wglSwapLayerBuffers(arg0: HDC, arg1: UINT) BOOL;
pub extern "opengl32" stdcallcc fn wglSwapMultipleBuffers(arg0: UINT, arg1: ?*const WGLSWAP) DWORD;
pub extern "opengl32" stdcallcc fn wglUseFontBitmapsA(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD) BOOL;
pub extern "opengl32" stdcallcc fn wglUseFontBitmapsW(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD) BOOL;
pub extern "opengl32" stdcallcc fn wglUseFontOutlinesA(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: c_int, arg7: LPGLYPHMETRICSFLOAT) BOOL;
pub extern "opengl32" stdcallcc fn wglUseFontOutlinesW(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: c_int, arg7: LPGLYPHMETRICSFLOAT) BOOL;
pub extern "rpcns4" stdcallcc fn I_RpcNsGetBuffer(Message: PRPC_MESSAGE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn I_RpcNsRaiseException(Message: PRPC_MESSAGE, Status: RPC_STATUS) void;
pub extern "rpcns4" stdcallcc fn I_RpcNsSendReceive(Message: PRPC_MESSAGE, Handle: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn I_RpcReBindBuffer(Message: PRPC_MESSAGE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingExportA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, BindingVec: ?*RPC_BINDING_VECTOR, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingExportPnPA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingExportPnPW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingExportW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, BindingVec: ?*RPC_BINDING_VECTOR, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingImportBeginA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: ?*UUID, ImportContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingImportBeginW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: ?*UUID, ImportContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingImportDone(ImportContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingImportNext(ImportContext: RPC_NS_HANDLE, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingLookupBeginA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: ?*UUID, BindingMaxCount: c_ulong, LookupContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingLookupBeginW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: ?*UUID, BindingMaxCount: c_ulong, LookupContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingLookupDone(LookupContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingLookupNext(LookupContext: RPC_NS_HANDLE, BindingVec: ?*(?*RPC_BINDING_VECTOR)) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingSelect(BindingVec: ?*RPC_BINDING_VECTOR, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingUnexportA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingUnexportPnPA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingUnexportPnPW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsBindingUnexportW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryExpandNameA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, ExpandedName: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryExpandNameW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, ExpandedName: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryObjectInqBeginA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryObjectInqBeginW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryObjectInqDone(InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsEntryObjectInqNext(InquiryContext: RPC_NS_HANDLE, ObjUuid: ?*UUID) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupDeleteA(GroupNameSyntax: c_ulong, GroupName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupDeleteW(GroupNameSyntax: c_ulong, GroupName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrAddA(GroupNameSyntax: c_ulong, GroupName: RPC_CSTR, MemberNameSyntax: c_ulong, MemberName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrAddW(GroupNameSyntax: c_ulong, GroupName: RPC_WSTR, MemberNameSyntax: c_ulong, MemberName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrInqBeginA(GroupNameSyntax: c_ulong, GroupName: RPC_CSTR, MemberNameSyntax: c_ulong, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrInqBeginW(GroupNameSyntax: c_ulong, GroupName: RPC_WSTR, MemberNameSyntax: c_ulong, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrInqDone(InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrInqNextA(InquiryContext: RPC_NS_HANDLE, MemberName: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrInqNextW(InquiryContext: RPC_NS_HANDLE, MemberName: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrRemoveA(GroupNameSyntax: c_ulong, GroupName: RPC_CSTR, MemberNameSyntax: c_ulong, MemberName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsGroupMbrRemoveW(GroupNameSyntax: c_ulong, GroupName: RPC_WSTR, MemberNameSyntax: c_ulong, MemberName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtBindingUnexportA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfId: ?*RPC_IF_ID, VersOption: c_ulong, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtBindingUnexportW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfId: ?*RPC_IF_ID, VersOption: c_ulong, ObjectUuidVec: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryCreateA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryCreateW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryDeleteA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryDeleteW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryInqIfIdsA(EntryNameSyntax: c_ulong, EntryName: RPC_CSTR, IfIdVec: ?*(?*RPC_IF_ID_VECTOR)) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtEntryInqIfIdsW(EntryNameSyntax: c_ulong, EntryName: RPC_WSTR, IfIdVec: ?*(?*RPC_IF_ID_VECTOR)) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtHandleSetExpAge(NsHandle: RPC_NS_HANDLE, ExpirationAge: c_ulong) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtInqExpAge(ExpirationAge: ?*c_ulong) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsMgmtSetExpAge(ExpirationAge: c_ulong) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileDeleteA(ProfileNameSyntax: c_ulong, ProfileName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileDeleteW(ProfileNameSyntax: c_ulong, ProfileName: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltAddA(ProfileNameSyntax: c_ulong, ProfileName: RPC_CSTR, IfId: ?*RPC_IF_ID, MemberNameSyntax: c_ulong, MemberName: RPC_CSTR, Priority: c_ulong, Annotation: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltAddW(ProfileNameSyntax: c_ulong, ProfileName: RPC_WSTR, IfId: ?*RPC_IF_ID, MemberNameSyntax: c_ulong, MemberName: RPC_WSTR, Priority: c_ulong, Annotation: RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltInqBeginA(ProfileNameSyntax: c_ulong, ProfileName: RPC_CSTR, InquiryType: c_ulong, IfId: ?*RPC_IF_ID, VersOption: c_ulong, MemberNameSyntax: c_ulong, MemberName: RPC_CSTR, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltInqBeginW(ProfileNameSyntax: c_ulong, ProfileName: RPC_WSTR, InquiryType: c_ulong, IfId: ?*RPC_IF_ID, VersOption: c_ulong, MemberNameSyntax: c_ulong, MemberName: RPC_WSTR, InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltInqDone(InquiryContext: ?*RPC_NS_HANDLE) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltInqNextA(InquiryContext: RPC_NS_HANDLE, IfId: ?*RPC_IF_ID, MemberName: ?*RPC_CSTR, Priority: ?*c_ulong, Annotation: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltInqNextW(InquiryContext: RPC_NS_HANDLE, IfId: ?*RPC_IF_ID, MemberName: ?*RPC_WSTR, Priority: ?*c_ulong, Annotation: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltRemoveA(ProfileNameSyntax: c_ulong, ProfileName: RPC_CSTR, IfId: ?*RPC_IF_ID, MemberNameSyntax: c_ulong, MemberName: RPC_CSTR) RPC_STATUS;
pub extern "rpcns4" stdcallcc fn RpcNsProfileEltRemoveW(ProfileNameSyntax: c_ulong, ProfileName: RPC_WSTR, IfId: ?*RPC_IF_ID, MemberNameSyntax: c_ulong, MemberName: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn DceErrorInqTextA(RpcStatus: RPC_STATUS, ErrorText: RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn DceErrorInqTextW(RpcStatus: RPC_STATUS, ErrorText: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn IEnumString_Next_Proxy(This: ?*IEnumString, celt: ULONG, rgelt: ?*LPOLESTR, pceltFetched: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn IEnumString_Next_Stub(This: ?*IEnumString, celt: ULONG, rgelt: ?*LPOLESTR, pceltFetched: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn IEnumUnknown_Next_Stub(This: ?*IEnumUnknown, celt: ULONG, rgelt: ?*(?*IUnknown), pceltFetched: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn ISequentialStream_Read_Proxy(This: ?*ISequentialStream, pv: ?*c_void, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn ISequentialStream_Read_Stub(This: ?*ISequentialStream, pv: ?*byte, cb: ULONG, pcbRead: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn ISequentialStream_Write_Proxy(This: ?*ISequentialStream, pv: ?*const c_void, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn ISequentialStream_Write_Stub(This: ?*ISequentialStream, pv: ?*const byte, cb: ULONG, pcbWritten: ?*ULONG) HRESULT;
pub extern "rpcrt4" stdcallcc fn IStream_CopyTo_Proxy(This: ?*IStream, pstm: ?*IStream, cb: ULARGE_INTEGER, pcbRead: ?*ULARGE_INTEGER, pcbWritten: ?*ULARGE_INTEGER) HRESULT;
pub extern "rpcrt4" stdcallcc fn IStream_CopyTo_Stub(This: ?*IStream, pstm: ?*IStream, cb: ULARGE_INTEGER, pcbRead: ?*ULARGE_INTEGER, pcbWritten: ?*ULARGE_INTEGER) HRESULT;
pub extern "rpcrt4" stdcallcc fn IStream_Seek_Proxy(This: ?*IStream, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ?*ULARGE_INTEGER) HRESULT;
pub extern "rpcrt4" stdcallcc fn IStream_Seek_Stub(This: ?*IStream, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ?*ULARGE_INTEGER) HRESULT;
pub extern "rpcrt4" stdcallcc fn IUnknown_AddRef_Proxy(This: ?*IUnknown) ULONG;
pub extern "rpcrt4" stdcallcc fn IUnknown_QueryInterface_Proxy(This: ?*IUnknown, riid: ?*const IID, ppvObject: ?*(?*c_void)) HRESULT;
pub extern "rpcrt4" stdcallcc fn IUnknown_Release_Proxy(This: ?*IUnknown) ULONG;
pub extern "rpcrt4" stdcallcc fn I_RpcAllocate(Size: c_uint) ?*c_void;
pub extern "rpcrt4" stdcallcc fn I_RpcAsyncAbortCall(pAsync: PRPC_ASYNC_STATE, ExceptionCode: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcAsyncSetHandle(Message: PRPC_MESSAGE, pAsync: PRPC_ASYNC_STATE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingCopy(SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingCreateNP(ServerName: RPC_WSTR, ServiceName: RPC_WSTR, NetworkOptions: RPC_WSTR, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingHandleToAsyncHandle(Binding: RPC_BINDING_HANDLE, AsyncHandle: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqClientTokenAttributes(Binding: RPC_BINDING_HANDLE, TokenId: ?*LUID, AuthenticationId: ?*LUID, ModifiedId: ?*LUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqDynamicEndpointA(Binding: RPC_BINDING_HANDLE, DynamicEndpoint: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqDynamicEndpointW(Binding: RPC_BINDING_HANDLE, DynamicEndpoint: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqLocalClientPID(Binding: RPC_BINDING_HANDLE, Pid: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqMarshalledTargetInfo(Binding: RPC_BINDING_HANDLE, MarshalledTargetInfoSize: ?*c_ulong, MarshalledTargetInfo: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqSecurityContext(Binding: RPC_BINDING_HANDLE, SecurityContextHandle: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqSecurityContextKeyInfo(Binding: RPC_BINDING_HANDLE, KeyInfo: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqTransportType(Binding: RPC_BINDING_HANDLE, Type: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingInqWireIdForSnego(Binding: RPC_BINDING_HANDLE, WireId: ?[*]u8) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingIsClientLocal(BindingHandle: RPC_BINDING_HANDLE, ClientLocalFlag: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingIsServerLocal(Binding: RPC_BINDING_HANDLE, ServerLocalFlag: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingSetPrivateOption(hBinding: RPC_BINDING_HANDLE, option: c_ulong, optionValue: ULONG_PTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcBindingToStaticStringBindingW(Binding: RPC_BINDING_HANDLE, StringBinding: ?*(?*c_ushort)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcClearMutex(Mutex: I_RPC_MUTEX) void;
pub extern "rpcrt4" stdcallcc fn I_RpcConnectionInqSockBuffSize(RecvBuffSize: ?*c_ulong, SendBuffSize: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcConnectionSetSockBuffSize(RecvBuffSize: c_ulong, SendBuffSize: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcDeleteMutex(Mutex: I_RPC_MUTEX) void;
pub extern "rpcrt4" stdcallcc fn I_RpcExceptionFilter(ExceptionCode: c_ulong) c_int;
pub extern "rpcrt4" stdcallcc fn I_RpcFree(Object: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn I_RpcFreeBuffer(Message: ?*RPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcFreePipeBuffer(Message: ?*RPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcFreeSystemHandle(Type: u8, Handle: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn I_RpcFreeSystemHandleCollection(CallObj: ?*c_void, FreeFlags: c_ulong) c_ulong;
pub extern "rpcrt4" stdcallcc fn I_RpcGetBuffer(Message: ?*RPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcGetBufferWithObject(Message: ?*RPC_MESSAGE, ObjectUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcGetCurrentCallHandle() RPC_BINDING_HANDLE;
pub extern "rpcrt4" stdcallcc fn I_RpcGetDefaultSD(ppSecurityDescriptor: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcGetExtendedError() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcGetSystemHandle(pMemory: ?[*]u8, Type: u8, AccessMask: c_ulong, HandleIndex: c_ulong, CallObj: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcIfInqTransferSyntaxes(RpcIfHandle: RPC_IF_HANDLE, TransferSyntaxes: ?*RPC_TRANSFER_SYNTAX, TransferSyntaxSize: c_uint, TransferSyntaxCount: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcMapWin32Status(Status: RPC_STATUS) c_long;
pub extern "rpcrt4" stdcallcc fn I_RpcMgmtEnableDedicatedThreadPool() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcNegotiateTransferSyntax(Message: ?*RPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcNsBindingSetEntryNameA(Binding: RPC_BINDING_HANDLE, EntryNameSyntax: c_ulong, EntryName: RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcNsBindingSetEntryNameW(Binding: RPC_BINDING_HANDLE, EntryNameSyntax: c_ulong, EntryName: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcNsInterfaceExported(EntryNameSyntax: c_ulong, EntryName: ?*c_ushort, RpcInterfaceInformation: ?*RPC_SERVER_INTERFACE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcNsInterfaceUnexported(EntryNameSyntax: c_ulong, EntryName: ?*c_ushort, RpcInterfaceInformation: ?*RPC_SERVER_INTERFACE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcOpenClientProcess(Binding: RPC_BINDING_HANDLE, DesiredAccess: c_ulong, ClientProcess: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcPauseExecution(Milliseconds: c_ulong) void;
pub extern "rpcrt4" stdcallcc fn I_RpcReallocPipeBuffer(Message: PRPC_MESSAGE, NewSize: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcReceive(Message: PRPC_MESSAGE, Size: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcRecordCalloutFailure(RpcStatus: RPC_STATUS, CallOutState: ?*RDR_CALLOUT_STATE, DllName: ?*c_ushort) void;
pub extern "rpcrt4" stdcallcc fn I_RpcRequestMutex(Mutex: ?*I_RPC_MUTEX) void;
pub extern "rpcrt4" stdcallcc fn I_RpcSend(Message: PRPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcSendReceive(Message: ?*RPC_MESSAGE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerCheckClientRestriction(Context: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerDisableExceptionFilter() c_long;
pub extern "rpcrt4" stdcallcc fn I_RpcServerGetAssociationID(Binding: RPC_BINDING_HANDLE, AssociationID: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerInqAddressChangeFn() ?*RPC_ADDRESS_CHANGE_FN;
pub extern "rpcrt4" stdcallcc fn I_RpcServerInqLocalConnAddress(Binding: RPC_BINDING_HANDLE, Buffer: ?*c_void, BufferSize: ?*c_ulong, AddressFormat: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerInqRemoteConnAddress(Binding: RPC_BINDING_HANDLE, Buffer: ?*c_void, BufferSize: ?*c_ulong, AddressFormat: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerInqTransportType(Type: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerRegisterForwardFunction(pForwardFunction: ?*RPC_FORWARD_FUNCTION) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerSetAddressChangeFn(pAddressChangeFn: ?*RPC_ADDRESS_CHANGE_FN) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerStartService(Protseq: RPC_WSTR, Endpoint: RPC_WSTR, IfSpec: RPC_IF_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerSubscribeForDisconnectNotification(Binding: RPC_BINDING_HANDLE, hEvent: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerUseProtseq2A(NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void, Policy: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerUseProtseq2W(NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void, Policy: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerUseProtseqEp2A(NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: c_uint, Endpoint: RPC_CSTR, SecurityDescriptor: ?*c_void, Policy: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcServerUseProtseqEp2W(NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: c_uint, Endpoint: RPC_WSTR, SecurityDescriptor: ?*c_void, Policy: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcSessionStrictContextHandle() void;
pub extern "rpcrt4" stdcallcc fn I_RpcSetSystemHandle(Handle: ?*c_void, Type: u8, AccessMask: c_ulong, CallObj: ?*c_void, HandleIndex: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcSsDontSerializeContext() void;
pub extern "rpcrt4" stdcallcc fn I_RpcSystemHandleTypeSpecificWork(Handle: ?*c_void, ActualType: u8, IdlType: u8, MarshalDirection: LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_RpcTurnOnEEInfoPropagation() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn I_UuidCreate(Uuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn NDRCContextBinding(CContext: NDR_CCONTEXT) RPC_BINDING_HANDLE;
pub extern "rpcrt4" stdcallcc fn NDRCContextMarshall(CContext: NDR_CCONTEXT, pBuff: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NDRCContextUnmarshall(pCContext: ?*NDR_CCONTEXT, hBinding: RPC_BINDING_HANDLE, pBuff: ?*c_void, DataRepresentation: c_ulong) void;
pub extern "rpcrt4" stdcallcc fn NDRSContextMarshall(CContext: NDR_SCONTEXT, pBuff: ?*c_void, userRunDownIn: NDR_RUNDOWN) void;
pub extern "rpcrt4" stdcallcc fn NDRSContextMarshall2(BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: ?*c_void, userRunDownIn: NDR_RUNDOWN, CtxGuard: ?*c_void, Flags: c_ulong) void;
pub extern "rpcrt4" stdcallcc fn NDRSContextMarshallEx(BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: ?*c_void, userRunDownIn: NDR_RUNDOWN) void;
pub extern "rpcrt4" stdcallcc fn NDRSContextUnmarshall(pBuff: ?*c_void, DataRepresentation: c_ulong) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn NDRSContextUnmarshall2(BindingHandle: RPC_BINDING_HANDLE, pBuff: ?*c_void, DataRepresentation: c_ulong, CtxGuard: ?*c_void, Flags: c_ulong) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn NDRSContextUnmarshallEx(BindingHandle: RPC_BINDING_HANDLE, pBuff: ?*c_void, DataRepresentation: c_ulong) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn Ndr64AsyncClientCall(pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO, nProcNum: c_ulong, pReturnValue: ?*c_void) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn Ndr64AsyncServerCall(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn Ndr64AsyncServerCall64(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn Ndr64AsyncServerCallAll(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn Ndr64DcomAsyncClientCall(pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO, nProcNum: c_ulong, pReturnValue: ?*c_void) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn Ndr64DcomAsyncStubCall(pThis: ?*struct_IRpcStubBuffer, pChannel: ?*struct_IRpcChannelBuffer, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
pub extern "rpcrt4" stdcallcc fn NdrAllocate(pStubMsg: PMIDL_STUB_MESSAGE, Len: usize) ?*c_void;
pub extern "rpcrt4" stdcallcc fn NdrAsyncClientCall(pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn NdrAsyncServerCall(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrByteCountPointerBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrByteCountPointerFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrByteCountPointerMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrByteCountPointerUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrClearOutParameters(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, ArgAddr: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrClientCall(pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn NdrClientCall2(pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn NdrClientCall3(pProxyInfo: ?*MIDL_STUBLESS_PROXY_INFO, nProcNum: c_ulong, pReturnValue: ?*c_void) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn NdrClientContextMarshall(pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_CCONTEXT, fCheck: c_int) void;
pub extern "rpcrt4" stdcallcc fn NdrClientContextUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, pContextHandle: ?*NDR_CCONTEXT, BindHandle: RPC_BINDING_HANDLE) void;
pub extern "rpcrt4" stdcallcc fn NdrClientInitialize(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: c_uint) void;
pub extern "rpcrt4" stdcallcc fn NdrClientInitializeNew(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: c_uint) void;
pub extern "rpcrt4" stdcallcc fn NdrComplexArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrComplexArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrComplexArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrComplexArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrComplexArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrComplexStructBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrComplexStructFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrComplexStructMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrComplexStructMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrComplexStructUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrConformantArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantStringBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantStringMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantStringMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrConformantStringUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantStructBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantStructFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantStructMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantStructMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrConformantStructUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingStructBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingStructFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingStructMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingStructMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrConformantVaryingStructUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrContextHandleInitialize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn NdrContextHandleSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConvert(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrConvert2(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, NumberParams: c_long) void;
pub extern "rpcrt4" stdcallcc fn NdrCorrelationFree(pStubMsg: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrCorrelationInitialize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?*c_void, CacheSize: c_ulong, flags: c_ulong) void;
pub extern "rpcrt4" stdcallcc fn NdrCorrelationPass(pStubMsg: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrCreateServerInterfaceFromStub(pStub: ?*struct_IRpcStubBuffer, pServerIf: ?*RPC_SERVER_INTERFACE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn NdrDcomAsyncClientCall(pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING) CLIENT_CALL_RETURN;
pub extern "rpcrt4" stdcallcc fn NdrDcomAsyncStubCall(pThis: ?*struct_IRpcStubBuffer, pChannel: ?*struct_IRpcChannelBuffer, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
pub extern "rpcrt4" stdcallcc fn NdrEncapsulatedUnionBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrEncapsulatedUnionFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrEncapsulatedUnionMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrEncapsulatedUnionMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrEncapsulatedUnionUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrFixedArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrFixedArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrFixedArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrFixedArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrFixedArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrFreeBuffer(pStubMsg: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrFullPointerXlatFree(pXlatTables: PFULL_PTR_XLAT_TABLES) void;
pub extern "rpcrt4" stdcallcc fn NdrFullPointerXlatInit(NumberOfPointers: c_ulong, XlatSide: XLAT_SIDE) PFULL_PTR_XLAT_TABLES;
pub extern "rpcrt4" stdcallcc fn NdrGetBuffer(pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: c_ulong, Handle: RPC_BINDING_HANDLE) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrGetDcomProtocolVersion(pStubMsg: PMIDL_STUB_MESSAGE, pVersion: ?*RPC_VERSION) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn NdrGetUserMarshalInfo(pFlags: ?*c_ulong, InformationLevel: c_ulong, pMarshalInfo: ?*NDR_USER_MARSHAL_INFO) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn NdrInterfacePointerBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrInterfacePointerFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrInterfacePointerMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrInterfacePointerMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrInterfacePointerUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrMapCommAndFaultStatus(pStubMsg: PMIDL_STUB_MESSAGE, pCommStatus: ?*c_ulong, pFaultStatus: ?*c_ulong, Status: RPC_STATUS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn NdrNonConformantStringBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrNonConformantStringMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrNonConformantStringMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrNonConformantStringUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrNonEncapsulatedUnionBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrNonEncapsulatedUnionFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrNonEncapsulatedUnionMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrNonEncapsulatedUnionMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrNonEncapsulatedUnionUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrNsGetBuffer(pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: c_ulong, Handle: RPC_BINDING_HANDLE) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrNsSendReceive(pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: ?[*]u8, pAutoHandle: ?*RPC_BINDING_HANDLE) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrOleAllocate(Size: usize) ?*c_void;
pub extern "rpcrt4" stdcallcc fn NdrOleFree(NodeToFree: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrPartialIgnoreClientBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrPartialIgnoreClientMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrPartialIgnoreServerInitialize(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?*c_void), pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrPartialIgnoreServerUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?*c_void)) void;
pub extern "rpcrt4" stdcallcc fn NdrPointerBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrPointerFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrPointerMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrPointerMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrPointerUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrRangeUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrRpcSmClientAllocate(Size: usize) ?*c_void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSmClientFree(NodeToFree: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSmSetClientToOsf(pMessage: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSsDefaultAllocate(Size: usize) ?*c_void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSsDefaultFree(NodeToFree: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSsDisableAllocate(pMessage: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrRpcSsEnableAllocate(pMessage: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrSendReceive(pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: ?[*]u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrServerCall(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrServerCall2(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrServerCallAll(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrServerCallNdr64(pRpcMsg: PRPC_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrServerContextMarshall(pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN) void;
pub extern "rpcrt4" stdcallcc fn NdrServerContextNewMarshall(pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrServerContextNewUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn NdrServerContextUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE) NDR_SCONTEXT;
pub extern "rpcrt4" stdcallcc fn NdrServerInitialize(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrServerInitializeMarshall(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE) void;
pub extern "rpcrt4" stdcallcc fn NdrServerInitializeNew(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrServerInitializePartial(pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, RequestedBufferSize: c_ulong) void;
pub extern "rpcrt4" stdcallcc fn NdrServerInitializeUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pRpcMsg: PRPC_MESSAGE) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrServerMarshall(pThis: ?*c_void, pChannel: ?*c_void, pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrServerUnmarshall(pChannel: ?*c_void, pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING, pParamList: ?*c_void) c_int;
pub extern "rpcrt4" stdcallcc fn NdrSimpleStructBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrSimpleStructFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrSimpleStructMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrSimpleStructMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrSimpleStructUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrSimpleTypeMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, FormatChar: u8) void;
pub extern "rpcrt4" stdcallcc fn NdrSimpleTypeUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, FormatChar: u8) void;
pub extern "rpcrt4" stdcallcc fn NdrStubCall(pThis: ?*c_void, pChannel: ?*c_void, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
pub extern "rpcrt4" stdcallcc fn NdrStubCall2(pThis: ?*c_void, pChannel: ?*c_void, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
pub extern "rpcrt4" stdcallcc fn NdrStubCall3(pThis: ?*c_void, pChannel: ?*c_void, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ?*c_ulong) c_long;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalSimpleTypeConvert(pFlags: ?*c_ulong, pBuffer: ?[*]u8, FormatChar: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrUserMarshalUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrVaryingArrayBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrVaryingArrayFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrVaryingArrayMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrVaryingArrayMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrVaryingArrayUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrXmitOrRepAsBufferSize(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrXmitOrRepAsFree(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) void;
pub extern "rpcrt4" stdcallcc fn NdrXmitOrRepAsMarshall(pStubMsg: PMIDL_STUB_MESSAGE, pMemory: ?[*]u8, pFormat: PFORMAT_STRING) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn NdrXmitOrRepAsMemorySize(pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING) c_ulong;
pub extern "rpcrt4" stdcallcc fn NdrXmitOrRepAsUnmarshall(pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: ?*(?[*]u8), pFormat: PFORMAT_STRING, fMustAlloc: u8) ?[*]u8;
pub extern "rpcrt4" stdcallcc fn RpcAsyncAbortCall(pAsync: PRPC_ASYNC_STATE, ExceptionCode: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcAsyncCancelCall(pAsync: PRPC_ASYNC_STATE, fAbort: BOOL) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcAsyncCompleteCall(pAsync: PRPC_ASYNC_STATE, Reply: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcAsyncGetCallStatus(pAsync: PRPC_ASYNC_STATE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcAsyncInitializeHandle(pAsync: PRPC_ASYNC_STATE, Size: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcAsyncRegisterInfo(pAsync: PRPC_ASYNC_STATE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingBind(pAsync: PRPC_ASYNC_STATE, Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingCopy(SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingCreateA(Template: ?*RPC_BINDING_HANDLE_TEMPLATE_V1_A, Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_A, Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingCreateW(Template: ?*RPC_BINDING_HANDLE_TEMPLATE_V1_W, Security: ?*RPC_BINDING_HANDLE_SECURITY_V1_W, Options: ?*RPC_BINDING_HANDLE_OPTIONS_V1, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingFree(Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingFromStringBindingA(StringBinding: RPC_CSTR, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingFromStringBindingW(StringBinding: RPC_WSTR, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthClientA(ClientBinding: RPC_BINDING_HANDLE, Privs: ?*RPC_AUTHZ_HANDLE, ServerPrincName: ?*RPC_CSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthzSvc: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthClientExA(ClientBinding: RPC_BINDING_HANDLE, Privs: ?*RPC_AUTHZ_HANDLE, ServerPrincName: ?*RPC_CSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthzSvc: ?*c_ulong, Flags: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthClientExW(ClientBinding: RPC_BINDING_HANDLE, Privs: ?*RPC_AUTHZ_HANDLE, ServerPrincName: ?*RPC_WSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthzSvc: ?*c_ulong, Flags: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthClientW(ClientBinding: RPC_BINDING_HANDLE, Privs: ?*RPC_AUTHZ_HANDLE, ServerPrincName: ?*RPC_WSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthzSvc: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthInfoA(Binding: RPC_BINDING_HANDLE, ServerPrincName: ?*RPC_CSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthIdentity: ?*RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthInfoExA(Binding: RPC_BINDING_HANDLE, ServerPrincName: ?*RPC_CSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthIdentity: ?*RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ?*c_ulong, RpcQosVersion: c_ulong, SecurityQOS: ?*RPC_SECURITY_QOS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthInfoExW(Binding: RPC_BINDING_HANDLE, ServerPrincName: ?*RPC_WSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthIdentity: ?*RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ?*c_ulong, RpcQosVersion: c_ulong, SecurityQOS: ?*RPC_SECURITY_QOS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqAuthInfoW(Binding: RPC_BINDING_HANDLE, ServerPrincName: ?*RPC_WSTR, AuthnLevel: ?*c_ulong, AuthnSvc: ?*c_ulong, AuthIdentity: ?*RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqObject(Binding: RPC_BINDING_HANDLE, ObjectUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingInqOption(hBinding: RPC_BINDING_HANDLE, option: c_ulong, pOptionValue: ?*ULONG_PTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingReset(Binding: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingServerFromClient(ClientBinding: RPC_BINDING_HANDLE, ServerBinding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetAuthInfoA(Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: c_ulong, AuthnSvc: c_ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetAuthInfoExA(Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: c_ulong, AuthnSvc: c_ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: c_ulong, SecurityQos: ?*RPC_SECURITY_QOS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetAuthInfoExW(Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: c_ulong, AuthnSvc: c_ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: c_ulong, SecurityQOS: ?*RPC_SECURITY_QOS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetAuthInfoW(Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: c_ulong, AuthnSvc: c_ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetObject(Binding: RPC_BINDING_HANDLE, ObjectUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingSetOption(hBinding: RPC_BINDING_HANDLE, option: c_ulong, optionValue: ULONG_PTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingToStringBindingA(Binding: RPC_BINDING_HANDLE, StringBinding: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingToStringBindingW(Binding: RPC_BINDING_HANDLE, StringBinding: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingUnbind(Binding: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcBindingVectorFree(BindingVector: ?*(?*RPC_BINDING_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcCancelThread(Thread: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcCancelThreadEx(Thread: ?*c_void, Timeout: c_long) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpRegisterA(IfSpec: RPC_IF_HANDLE, BindingVector: ?*RPC_BINDING_VECTOR, UuidVector: ?*UUID_VECTOR, Annotation: RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpRegisterNoReplaceA(IfSpec: RPC_IF_HANDLE, BindingVector: ?*RPC_BINDING_VECTOR, UuidVector: ?*UUID_VECTOR, Annotation: RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpRegisterNoReplaceW(IfSpec: RPC_IF_HANDLE, BindingVector: ?*RPC_BINDING_VECTOR, UuidVector: ?*UUID_VECTOR, Annotation: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpRegisterW(IfSpec: RPC_IF_HANDLE, BindingVector: ?*RPC_BINDING_VECTOR, UuidVector: ?*UUID_VECTOR, Annotation: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpResolveBinding(Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcEpUnregister(IfSpec: RPC_IF_HANDLE, BindingVector: ?*RPC_BINDING_VECTOR, UuidVector: ?*UUID_VECTOR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorAddRecord(ErrorInfo: ?*RPC_EXTENDED_ERROR_INFO) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorClearInformation() void;
pub extern "rpcrt4" stdcallcc fn RpcErrorEndEnumeration(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorGetNextRecord(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE, CopyStrings: BOOL, ErrorInfo: ?*RPC_EXTENDED_ERROR_INFO) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorGetNumberOfRecords(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE, Records: ?*c_int) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorLoadErrorInfo(ErrorBlob: PVOID, BlobSize: usize, EnumHandle: ?*RPC_ERROR_ENUM_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorResetEnumeration(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorSaveErrorInfo(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE, ErrorBlob: ?*PVOID, BlobSize: ?*usize) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcErrorStartEnumeration(EnumHandle: ?*RPC_ERROR_ENUM_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcExceptionFilter(ExceptionCode: c_ulong) c_int;
pub extern "rpcrt4" stdcallcc fn RpcFreeAuthorizationContext(pAuthzClientContext: ?*PVOID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcGetAuthorizationContextForClient(ClientBinding: RPC_BINDING_HANDLE, ImpersonateOnReturn: BOOL, Reserved1: PVOID, pExpirationTime: PLARGE_INTEGER, Reserved2: LUID, Reserved3: DWORD, Reserved4: PVOID, pAuthzClientContext: ?*PVOID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcIfIdVectorFree(IfIdVector: ?*(?*RPC_IF_ID_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcIfInqId(RpcIfHandle: RPC_IF_HANDLE, RpcIfId: ?*RPC_IF_ID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcImpersonateClient(BindingHandle: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcImpersonateClient2(BindingHandle: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcImpersonateClientContainer(BindingHandle: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEnableIdleCleanup() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEpEltInqBegin(EpBinding: RPC_BINDING_HANDLE, InquiryType: c_ulong, IfId: ?*RPC_IF_ID, VersOption: c_ulong, ObjectUuid: ?*UUID, InquiryContext: ?*RPC_EP_INQ_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEpEltInqDone(InquiryContext: ?*RPC_EP_INQ_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEpEltInqNextA(InquiryContext: RPC_EP_INQ_HANDLE, IfId: ?*RPC_IF_ID, Binding: ?*RPC_BINDING_HANDLE, ObjectUuid: ?*UUID, Annotation: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEpEltInqNextW(InquiryContext: RPC_EP_INQ_HANDLE, IfId: ?*RPC_IF_ID, Binding: ?*RPC_BINDING_HANDLE, ObjectUuid: ?*UUID, Annotation: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtEpUnregister(EpBinding: RPC_BINDING_HANDLE, IfId: ?*RPC_IF_ID, Binding: RPC_BINDING_HANDLE, ObjectUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqComTimeout(Binding: RPC_BINDING_HANDLE, Timeout: ?*c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqDefaultProtectLevel(AuthnSvc: c_ulong, AuthnLevel: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqIfIds(Binding: RPC_BINDING_HANDLE, IfIdVector: ?*(?*RPC_IF_ID_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqServerPrincNameA(Binding: RPC_BINDING_HANDLE, AuthnSvc: c_ulong, ServerPrincName: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqServerPrincNameW(Binding: RPC_BINDING_HANDLE, AuthnSvc: c_ulong, ServerPrincName: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtInqStats(Binding: RPC_BINDING_HANDLE, Statistics: ?*(?*RPC_STATS_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtIsServerListening(Binding: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtSetAuthorizationFn(AuthorizationFn: RPC_MGMT_AUTHORIZATION_FN) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtSetCancelTimeout(Timeout: c_long) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtSetComTimeout(Binding: RPC_BINDING_HANDLE, Timeout: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtSetServerStackSize(ThreadStackSize: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtStatsVectorFree(StatsVector: ?*(?*RPC_STATS_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtStopServerListening(Binding: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcMgmtWaitServerListen() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNetworkInqProtseqsA(ProtseqVector: ?*(?*RPC_PROTSEQ_VECTORA)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNetworkInqProtseqsW(ProtseqVector: ?*(?*RPC_PROTSEQ_VECTORW)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNetworkIsProtseqValidA(Protseq: RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNetworkIsProtseqValidW(Protseq: RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNsBindingInqEntryNameA(Binding: RPC_BINDING_HANDLE, EntryNameSyntax: c_ulong, EntryName: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcNsBindingInqEntryNameW(Binding: RPC_BINDING_HANDLE, EntryNameSyntax: c_ulong, EntryName: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcObjectInqType(ObjUuid: ?*UUID, TypeUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcObjectSetInqFn(InquiryFn: ?*RPC_OBJECT_INQ_FN) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcObjectSetType(ObjUuid: ?*UUID, TypeUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcProtseqVectorFreeA(ProtseqVector: ?*(?*RPC_PROTSEQ_VECTORA)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcProtseqVectorFreeW(ProtseqVector: ?*(?*RPC_PROTSEQ_VECTORW)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcRaiseException(exception: RPC_STATUS) noreturn;
pub extern "rpcrt4" stdcallcc fn RpcRevertContainerImpersonation() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcRevertToSelf() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcRevertToSelfEx(BindingHandle: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerCompleteSecurityCallback(BindingHandle: RPC_BINDING_HANDLE, Status: RPC_STATUS) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqBindingHandle(Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqBindings(BindingVector: ?*(?*RPC_BINDING_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqBindingsEx(SecurityDescriptor: ?*c_void, BindingVector: ?*(?*RPC_BINDING_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqCallAttributesA(ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqCallAttributesW(ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqDefaultPrincNameA(AuthnSvc: c_ulong, PrincName: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqDefaultPrincNameW(AuthnSvc: c_ulong, PrincName: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInqIf(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, MgrEpv: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupActivate(IfGroup: RPC_INTERFACE_GROUP) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupClose(IfGroup: RPC_INTERFACE_GROUP) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupCreateA(Interfaces: ?*RPC_INTERFACE_TEMPLATEA, NumIfs: c_ulong, Endpoints: ?*RPC_ENDPOINT_TEMPLATEA, NumEndpoints: c_ulong, IdlePeriod: c_ulong, IdleCallbackFn: ?*RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN, IdleCallbackContext: ?*c_void, IfGroup: PRPC_INTERFACE_GROUP) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupCreateW(Interfaces: ?*RPC_INTERFACE_TEMPLATEW, NumIfs: c_ulong, Endpoints: ?*RPC_ENDPOINT_TEMPLATEW, NumEndpoints: c_ulong, IdlePeriod: c_ulong, IdleCallbackFn: ?*RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN, IdleCallbackContext: ?*c_void, IfGroup: PRPC_INTERFACE_GROUP) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupDeactivate(IfGroup: RPC_INTERFACE_GROUP, ForceDeactivation: c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerInterfaceGroupInqBindings(IfGroup: RPC_INTERFACE_GROUP, BindingVector: ?*(?*RPC_BINDING_VECTOR)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerListen(MinimumCallThreads: c_uint, MaxCalls: c_uint, DontWait: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterAuthInfoA(ServerPrincName: RPC_CSTR, AuthnSvc: c_ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterAuthInfoW(ServerPrincName: RPC_WSTR, AuthnSvc: c_ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterIf(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, MgrEpv: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterIf2(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, MgrEpv: ?*c_void, Flags: c_uint, MaxCalls: c_uint, MaxRpcSize: c_uint, IfCallbackFn: ?*RPC_IF_CALLBACK_FN) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterIf3(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, MgrEpv: ?*c_void, Flags: c_uint, MaxCalls: c_uint, MaxRpcSize: c_uint, IfCallback: ?*RPC_IF_CALLBACK_FN, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerRegisterIfEx(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, MgrEpv: ?*c_void, Flags: c_uint, MaxCalls: c_uint, IfCallback: ?*RPC_IF_CALLBACK_FN) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerSubscribeForNotification(Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationType: RPC_NOTIFICATION_TYPES, NotificationInfo: ?*RPC_ASYNC_NOTIFICATION_INFO) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerTestCancel(BindingHandle: RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUnregisterIf(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, WaitForCallsToComplete: c_uint) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUnregisterIfEx(IfSpec: RPC_IF_HANDLE, MgrTypeUuid: ?*UUID, RundownContextHandles: c_int) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUnsubscribeForNotification(Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationsQueued: ?*c_ulong) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseAllProtseqs(MaxCalls: c_uint, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseAllProtseqsEx(MaxCalls: c_uint, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseAllProtseqsIf(MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseAllProtseqsIfEx(MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqA(Protseq: RPC_CSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqEpA(Protseq: RPC_CSTR, MaxCalls: c_uint, Endpoint: RPC_CSTR, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqEpExA(Protseq: RPC_CSTR, MaxCalls: c_uint, Endpoint: RPC_CSTR, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqEpExW(Protseq: RPC_WSTR, MaxCalls: c_uint, Endpoint: RPC_WSTR, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqEpW(Protseq: RPC_WSTR, MaxCalls: c_uint, Endpoint: RPC_WSTR, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqExA(Protseq: RPC_CSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqExW(Protseq: RPC_WSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqIfA(Protseq: RPC_CSTR, MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqIfExA(Protseq: RPC_CSTR, MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqIfExW(Protseq: RPC_WSTR, MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void, Policy: PRPC_POLICY) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqIfW(Protseq: RPC_WSTR, MaxCalls: c_uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerUseProtseqW(Protseq: RPC_WSTR, MaxCalls: c_uint, SecurityDescriptor: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcServerYield() void;
pub extern "rpcrt4" stdcallcc fn RpcSmAllocate(Size: usize, pStatus: ?*RPC_STATUS) ?*c_void;
pub extern "rpcrt4" stdcallcc fn RpcSmClientFree(pNodeToFree: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmDestroyClientContext(ContextHandle: ?*(?*c_void)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmDisableAllocate() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmEnableAllocate() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmFree(NodeToFree: ?*c_void) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmGetThreadHandle(pStatus: ?*RPC_STATUS) RPC_SS_THREAD_HANDLE;
pub extern "rpcrt4" stdcallcc fn RpcSmSetClientAllocFree(ClientAlloc: ?*RPC_CLIENT_ALLOC, ClientFree: ?*RPC_CLIENT_FREE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmSetThreadHandle(Id: RPC_SS_THREAD_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSmSwapClientAllocFree(ClientAlloc: ?*RPC_CLIENT_ALLOC, ClientFree: ?*RPC_CLIENT_FREE, OldClientAlloc: ?*(?*RPC_CLIENT_ALLOC), OldClientFree: ?*(?*RPC_CLIENT_FREE)) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSsAllocate(Size: usize) ?*c_void;
pub extern "rpcrt4" stdcallcc fn RpcSsContextLockExclusive(ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSsContextLockShared(ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSsDestroyClientContext(ContextHandle: ?*(?*c_void)) void;
pub extern "rpcrt4" stdcallcc fn RpcSsDisableAllocate() void;
pub extern "rpcrt4" stdcallcc fn RpcSsDontSerializeContext() void;
pub extern "rpcrt4" stdcallcc fn RpcSsEnableAllocate() void;
pub extern "rpcrt4" stdcallcc fn RpcSsFree(NodeToFree: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn RpcSsGetContextBinding(ContextHandle: ?*c_void, Binding: ?*RPC_BINDING_HANDLE) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcSsGetThreadHandle() RPC_SS_THREAD_HANDLE;
pub extern "rpcrt4" stdcallcc fn RpcSsSetClientAllocFree(ClientAlloc: ?*RPC_CLIENT_ALLOC, ClientFree: ?*RPC_CLIENT_FREE) void;
pub extern "rpcrt4" stdcallcc fn RpcSsSetThreadHandle(Id: RPC_SS_THREAD_HANDLE) void;
pub extern "rpcrt4" stdcallcc fn RpcSsSwapClientAllocFree(ClientAlloc: ?*RPC_CLIENT_ALLOC, ClientFree: ?*RPC_CLIENT_FREE, OldClientAlloc: ?*(?*RPC_CLIENT_ALLOC), OldClientFree: ?*(?*RPC_CLIENT_FREE)) void;
pub extern "rpcrt4" stdcallcc fn RpcStringBindingComposeA(ObjUuid: RPC_CSTR, ProtSeq: RPC_CSTR, NetworkAddr: RPC_CSTR, Endpoint: RPC_CSTR, Options: RPC_CSTR, StringBinding: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcStringBindingComposeW(ObjUuid: RPC_WSTR, ProtSeq: RPC_WSTR, NetworkAddr: RPC_WSTR, Endpoint: RPC_WSTR, Options: RPC_WSTR, StringBinding: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcStringBindingParseA(StringBinding: RPC_CSTR, ObjUuid: ?*RPC_CSTR, Protseq: ?*RPC_CSTR, NetworkAddr: ?*RPC_CSTR, Endpoint: ?*RPC_CSTR, NetworkOptions: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcStringBindingParseW(StringBinding: RPC_WSTR, ObjUuid: ?*RPC_WSTR, Protseq: ?*RPC_WSTR, NetworkAddr: ?*RPC_WSTR, Endpoint: ?*RPC_WSTR, NetworkOptions: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcStringFreeA(String: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcStringFreeW(String: ?*RPC_WSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcTestCancel() RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn RpcUserFree(AsyncHandle: handle_t, pBuffer: ?*c_void) void;
pub extern "rpcrt4" stdcallcc fn UuidCompare(Uuid1: ?*UUID, Uuid2: ?*UUID, Status: ?*RPC_STATUS) c_int;
pub extern "rpcrt4" stdcallcc fn UuidCreate(Uuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidCreateNil(NilUuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidCreateSequential(Uuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidEqual(Uuid1: ?*UUID, Uuid2: ?*UUID, Status: ?*RPC_STATUS) c_int;
pub extern "rpcrt4" stdcallcc fn UuidFromStringA(StringUuid: RPC_CSTR, Uuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidFromStringW(StringUuid: RPC_WSTR, Uuid: ?*UUID) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidHash(Uuid: ?*UUID, Status: ?*RPC_STATUS) c_ushort;
pub extern "rpcrt4" stdcallcc fn UuidIsNil(Uuid: ?*UUID, Status: ?*RPC_STATUS) c_int;
pub extern "rpcrt4" stdcallcc fn UuidToStringA(Uuid: ?*const UUID, StringUuid: ?*RPC_CSTR) RPC_STATUS;
pub extern "rpcrt4" stdcallcc fn UuidToStringW(Uuid: ?*const UUID, StringUuid: ?*RPC_WSTR) RPC_STATUS;
pub extern "samsrv" stdcallcc fn MIDL_user_allocate(size: usize) ?*c_void;
pub extern "scarddlg" stdcallcc fn GetOpenCardNameA(arg0: LPOPENCARDNAMEA) LONG;
pub extern "scarddlg" stdcallcc fn GetOpenCardNameW(arg0: LPOPENCARDNAMEW) LONG;
pub extern "scarddlg" stdcallcc fn SCardDlgExtendedError() LONG;
pub extern "scarddlg" stdcallcc fn SCardUIDlgSelectCardA(arg0: LPOPENCARDNAME_EXA) LONG;
pub extern "scarddlg" stdcallcc fn SCardUIDlgSelectCardW(arg0: LPOPENCARDNAME_EXW) LONG;
pub extern "shell32" stdcallcc fn AssocCreateForClasses(rgClasses: ?*const ASSOCIATIONELEMENT, cClasses: ULONG, riid: ?*const IID, ppv: ?*(?*c_void)) HRESULT;
pub extern "shell32" stdcallcc fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: ?*c_int) ?*LPWSTR;
pub extern "shell32" stdcallcc fn DoEnvironmentSubstA(pszSrc: LPSTR, cchSrc: UINT) DWORD;
pub extern "shell32" stdcallcc fn DoEnvironmentSubstW(pszSrc: LPWSTR, cchSrc: UINT) DWORD;
pub extern "shell32" stdcallcc fn DragAcceptFiles(hWnd: HWND, fAccept: BOOL) void;
pub extern "shell32" stdcallcc fn DragFinish(hDrop: HDROP) void;
pub extern "shell32" stdcallcc fn DragQueryFileA(hDrop: HDROP, iFile: UINT, lpszFile: LPSTR, cch: UINT) UINT;
pub extern "shell32" stdcallcc fn DragQueryFileW(hDrop: HDROP, iFile: UINT, lpszFile: LPWSTR, cch: UINT) UINT;
pub extern "shell32" stdcallcc fn DragQueryPoint(hDrop: HDROP, ppt: ?*POINT) BOOL;
pub extern "shell32" stdcallcc fn DuplicateIcon(hInst: HINSTANCE, hIcon: HICON) HICON;
pub extern "shell32" stdcallcc fn ExtractAssociatedIconA(hInst: HINSTANCE, pszIconPath: LPSTR, piIcon: ?*WORD) HICON;
pub extern "shell32" stdcallcc fn ExtractAssociatedIconExA(hInst: HINSTANCE, pszIconPath: LPSTR, piIconIndex: ?*WORD, piIconId: ?*WORD) HICON;
pub extern "shell32" stdcallcc fn ExtractAssociatedIconExW(hInst: HINSTANCE, pszIconPath: LPWSTR, piIconIndex: ?*WORD, piIconId: ?*WORD) HICON;
pub extern "shell32" stdcallcc fn ExtractAssociatedIconW(hInst: HINSTANCE, pszIconPath: LPWSTR, piIcon: ?*WORD) HICON;
pub extern "shell32" stdcallcc fn ExtractIconA(hInst: HINSTANCE, pszExeFileName: LPCSTR, nIconIndex: UINT) HICON;
pub extern "shell32" stdcallcc fn ExtractIconExA(lpszFile: LPCSTR, nIconIndex: c_int, phiconLarge: ?*HICON, phiconSmall: ?*HICON, nIcons: UINT) UINT;
pub extern "shell32" stdcallcc fn ExtractIconExW(lpszFile: LPCWSTR, nIconIndex: c_int, phiconLarge: ?*HICON, phiconSmall: ?*HICON, nIcons: UINT) UINT;
pub extern "shell32" stdcallcc fn ExtractIconW(hInst: HINSTANCE, pszExeFileName: LPCWSTR, nIconIndex: UINT) HICON;
pub extern "shell32" stdcallcc fn FindExecutableA(lpFile: LPCSTR, lpDirectory: LPCSTR, lpResult: LPSTR) HINSTANCE;
pub extern "shell32" stdcallcc fn FindExecutableW(lpFile: LPCWSTR, lpDirectory: LPCWSTR, lpResult: LPWSTR) HINSTANCE;
pub extern "shell32" stdcallcc fn InitNetworkAddressControl() BOOL;
pub extern "shell32" stdcallcc fn IsLFNDriveA(pszPath: LPCSTR) BOOL;
pub extern "shell32" stdcallcc fn IsLFNDriveW(pszPath: LPCWSTR) BOOL;
pub extern "shell32" stdcallcc fn SHAppBarMessage(dwMessage: DWORD, pData: PAPPBARDATA) UINT_PTR;
pub extern "shell32" stdcallcc fn SHCreateProcessAsUserW(pscpi: PSHCREATEPROCESSINFOW) BOOL;
pub extern "shell32" stdcallcc fn SHEmptyRecycleBinA(hwnd: HWND, pszRootPath: LPCSTR, dwFlags: DWORD) HRESULT;
pub extern "shell32" stdcallcc fn SHEmptyRecycleBinW(hwnd: HWND, pszRootPath: LPCWSTR, dwFlags: DWORD) HRESULT;
pub extern "shell32" stdcallcc fn SHEnumerateUnreadMailAccountsW(hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPWSTR, cchMailAddress: c_int) HRESULT;
pub extern "shell32" stdcallcc fn SHEvaluateSystemCommandTemplate(pszCmdTemplate: PCWSTR, ppszApplication: ?*PWSTR, ppszCommandLine: ?*PWSTR, ppszParameters: ?*PWSTR) HRESULT;
pub extern "shell32" stdcallcc fn SHFileOperationA(lpFileOp: LPSHFILEOPSTRUCTA) c_int;
pub extern "shell32" stdcallcc fn SHFileOperationW(lpFileOp: LPSHFILEOPSTRUCTW) c_int;
pub extern "shell32" stdcallcc fn SHFreeNameMappings(hNameMappings: HANDLE) void;
pub extern "shell32" stdcallcc fn SHGetDiskFreeSpaceExA(pszDirectoryName: LPCSTR, pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER, pulTotalNumberOfBytes: ?*ULARGE_INTEGER, pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER) BOOL;
pub extern "shell32" stdcallcc fn SHGetDiskFreeSpaceExW(pszDirectoryName: LPCWSTR, pulFreeBytesAvailableToCaller: ?*ULARGE_INTEGER, pulTotalNumberOfBytes: ?*ULARGE_INTEGER, pulTotalNumberOfFreeBytes: ?*ULARGE_INTEGER) BOOL;
pub extern "shell32" stdcallcc fn SHGetDriveMedia(pszDrive: PCWSTR, pdwMediaContent: ?*DWORD) HRESULT;
pub extern "shell32" stdcallcc fn SHGetFileInfoA(pszPath: LPCSTR, dwFileAttributes: DWORD, psfi: ?*SHFILEINFOA, cbFileInfo: UINT, uFlags: UINT) DWORD_PTR;
pub extern "shell32" stdcallcc fn SHGetFileInfoW(pszPath: LPCWSTR, dwFileAttributes: DWORD, psfi: ?*SHFILEINFOW, cbFileInfo: UINT, uFlags: UINT) DWORD_PTR;
pub extern "shell32" stdcallcc fn SHGetImageList(iImageList: c_int, riid: ?*const IID, ppvObj: ?*(?*c_void)) HRESULT;
pub extern "shell32" stdcallcc fn SHGetLocalizedName(pszPath: PCWSTR, pszResModule: PWSTR, cch: UINT, pidsRes: ?*c_int) HRESULT;
pub extern "shell32" stdcallcc fn SHGetNewLinkInfoA(pszLinkTo: LPCSTR, pszDir: LPCSTR, pszName: LPSTR, pfMustCopy: ?*BOOL, uFlags: UINT) BOOL;
pub extern "shell32" stdcallcc fn SHGetNewLinkInfoW(pszLinkTo: LPCWSTR, pszDir: LPCWSTR, pszName: LPWSTR, pfMustCopy: ?*BOOL, uFlags: UINT) BOOL;
pub extern "shell32" stdcallcc fn SHGetPropertyStoreForWindow(hwnd: HWND, riid: ?*const IID, ppv: ?*(?*c_void)) HRESULT;
pub extern "shell32" stdcallcc fn SHGetStockIconInfo(siid: SHSTOCKICONID, uFlags: UINT, psii: ?*SHSTOCKICONINFO) HRESULT;
pub extern "shell32" stdcallcc fn SHGetUnreadMailCountW(hKeyUser: HKEY, pszMailAddress: LPCWSTR, pdwCount: ?*DWORD, pFileTime: ?*FILETIME, pszShellExecuteCommand: LPWSTR, cchShellExecuteCommand: c_int) HRESULT;
pub extern "shell32" stdcallcc fn SHInvokePrinterCommandA(hwnd: HWND, uAction: UINT, lpBuf1: LPCSTR, lpBuf2: LPCSTR, fModal: BOOL) BOOL;
pub extern "shell32" stdcallcc fn SHInvokePrinterCommandW(hwnd: HWND, uAction: UINT, lpBuf1: LPCWSTR, lpBuf2: LPCWSTR, fModal: BOOL) BOOL;
pub extern "shell32" stdcallcc fn SHIsFileAvailableOffline(pwszPath: PCWSTR, pdwStatus: ?*DWORD) HRESULT;
pub extern "shell32" stdcallcc fn SHLoadNonloadedIconOverlayIdentifiers() HRESULT;
pub extern "shell32" stdcallcc fn SHQueryRecycleBinA(pszRootPath: LPCSTR, pSHQueryRBInfo: LPSHQUERYRBINFO) HRESULT;
pub extern "shell32" stdcallcc fn SHQueryRecycleBinW(pszRootPath: LPCWSTR, pSHQueryRBInfo: LPSHQUERYRBINFO) HRESULT;
pub extern "shell32" stdcallcc fn SHQueryUserNotificationState(pquns: ?*QUERY_USER_NOTIFICATION_STATE) HRESULT;
pub extern "shell32" stdcallcc fn SHRemoveLocalizedName(pszPath: PCWSTR) HRESULT;
pub extern "shell32" stdcallcc fn SHSetLocalizedName(pszPath: PCWSTR, pszResModule: PCWSTR, idsRes: c_int) HRESULT;
pub extern "shell32" stdcallcc fn SHSetUnreadMailCountW(pszMailAddress: LPCWSTR, dwCount: DWORD, pszShellExecuteCommand: LPCWSTR) HRESULT;
pub extern "shell32" stdcallcc fn SHTestTokenMembership(hToken: HANDLE, ulRID: ULONG) BOOL;
pub extern "shell32" stdcallcc fn ShellAboutA(hWnd: HWND, szApp: LPCSTR, szOtherStuff: LPCSTR, hIcon: HICON) INT;
pub extern "shell32" stdcallcc fn ShellAboutW(hWnd: HWND, szApp: LPCWSTR, szOtherStuff: LPCWSTR, hIcon: HICON) INT;
pub extern "shell32" stdcallcc fn ShellExecuteA(hwnd: HWND, lpOperation: LPCSTR, lpFile: LPCSTR, lpParameters: LPCSTR, lpDirectory: LPCSTR, nShowCmd: INT) HINSTANCE;
pub extern "shell32" stdcallcc fn ShellExecuteExA(pExecInfo: ?*SHELLEXECUTEINFOA) BOOL;
pub extern "shell32" stdcallcc fn ShellExecuteExW(pExecInfo: ?*SHELLEXECUTEINFOW) BOOL;
pub extern "shell32" stdcallcc fn ShellExecuteW(hwnd: HWND, lpOperation: LPCWSTR, lpFile: LPCWSTR, lpParameters: LPCWSTR, lpDirectory: LPCWSTR, nShowCmd: INT) HINSTANCE;
pub extern "shell32" stdcallcc fn ShellMessageBoxA(hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCSTR, lpcTitle: LPCSTR, fuStyle: UINT) c_int;
pub extern "shell32" stdcallcc fn ShellMessageBoxW(hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCWSTR, lpcTitle: LPCWSTR, fuStyle: UINT) c_int;
pub extern "shell32" stdcallcc fn Shell_NotifyIconA(dwMessage: DWORD, lpData: PNOTIFYICONDATAA) BOOL;
pub extern "shell32" stdcallcc fn Shell_NotifyIconGetRect(identifier: ?*const NOTIFYICONIDENTIFIER, iconLocation: ?*RECT) HRESULT;
pub extern "shell32" stdcallcc fn Shell_NotifyIconW(dwMessage: DWORD, lpData: PNOTIFYICONDATAW) BOOL;
pub extern "urlmon" stdcallcc fn AsyncInstallDistributionUnit(szDistUnit: LPCWSTR, szTYPE: LPCWSTR, szExt: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szURL: LPCWSTR, pbc: ?*IBindCtx, pvReserved: LPVOID, flags: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCombineIUri(pBaseUri: ?*IUri, pRelativeUri: ?*IUri, dwCombineFlags: DWORD, ppCombinedUri: ?*(?*IUri), dwReserved: DWORD_PTR) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCombineUrl(pwzBaseUrl: LPCWSTR, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: ?*DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCombineUrlEx(pBaseUri: ?*IUri, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, ppCombinedUri: ?*(?*IUri), dwReserved: DWORD_PTR) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCompareUrl(pwzUrl1: LPCWSTR, pwzUrl2: LPCWSTR, dwFlags: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCreateSecurityManager(pSP: ?*IServiceProvider, ppSM: ?*(?*IInternetSecurityManager), dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetCreateZoneManager(pSP: ?*IServiceProvider, ppZM: ?*(?*IInternetZoneManager), dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetGetProtocolFlags(pwzUrl: LPCWSTR, pdwFlags: ?*DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetGetSecurityUrl(pwszUrl: LPCWSTR, ppwszSecUrl: ?*LPWSTR, psuAction: PSUACTION, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetGetSecurityUrlEx(pUri: ?*IUri, ppSecUri: ?*(?*IUri), psuAction: PSUACTION, dwReserved: DWORD_PTR) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetGetSession(dwSessionMode: DWORD, ppIInternetSession: ?*(?*IInternetSession), dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetIsFeatureEnabled(FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetIsFeatureEnabledForIUri(FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, pIUri: ?*IUri, pSecMgr: ?*IInternetSecurityManagerEx2) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetIsFeatureEnabledForUrl(FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, szURL: LPCWSTR, pSecMgr: ?*IInternetSecurityManager) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetIsFeatureZoneElevationEnabled(szFromURL: LPCWSTR, szToURL: LPCWSTR, pSecMgr: ?*IInternetSecurityManager, dwFlags: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetParseIUri(pIUri: ?*IUri, ParseAction: PARSEACTION, dwFlags: DWORD, pwzResult: LPWSTR, cchResult: DWORD, pcchResult: ?*DWORD, dwReserved: DWORD_PTR) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetParseUrl(pwzUrl: LPCWSTR, ParseAction: PARSEACTION, dwFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: ?*DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetQueryInfo(pwzUrl: LPCWSTR, QueryOptions: QUERYOPTION, dwQueryFlags: DWORD, pvBuffer: LPVOID, cbBuffer: DWORD, pcbBuffer: ?*DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn CoInternetSetFeatureEnabled(FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, fEnable: BOOL) HRESULT;
pub extern "urlmon" stdcallcc fn CopyBindInfo(pcbiSrc: ?*const BINDINFO, pbiDest: ?*BINDINFO) HRESULT;
pub extern "urlmon" stdcallcc fn CopyStgMedium(pcstgmedSrc: ?*const STGMEDIUM, pstgmedDest: ?*STGMEDIUM) HRESULT;
pub extern "urlmon" stdcallcc fn GetSoftwareUpdateInfo(szDistUnit: LPCWSTR, psdi: LPSOFTDISTINFO) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkGoBack(pUnk: ?*IUnknown) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkGoForward(pUnk: ?*IUnknown) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkNavigateMoniker(pUnk: ?*IUnknown, pmkTarget: ?*IMoniker) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkNavigateString(pUnk: ?*IUnknown, szTarget: LPCWSTR) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkSimpleNavigateToMoniker(pmkTarget: ?*IMoniker, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: ?*IUnknown, pbc: ?*IBindCtx, arg5: ?*IBindStatusCallback, grfHLNF: DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn HlinkSimpleNavigateToString(szTarget: LPCWSTR, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: ?*IUnknown, pbc: ?*IBindCtx, arg5: ?*IBindStatusCallback, grfHLNF: DWORD, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IBindHost_MonikerBindToObject_Proxy(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*c_void)) HRESULT;
pub extern "urlmon" stdcallcc fn IBindHost_MonikerBindToObject_Stub(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "urlmon" stdcallcc fn IBindHost_MonikerBindToStorage_Proxy(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*c_void)) HRESULT;
pub extern "urlmon" stdcallcc fn IBindHost_MonikerBindToStorage_Stub(This: ?*IBindHost, pMk: ?*IMoniker, pBC: ?*IBindCtx, pBSC: ?*IBindStatusCallback, riid: ?*const IID, ppvObj: ?*(?*IUnknown)) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallbackEx_GetBindInfoEx_Proxy(This: ?*IBindStatusCallbackEx, grfBINDF: ?*DWORD, pbindinfo: ?*BINDINFO, grfBINDF2: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallbackEx_GetBindInfoEx_Stub(This: ?*IBindStatusCallbackEx, grfBINDF: ?*DWORD, pbindinfo: ?*RemBINDINFO, pstgmed: ?*RemSTGMEDIUM, grfBINDF2: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallback_GetBindInfo_Proxy(This: ?*IBindStatusCallback, grfBINDF: ?*DWORD, pbindinfo: ?*BINDINFO) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallback_GetBindInfo_Stub(This: ?*IBindStatusCallback, grfBINDF: ?*DWORD, pbindinfo: ?*RemBINDINFO, pstgmed: ?*RemSTGMEDIUM) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallback_OnDataAvailable_Proxy(This: ?*IBindStatusCallback, grfBSCF: DWORD, dwSize: DWORD, pformatetc: ?*FORMATETC, pstgmed: ?*STGMEDIUM) HRESULT;
pub extern "urlmon" stdcallcc fn IBindStatusCallback_OnDataAvailable_Stub(This: ?*IBindStatusCallback, grfBSCF: DWORD, dwSize: DWORD, pformatetc: ?*RemFORMATETC, pstgmed: ?*RemSTGMEDIUM) HRESULT;
pub extern "urlmon" stdcallcc fn IBinding_GetBindResult_Proxy(This: ?*IBinding, pclsidProtocol: ?*CLSID, pdwResult: ?*DWORD, pszResult: ?*LPOLESTR, pdwReserved: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IBinding_GetBindResult_Stub(This: ?*IBinding, pclsidProtocol: ?*CLSID, pdwResult: ?*DWORD, pszResult: ?*LPOLESTR, dwReserved: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IEGetUserPrivateNamespaceName() PWSTR;
pub extern "urlmon" stdcallcc fn IWinInetHttpInfo_QueryInfo_Proxy(This: ?*IWinInetHttpInfo, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: ?*DWORD, pdwFlags: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IWinInetHttpInfo_QueryInfo_Stub(This: ?*IWinInetHttpInfo, dwOption: DWORD, pBuffer: ?*BYTE, pcbBuf: ?*DWORD, pdwFlags: ?*DWORD, pdwReserved: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IWinInetInfo_QueryOption_Proxy(This: ?*IWinInetInfo, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IWinInetInfo_QueryOption_Stub(This: ?*IWinInetInfo, dwOption: DWORD, pBuffer: ?*BYTE, pcbBuf: ?*DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn IsLoggingEnabledA(pszUrl: LPCSTR) BOOL;
pub extern "urlmon" stdcallcc fn IsLoggingEnabledW(pwszUrl: LPCWSTR) BOOL;
pub extern "urlmon" stdcallcc fn ReleaseBindInfo(pbindinfo: ?*BINDINFO) void;
pub extern "urlmon" stdcallcc fn SetSoftwareUpdateAdvertisementState(szDistUnit: LPCWSTR, dwAdState: DWORD, dwAdvertisedVersionMS: DWORD, dwAdvertisedVersionLS: DWORD) HRESULT;
pub extern "urlmon" stdcallcc fn URLDownloadToCacheFileA(arg0: LPUNKNOWN, arg1: LPCSTR, arg2: LPSTR, cchFileName: DWORD, arg4: DWORD, arg5: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLDownloadToCacheFileW(arg0: LPUNKNOWN, arg1: LPCWSTR, arg2: LPWSTR, cchFileName: DWORD, arg4: DWORD, arg5: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLDownloadToFileA(arg0: LPUNKNOWN, arg1: LPCSTR, arg2: LPCSTR, arg3: DWORD, arg4: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLDownloadToFileW(arg0: LPUNKNOWN, arg1: LPCWSTR, arg2: LPCWSTR, arg3: DWORD, arg4: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenBlockingStreamA(arg0: LPUNKNOWN, arg1: LPCSTR, arg2: ?*LPSTREAM, arg3: DWORD, arg4: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenBlockingStreamW(arg0: LPUNKNOWN, arg1: LPCWSTR, arg2: ?*LPSTREAM, arg3: DWORD, arg4: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenPullStreamA(arg0: LPUNKNOWN, arg1: LPCSTR, arg2: DWORD, arg3: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenPullStreamW(arg0: LPUNKNOWN, arg1: LPCWSTR, arg2: DWORD, arg3: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenStreamA(arg0: LPUNKNOWN, arg1: LPCSTR, arg2: DWORD, arg3: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn URLOpenStreamW(arg0: LPUNKNOWN, arg1: LPCWSTR, arg2: DWORD, arg3: LPBINDSTATUSCALLBACK) HRESULT;
pub extern "urlmon" stdcallcc fn WriteHitLogging(lpLogginginfo: LPHIT_LOGGING_INFO) BOOL;
pub extern "user32" stdcallcc fn ActivateKeyboardLayout(hkl: HKL, Flags: UINT) HKL;
pub extern "user32" stdcallcc fn AddClipboardFormatListener(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn AdjustWindowRect(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL) BOOL;
pub extern "user32" stdcallcc fn AdjustWindowRectEx(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD) BOOL;
pub extern "user32" stdcallcc fn AdjustWindowRectExForDpi(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD, dpi: UINT) BOOL;
pub extern "user32" stdcallcc fn AllowSetForegroundWindow(dwProcessId: DWORD) BOOL;
pub extern "user32" stdcallcc fn AnimateWindow(hWnd: HWND, dwTime: DWORD, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn AnyPopup() BOOL;
pub extern "user32" stdcallcc fn AppendMenuA(hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
pub extern "user32" stdcallcc fn AppendMenuW(hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn AreDpiAwarenessContextsEqual(dpiContextA: DPI_AWARENESS_CONTEXT, dpiContextB: DPI_AWARENESS_CONTEXT) BOOL;
pub extern "user32" stdcallcc fn ArrangeIconicWindows(hWnd: HWND) UINT;
pub extern "user32" stdcallcc fn AttachThreadInput(idAttach: DWORD, idAttachTo: DWORD, fAttach: BOOL) BOOL;
pub extern "user32" stdcallcc fn BeginDeferWindowPos(nNumWindows: c_int) HDWP;
pub extern "user32" stdcallcc fn BeginPaint(hWnd: HWND, lpPaint: LPPAINTSTRUCT) HDC;
pub extern "user32" stdcallcc fn BlockInput(fBlockIt: BOOL) BOOL;
pub extern "user32" stdcallcc fn BringWindowToTop(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn BroadcastSystemMessageA(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) c_long;
pub extern "user32" stdcallcc fn BroadcastSystemMessageExA(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO) c_long;
pub extern "user32" stdcallcc fn BroadcastSystemMessageExW(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO) c_long;
pub extern "user32" stdcallcc fn BroadcastSystemMessageW(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) c_long;
pub extern "user32" stdcallcc fn CalculatePopupWindowPosition(anchorPoint: ?*const POINT, windowSize: ?*const SIZE, flags: UINT, excludeRect: ?*RECT, popupWindowPosition: ?*RECT) BOOL;
pub extern "user32" stdcallcc fn CallMsgFilterA(lpMsg: LPMSG, nCode: c_int) BOOL;
pub extern "user32" stdcallcc fn CallMsgFilterW(lpMsg: LPMSG, nCode: c_int) BOOL;
pub extern "user32" stdcallcc fn CallNextHookEx(hhk: HHOOK, nCode: c_int, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn CallWindowProcA(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn CallWindowProcW(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn CancelShutdown() BOOL;
pub extern "user32" stdcallcc fn CascadeWindows(hwndParent: HWND, wHow: UINT, lpRect: ?*const RECT, cKids: UINT, lpKids: ?*const HWND) WORD;
pub extern "user32" stdcallcc fn ChangeClipboardChain(hWndRemove: HWND, hWndNewNext: HWND) BOOL;
pub extern "user32" stdcallcc fn ChangeDisplaySettingsA(lpDevMode: ?*DEVMODEA, dwFlags: DWORD) LONG;
pub extern "user32" stdcallcc fn ChangeDisplaySettingsExA(lpszDeviceName: LPCSTR, lpDevMode: ?*DEVMODEA, hwnd: HWND, dwflags: DWORD, lParam: LPVOID) LONG;
pub extern "user32" stdcallcc fn ChangeDisplaySettingsExW(lpszDeviceName: LPCWSTR, lpDevMode: ?*DEVMODEW, hwnd: HWND, dwflags: DWORD, lParam: LPVOID) LONG;
pub extern "user32" stdcallcc fn ChangeDisplaySettingsW(lpDevMode: ?*DEVMODEW, dwFlags: DWORD) LONG;
pub extern "user32" stdcallcc fn ChangeMenuA(hMenu: HMENU, cmd: UINT, lpszNewItem: LPCSTR, cmdInsert: UINT, flags: UINT) BOOL;
pub extern "user32" stdcallcc fn ChangeMenuW(hMenu: HMENU, cmd: UINT, lpszNewItem: LPCWSTR, cmdInsert: UINT, flags: UINT) BOOL;
pub extern "user32" stdcallcc fn ChangeWindowMessageFilter(message: UINT, dwFlag: DWORD) BOOL;
pub extern "user32" stdcallcc fn ChangeWindowMessageFilterEx(hwnd: HWND, message: UINT, action: DWORD, pChangeFilterStruct: PCHANGEFILTERSTRUCT) BOOL;
pub extern "user32" stdcallcc fn CharLowerA(lpsz: LPSTR) LPSTR;
pub extern "user32" stdcallcc fn CharLowerBuffA(lpsz: LPSTR, cchLength: DWORD) DWORD;
pub extern "user32" stdcallcc fn CharLowerBuffW(lpsz: LPWSTR, cchLength: DWORD) DWORD;
pub extern "user32" stdcallcc fn CharLowerW(lpsz: LPWSTR) LPWSTR;
pub extern "user32" stdcallcc fn CharNextA(lpsz: LPCSTR) LPSTR;
pub extern "user32" stdcallcc fn CharNextExA(CodePage: WORD, lpCurrentChar: LPCSTR, dwFlags: DWORD) LPSTR;
pub extern "user32" stdcallcc fn CharNextW(lpsz: LPCWSTR) LPWSTR;
pub extern "user32" stdcallcc fn CharPrevA(lpszStart: LPCSTR, lpszCurrent: LPCSTR) LPSTR;
pub extern "user32" stdcallcc fn CharPrevExA(CodePage: WORD, lpStart: LPCSTR, lpCurrentChar: LPCSTR, dwFlags: DWORD) LPSTR;
pub extern "user32" stdcallcc fn CharPrevW(lpszStart: LPCWSTR, lpszCurrent: LPCWSTR) LPWSTR;
pub extern "user32" stdcallcc fn CharToOemA(pSrc: LPCSTR, pDst: LPSTR) BOOL;
pub extern "user32" stdcallcc fn CharToOemBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn CharToOemBuffW(lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn CharToOemW(pSrc: LPCWSTR, pDst: LPSTR) BOOL;
pub extern "user32" stdcallcc fn CharUpperA(lpsz: LPSTR) LPSTR;
pub extern "user32" stdcallcc fn CharUpperBuffA(lpsz: LPSTR, cchLength: DWORD) DWORD;
pub extern "user32" stdcallcc fn CharUpperBuffW(lpsz: LPWSTR, cchLength: DWORD) DWORD;
pub extern "user32" stdcallcc fn CharUpperW(lpsz: LPWSTR) LPWSTR;
pub extern "user32" stdcallcc fn CheckDlgButton(hDlg: HWND, nIDButton: c_int, uCheck: UINT) BOOL;
pub extern "user32" stdcallcc fn CheckMenuItem(hMenu: HMENU, uIDCheckItem: UINT, uCheck: UINT) DWORD;
pub extern "user32" stdcallcc fn CheckMenuRadioItem(hmenu: HMENU, first: UINT, last: UINT, check: UINT, flags: UINT) BOOL;
pub extern "user32" stdcallcc fn CheckRadioButton(hDlg: HWND, nIDFirstButton: c_int, nIDLastButton: c_int, nIDCheckButton: c_int) BOOL;
pub extern "user32" stdcallcc fn ChildWindowFromPoint(hWndParent: HWND, Point: POINT) HWND;
pub extern "user32" stdcallcc fn ChildWindowFromPointEx(hwnd: HWND, pt: POINT, flags: UINT) HWND;
pub extern "user32" stdcallcc fn ClientToScreen(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn ClipCursor(lpRect: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn CloseClipboard() BOOL;
pub extern "user32" stdcallcc fn CloseDesktop(hDesktop: HDESK) BOOL;
pub extern "user32" stdcallcc fn CloseGestureInfoHandle(hGestureInfo: HGESTUREINFO) BOOL;
pub extern "user32" stdcallcc fn CloseTouchInputHandle(hTouchInput: HTOUCHINPUT) BOOL;
pub extern "user32" stdcallcc fn CloseWindow(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn CloseWindowStation(hWinSta: HWINSTA) BOOL;
pub extern "user32" stdcallcc fn CopyAcceleratorTableA(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: c_int) c_int;
pub extern "user32" stdcallcc fn CopyAcceleratorTableW(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: c_int) c_int;
pub extern "user32" stdcallcc fn CopyIcon(hIcon: HICON) HICON;
pub extern "user32" stdcallcc fn CopyImage(h: HANDLE, type_0: UINT, cx: c_int, cy: c_int, flags: UINT) HANDLE;
pub extern "user32" stdcallcc fn CopyRect(lprcDst: LPRECT, lprcSrc: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn CountClipboardFormats() c_int;
pub extern "user32" stdcallcc fn CreateAcceleratorTableA(paccel: LPACCEL, cAccel: c_int) HACCEL;
pub extern "user32" stdcallcc fn CreateAcceleratorTableW(paccel: LPACCEL, cAccel: c_int) HACCEL;
pub extern "user32" stdcallcc fn CreateCaret(hWnd: HWND, hBitmap: HBITMAP, nWidth: c_int, nHeight: c_int) BOOL;
pub extern "user32" stdcallcc fn CreateCursor(hInst: HINSTANCE, xHotSpot: c_int, yHotSpot: c_int, nWidth: c_int, nHeight: c_int, pvANDPlane: ?*const c_void, pvXORPlane: ?*const c_void) HCURSOR;
pub extern "user32" stdcallcc fn CreateDesktopA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: ?*DEVMODEA, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HDESK;
pub extern "user32" stdcallcc fn CreateDesktopExA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: ?*DEVMODEA, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID) HDESK;
pub extern "user32" stdcallcc fn CreateDesktopExW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: ?*DEVMODEW, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID) HDESK;
pub extern "user32" stdcallcc fn CreateDesktopW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: ?*DEVMODEW, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HDESK;
pub extern "user32" stdcallcc fn CreateDialogIndirectParamA(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateDialogIndirectParamW(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateDialogParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateDialogParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateIcon(hInstance: HINSTANCE, nWidth: c_int, nHeight: c_int, cPlanes: BYTE, cBitsPixel: BYTE, lpbANDbits: ?*const BYTE, lpbXORbits: ?*const BYTE) HICON;
pub extern "user32" stdcallcc fn CreateIconFromResource(presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD) HICON;
pub extern "user32" stdcallcc fn CreateIconFromResourceEx(presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD, cxDesired: c_int, cyDesired: c_int, Flags: UINT) HICON;
pub extern "user32" stdcallcc fn CreateIconIndirect(piconinfo: PICONINFO) HICON;
pub extern "user32" stdcallcc fn CreateMDIWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateMDIWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM) HWND;
pub extern "user32" stdcallcc fn CreateMenu() HMENU;
pub extern "user32" stdcallcc fn CreatePopupMenu() HMENU;
pub extern "user32" stdcallcc fn CreateWindowExA(dwExStyle: DWORD, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID) HWND;
pub extern "user32" stdcallcc fn CreateWindowExW(dwExStyle: DWORD, lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID) HWND;
pub extern "user32" stdcallcc fn CreateWindowStationA(lpwinsta: LPCSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HWINSTA;
pub extern "user32" stdcallcc fn CreateWindowStationW(lpwinsta: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HWINSTA;
pub extern "user32" stdcallcc fn DdeAbandonTransaction(idInst: DWORD, hConv: HCONV, idTransaction: DWORD) BOOL;
pub extern "user32" stdcallcc fn DdeAccessData(hData: HDDEDATA, pcbDataSize: LPDWORD) LPBYTE;
pub extern "user32" stdcallcc fn DdeAddData(hData: HDDEDATA, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD) HDDEDATA;
pub extern "user32" stdcallcc fn DdeClientTransaction(pData: LPBYTE, cbData: DWORD, hConv: HCONV, hszItem: HSZ, wFmt: UINT, wType: UINT, dwTimeout: DWORD, pdwResult: LPDWORD) HDDEDATA;
pub extern "user32" stdcallcc fn DdeCmpStringHandles(hsz1: HSZ, hsz2: HSZ) c_int;
pub extern "user32" stdcallcc fn DdeConnect(idInst: DWORD, hszService: HSZ, hszTopic: HSZ, pCC: PCONVCONTEXT) HCONV;
pub extern "user32" stdcallcc fn DdeConnectList(idInst: DWORD, hszService: HSZ, hszTopic: HSZ, hConvList: HCONVLIST, pCC: PCONVCONTEXT) HCONVLIST;
pub extern "user32" stdcallcc fn DdeCreateDataHandle(idInst: DWORD, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD, hszItem: HSZ, wFmt: UINT, afCmd: UINT) HDDEDATA;
pub extern "user32" stdcallcc fn DdeCreateStringHandleA(idInst: DWORD, psz: LPCSTR, iCodePage: c_int) HSZ;
pub extern "user32" stdcallcc fn DdeCreateStringHandleW(idInst: DWORD, psz: LPCWSTR, iCodePage: c_int) HSZ;
pub extern "user32" stdcallcc fn DdeDisconnect(hConv: HCONV) BOOL;
pub extern "user32" stdcallcc fn DdeDisconnectList(hConvList: HCONVLIST) BOOL;
pub extern "user32" stdcallcc fn DdeEnableCallback(idInst: DWORD, hConv: HCONV, wCmd: UINT) BOOL;
pub extern "user32" stdcallcc fn DdeFreeDataHandle(hData: HDDEDATA) BOOL;
pub extern "user32" stdcallcc fn DdeFreeStringHandle(idInst: DWORD, hsz: HSZ) BOOL;
pub extern "user32" stdcallcc fn DdeGetData(hData: HDDEDATA, pDst: LPBYTE, cbMax: DWORD, cbOff: DWORD) DWORD;
pub extern "user32" stdcallcc fn DdeGetLastError(idInst: DWORD) UINT;
pub extern "user32" stdcallcc fn DdeImpersonateClient(hConv: HCONV) BOOL;
pub extern "user32" stdcallcc fn DdeInitializeA(pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD) UINT;
pub extern "user32" stdcallcc fn DdeInitializeW(pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD) UINT;
pub extern "user32" stdcallcc fn DdeKeepStringHandle(idInst: DWORD, hsz: HSZ) BOOL;
pub extern "user32" stdcallcc fn DdeNameService(idInst: DWORD, hsz1: HSZ, hsz2: HSZ, afCmd: UINT) HDDEDATA;
pub extern "user32" stdcallcc fn DdePostAdvise(idInst: DWORD, hszTopic: HSZ, hszItem: HSZ) BOOL;
pub extern "user32" stdcallcc fn DdeQueryConvInfo(hConv: HCONV, idTransaction: DWORD, pConvInfo: PCONVINFO) UINT;
pub extern "user32" stdcallcc fn DdeQueryNextServer(hConvList: HCONVLIST, hConvPrev: HCONV) HCONV;
pub extern "user32" stdcallcc fn DdeQueryStringA(idInst: DWORD, hsz: HSZ, psz: LPSTR, cchMax: DWORD, iCodePage: c_int) DWORD;
pub extern "user32" stdcallcc fn DdeQueryStringW(idInst: DWORD, hsz: HSZ, psz: LPWSTR, cchMax: DWORD, iCodePage: c_int) DWORD;
pub extern "user32" stdcallcc fn DdeReconnect(hConv: HCONV) HCONV;
pub extern "user32" stdcallcc fn DdeSetQualityOfService(hwndClient: HWND, pqosNew: ?*const SECURITY_QUALITY_OF_SERVICE, pqosPrev: PSECURITY_QUALITY_OF_SERVICE) BOOL;
pub extern "user32" stdcallcc fn DdeSetUserHandle(hConv: HCONV, id: DWORD, hUser: DWORD_PTR) BOOL;
pub extern "user32" stdcallcc fn DdeUnaccessData(hData: HDDEDATA) BOOL;
pub extern "user32" stdcallcc fn DdeUninitialize(idInst: DWORD) BOOL;
pub extern "user32" stdcallcc fn DefDlgProcA(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefDlgProcW(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefFrameProcA(hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefFrameProcW(hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefMDIChildProcA(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefMDIChildProcW(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefRawInputProc(paRawInput: ?*PRAWINPUT, nInput: INT, cbSizeHeader: UINT) LRESULT;
pub extern "user32" stdcallcc fn DefWindowProcA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DefWindowProcW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn DeferWindowPos(hWinPosInfo: HDWP, hWnd: HWND, hWndInsertAfter: HWND, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) HDWP;
pub extern "user32" stdcallcc fn DeleteMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn DeregisterShellHookWindow(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn DestroyAcceleratorTable(hAccel: HACCEL) BOOL;
pub extern "user32" stdcallcc fn DestroyCaret() BOOL;
pub extern "user32" stdcallcc fn DestroyCursor(hCursor: HCURSOR) BOOL;
pub extern "user32" stdcallcc fn DestroyIcon(hIcon: HICON) BOOL;
pub extern "user32" stdcallcc fn DestroyMenu(hMenu: HMENU) BOOL;
pub extern "user32" stdcallcc fn DestroyWindow(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn DialogBoxIndirectParamA(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
pub extern "user32" stdcallcc fn DialogBoxIndirectParamW(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
pub extern "user32" stdcallcc fn DialogBoxParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
pub extern "user32" stdcallcc fn DialogBoxParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
pub extern "user32" stdcallcc fn DisableProcessWindowsGhosting() void;
pub extern "user32" stdcallcc fn DispatchMessageA(lpMsg: ?*const MSG) LRESULT;
pub extern "user32" stdcallcc fn DispatchMessageW(lpMsg: ?*const MSG) LRESULT;
pub extern "user32" stdcallcc fn DisplayConfigGetDeviceInfo(requestPacket: ?*DISPLAYCONFIG_DEVICE_INFO_HEADER) LONG;
pub extern "user32" stdcallcc fn DisplayConfigSetDeviceInfo(setPacket: ?*DISPLAYCONFIG_DEVICE_INFO_HEADER) LONG;
pub extern "user32" stdcallcc fn DlgDirListA(hDlg: HWND, lpPathSpec: LPSTR, nIDListBox: c_int, nIDStaticPath: c_int, uFileType: UINT) c_int;
pub extern "user32" stdcallcc fn DlgDirListComboBoxA(hDlg: HWND, lpPathSpec: LPSTR, nIDComboBox: c_int, nIDStaticPath: c_int, uFiletype: UINT) c_int;
pub extern "user32" stdcallcc fn DlgDirListComboBoxW(hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: c_int, nIDStaticPath: c_int, uFiletype: UINT) c_int;
pub extern "user32" stdcallcc fn DlgDirListW(hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: c_int, nIDStaticPath: c_int, uFileType: UINT) c_int;
pub extern "user32" stdcallcc fn DlgDirSelectComboBoxExA(hwndDlg: HWND, lpString: LPSTR, cchOut: c_int, idComboBox: c_int) BOOL;
pub extern "user32" stdcallcc fn DlgDirSelectComboBoxExW(hwndDlg: HWND, lpString: LPWSTR, cchOut: c_int, idComboBox: c_int) BOOL;
pub extern "user32" stdcallcc fn DlgDirSelectExA(hwndDlg: HWND, lpString: LPSTR, chCount: c_int, idListBox: c_int) BOOL;
pub extern "user32" stdcallcc fn DlgDirSelectExW(hwndDlg: HWND, lpString: LPWSTR, chCount: c_int, idListBox: c_int) BOOL;
pub extern "user32" stdcallcc fn DragDetect(hwnd: HWND, pt: POINT) BOOL;
pub extern "user32" stdcallcc fn DragObject(hwndParent: HWND, hwndFrom: HWND, fmt: UINT, data: ULONG_PTR, hcur: HCURSOR) DWORD;
pub extern "user32" stdcallcc fn DrawAnimatedRects(hwnd: HWND, idAni: c_int, lprcFrom: ?*const RECT, lprcTo: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn DrawCaption(hwnd: HWND, hdc: HDC, lprect: ?*const RECT, flags: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawEdge(hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawFocusRect(hDC: HDC, lprc: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn DrawFrameControl(arg0: HDC, arg1: LPRECT, arg2: UINT, arg3: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawIcon(hDC: HDC, X: c_int, Y: c_int, hIcon: HICON) BOOL;
pub extern "user32" stdcallcc fn DrawIconEx(hdc: HDC, xLeft: c_int, yTop: c_int, hIcon: HICON, cxWidth: c_int, cyWidth: c_int, istepIfAniCur: UINT, hbrFlickerFreeDraw: HBRUSH, diFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawMenuBar(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn DrawStateA(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawStateW(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn DrawTextA(hdc: HDC, lpchText: LPCSTR, cchText: c_int, lprc: LPRECT, format: UINT) c_int;
pub extern "user32" stdcallcc fn DrawTextExA(hdc: HDC, lpchText: LPSTR, cchText: c_int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS) c_int;
pub extern "user32" stdcallcc fn DrawTextExW(hdc: HDC, lpchText: LPWSTR, cchText: c_int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS) c_int;
pub extern "user32" stdcallcc fn DrawTextW(hdc: HDC, lpchText: LPCWSTR, cchText: c_int, lprc: LPRECT, format: UINT) c_int;
pub extern "user32" stdcallcc fn EmptyClipboard() BOOL;
pub extern "user32" stdcallcc fn EnableMenuItem(hMenu: HMENU, uIDEnableItem: UINT, uEnable: UINT) BOOL;
pub extern "user32" stdcallcc fn EnableMouseInPointer(fEnable: BOOL) BOOL;
pub extern "user32" stdcallcc fn EnableNonClientDpiScaling(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn EnableScrollBar(hWnd: HWND, wSBflags: UINT, wArrows: UINT) BOOL;
pub extern "user32" stdcallcc fn EnableWindow(hWnd: HWND, bEnable: BOOL) BOOL;
pub extern "user32" stdcallcc fn EndDeferWindowPos(hWinPosInfo: HDWP) BOOL;
pub extern "user32" stdcallcc fn EndDialog(hDlg: HWND, nResult: INT_PTR) BOOL;
pub extern "user32" stdcallcc fn EndMenu() BOOL;
pub extern "user32" stdcallcc fn EndPaint(hWnd: HWND, lpPaint: ?*const PAINTSTRUCT) BOOL;
pub extern "user32" stdcallcc fn EnumChildWindows(hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumClipboardFormats(format: UINT) UINT;
pub extern "user32" stdcallcc fn EnumDesktopWindows(hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumDesktopsA(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumDesktopsW(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumDisplayDevicesA(lpDevice: LPCSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEA, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn EnumDisplayDevicesW(lpDevice: LPCWSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEW, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn EnumDisplayMonitors(hdc: HDC, lprcClip: LPCRECT, lpfnEnum: MONITORENUMPROC, dwData: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumDisplaySettingsA(lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: ?*DEVMODEA) BOOL;
pub extern "user32" stdcallcc fn EnumDisplaySettingsExA(lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: ?*DEVMODEA, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn EnumDisplaySettingsExW(lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: ?*DEVMODEW, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn EnumDisplaySettingsW(lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: ?*DEVMODEW) BOOL;
pub extern "user32" stdcallcc fn EnumPropsA(hWnd: HWND, lpEnumFunc: PROPENUMPROCA) c_int;
pub extern "user32" stdcallcc fn EnumPropsExA(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXA, lParam: LPARAM) c_int;
pub extern "user32" stdcallcc fn EnumPropsExW(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXW, lParam: LPARAM) c_int;
pub extern "user32" stdcallcc fn EnumPropsW(hWnd: HWND, lpEnumFunc: PROPENUMPROCW) c_int;
pub extern "user32" stdcallcc fn EnumThreadWindows(dwThreadId: DWORD, lpfn: WNDENUMPROC, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EnumWindows(lpEnumFunc: WNDENUMPROC, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn EqualRect(lprc1: ?*const RECT, lprc2: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn EvaluateProximityToPolygon(numVertices: UINT32, controlPolygon: ?*const POINT, pHitTestingInput: ?*const TOUCH_HIT_TESTING_INPUT, pProximityEval: ?*TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) BOOL;
pub extern "user32" stdcallcc fn EvaluateProximityToRect(controlBoundingBox: ?*const RECT, pHitTestingInput: ?*const TOUCH_HIT_TESTING_INPUT, pProximityEval: ?*TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) BOOL;
pub extern "user32" stdcallcc fn ExcludeUpdateRgn(hDC: HDC, hWnd: HWND) c_int;
pub extern "user32" stdcallcc fn ExitWindowsEx(uFlags: UINT, dwReason: DWORD) BOOL;
pub extern "user32" stdcallcc fn FillRect(hDC: HDC, lprc: ?*const RECT, hbr: HBRUSH) c_int;
pub extern "user32" stdcallcc fn FindWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR) HWND;
pub extern "user32" stdcallcc fn FindWindowExA(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCSTR, lpszWindow: LPCSTR) HWND;
pub extern "user32" stdcallcc fn FindWindowExW(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCWSTR, lpszWindow: LPCWSTR) HWND;
pub extern "user32" stdcallcc fn FindWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR) HWND;
pub extern "user32" stdcallcc fn FlashWindow(hWnd: HWND, bInvert: BOOL) BOOL;
pub extern "user32" stdcallcc fn FlashWindowEx(pfwi: PFLASHWINFO) BOOL;
pub extern "user32" stdcallcc fn FrameRect(hDC: HDC, lprc: ?*const RECT, hbr: HBRUSH) c_int;
pub extern "user32" stdcallcc fn FreeDDElParam(msg: UINT, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn GetActiveWindow() HWND;
pub extern "user32" stdcallcc fn GetAltTabInfoA(hwnd: HWND, iItem: c_int, pati: PALTTABINFO, pszItemText: LPSTR, cchItemText: UINT) BOOL;
pub extern "user32" stdcallcc fn GetAltTabInfoW(hwnd: HWND, iItem: c_int, pati: PALTTABINFO, pszItemText: LPWSTR, cchItemText: UINT) BOOL;
pub extern "user32" stdcallcc fn GetAncestor(hwnd: HWND, gaFlags: UINT) HWND;
pub extern "user32" stdcallcc fn GetAsyncKeyState(vKey: c_int) SHORT;
pub extern "user32" stdcallcc fn GetAutoRotationState(pState: PAR_STATE) BOOL;
pub extern "user32" stdcallcc fn GetAwarenessFromDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) DPI_AWARENESS;
pub extern "user32" stdcallcc fn GetCIMSSM(inputMessageSource: ?*INPUT_MESSAGE_SOURCE) BOOL;
pub extern "user32" stdcallcc fn GetCapture() HWND;
pub extern "user32" stdcallcc fn GetCaretBlinkTime() UINT;
pub extern "user32" stdcallcc fn GetCaretPos(lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn GetClassInfoA(hInstance: HINSTANCE, lpClassName: LPCSTR, lpWndClass: LPWNDCLASSA) BOOL;
pub extern "user32" stdcallcc fn GetClassInfoExA(hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA) BOOL;
pub extern "user32" stdcallcc fn GetClassInfoExW(hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW) BOOL;
pub extern "user32" stdcallcc fn GetClassInfoW(hInstance: HINSTANCE, lpClassName: LPCWSTR, lpWndClass: LPWNDCLASSW) BOOL;
pub extern "user32" stdcallcc fn GetClassLongA(hWnd: HWND, nIndex: c_int) DWORD;
pub extern "user32" stdcallcc fn GetClassLongPtrA(hWnd: HWND, nIndex: c_int) ULONG_PTR;
pub extern "user32" stdcallcc fn GetClassLongPtrW(hWnd: HWND, nIndex: c_int) ULONG_PTR;
pub extern "user32" stdcallcc fn GetClassLongW(hWnd: HWND, nIndex: c_int) DWORD;
pub extern "user32" stdcallcc fn GetClassNameA(hWnd: HWND, lpClassName: LPSTR, nMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetClassNameW(hWnd: HWND, lpClassName: LPWSTR, nMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetClassWord(hWnd: HWND, nIndex: c_int) WORD;
pub extern "user32" stdcallcc fn GetClientRect(hWnd: HWND, lpRect: LPRECT) BOOL;
pub extern "user32" stdcallcc fn GetClipCursor(lpRect: LPRECT) BOOL;
pub extern "user32" stdcallcc fn GetClipboardData(uFormat: UINT) HANDLE;
pub extern "user32" stdcallcc fn GetClipboardFormatNameA(format: UINT, lpszFormatName: LPSTR, cchMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetClipboardFormatNameW(format: UINT, lpszFormatName: LPWSTR, cchMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetClipboardOwner() HWND;
pub extern "user32" stdcallcc fn GetClipboardSequenceNumber() DWORD;
pub extern "user32" stdcallcc fn GetClipboardViewer() HWND;
pub extern "user32" stdcallcc fn GetComboBoxInfo(hwndCombo: HWND, pcbi: PCOMBOBOXINFO) BOOL;
pub extern "user32" stdcallcc fn GetCurrentInputMessageSource(inputMessageSource: ?*INPUT_MESSAGE_SOURCE) BOOL;
pub extern "user32" stdcallcc fn GetCursor() HCURSOR;
pub extern "user32" stdcallcc fn GetCursorInfo(pci: PCURSORINFO) BOOL;
pub extern "user32" stdcallcc fn GetCursorPos(lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn GetDC(hWnd: HWND) HDC;
pub extern "user32" stdcallcc fn GetDCEx(hWnd: HWND, hrgnClip: HRGN, flags: DWORD) HDC;
pub extern "user32" stdcallcc fn GetDesktopWindow() HWND;
pub extern "user32" stdcallcc fn GetDialogBaseUnits() c_long;
pub extern "user32" stdcallcc fn GetDialogControlDpiChangeBehavior(hWnd: HWND) DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
pub extern "user32" stdcallcc fn GetDialogDpiChangeBehavior(hDlg: HWND) DIALOG_DPI_CHANGE_BEHAVIORS;
pub extern "user32" stdcallcc fn GetDisplayAutoRotationPreferences(pOrientation: ?*ORIENTATION_PREFERENCE) BOOL;
pub extern "user32" stdcallcc fn GetDisplayConfigBufferSizes(flags: UINT32, numPathArrayElements: ?*UINT32, numModeInfoArrayElements: ?*UINT32) LONG;
pub extern "user32" stdcallcc fn GetDlgCtrlID(hWnd: HWND) c_int;
pub extern "user32" stdcallcc fn GetDlgItem(hDlg: HWND, nIDDlgItem: c_int) HWND;
pub extern "user32" stdcallcc fn GetDlgItemInt(hDlg: HWND, nIDDlgItem: c_int, lpTranslated: ?*BOOL, bSigned: BOOL) UINT;
pub extern "user32" stdcallcc fn GetDlgItemTextA(hDlg: HWND, nIDDlgItem: c_int, lpString: LPSTR, cchMax: c_int) UINT;
pub extern "user32" stdcallcc fn GetDlgItemTextW(hDlg: HWND, nIDDlgItem: c_int, lpString: LPWSTR, cchMax: c_int) UINT;
pub extern "user32" stdcallcc fn GetDoubleClickTime() UINT;
pub extern "user32" stdcallcc fn GetDpiForSystem() UINT;
pub extern "user32" stdcallcc fn GetDpiForWindow(hwnd: HWND) UINT;
pub extern "user32" stdcallcc fn GetFocus() HWND;
pub extern "user32" stdcallcc fn GetForegroundWindow() HWND;
pub extern "user32" stdcallcc fn GetGUIThreadInfo(idThread: DWORD, pgui: PGUITHREADINFO) BOOL;
pub extern "user32" stdcallcc fn GetGestureConfig(hwnd: HWND, dwReserved: DWORD, dwFlags: DWORD, pcIDs: PUINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT) BOOL;
pub extern "user32" stdcallcc fn GetGestureExtraArgs(hGestureInfo: HGESTUREINFO, cbExtraArgs: UINT, pExtraArgs: PBYTE) BOOL;
pub extern "user32" stdcallcc fn GetGestureInfo(hGestureInfo: HGESTUREINFO, pGestureInfo: PGESTUREINFO) BOOL;
pub extern "user32" stdcallcc fn GetGuiResources(hProcess: HANDLE, uiFlags: DWORD) DWORD;
pub extern "user32" stdcallcc fn GetIconInfo(hIcon: HICON, piconinfo: PICONINFO) BOOL;
pub extern "user32" stdcallcc fn GetIconInfoExA(hicon: HICON, piconinfo: PICONINFOEXA) BOOL;
pub extern "user32" stdcallcc fn GetIconInfoExW(hicon: HICON, piconinfo: PICONINFOEXW) BOOL;
pub extern "user32" stdcallcc fn GetInputState() BOOL;
pub extern "user32" stdcallcc fn GetKBCodePage() UINT;
pub extern "user32" stdcallcc fn GetKeyNameTextA(lParam: LONG, lpString: LPSTR, cchSize: c_int) c_int;
pub extern "user32" stdcallcc fn GetKeyNameTextW(lParam: LONG, lpString: LPWSTR, cchSize: c_int) c_int;
pub extern "user32" stdcallcc fn GetKeyState(nVirtKey: c_int) SHORT;
pub extern "user32" stdcallcc fn GetKeyboardLayout(idThread: DWORD) HKL;
pub extern "user32" stdcallcc fn GetKeyboardLayoutList(nBuff: c_int, lpList: ?*HKL) c_int;
pub extern "user32" stdcallcc fn GetKeyboardLayoutNameA(pwszKLID: LPSTR) BOOL;
pub extern "user32" stdcallcc fn GetKeyboardLayoutNameW(pwszKLID: LPWSTR) BOOL;
pub extern "user32" stdcallcc fn GetKeyboardState(lpKeyState: PBYTE) BOOL;
pub extern "user32" stdcallcc fn GetKeyboardType(nTypeFlag: c_int) c_int;
pub extern "user32" stdcallcc fn GetLastActivePopup(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn GetLastInputInfo(plii: PLASTINPUTINFO) BOOL;
pub extern "user32" stdcallcc fn GetLayeredWindowAttributes(hwnd: HWND, pcrKey: ?*COLORREF, pbAlpha: ?*BYTE, pdwFlags: ?*DWORD) BOOL;
pub extern "user32" stdcallcc fn GetListBoxInfo(hwnd: HWND) DWORD;
pub extern "user32" stdcallcc fn GetMenu(hWnd: HWND) HMENU;
pub extern "user32" stdcallcc fn GetMenuBarInfo(hwnd: HWND, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO) BOOL;
pub extern "user32" stdcallcc fn GetMenuCheckMarkDimensions() LONG;
pub extern "user32" stdcallcc fn GetMenuContextHelpId(arg0: HMENU) DWORD;
pub extern "user32" stdcallcc fn GetMenuDefaultItem(hMenu: HMENU, fByPos: UINT, gmdiFlags: UINT) UINT;
pub extern "user32" stdcallcc fn GetMenuInfo(arg0: HMENU, arg1: LPMENUINFO) BOOL;
pub extern "user32" stdcallcc fn GetMenuItemCount(hMenu: HMENU) c_int;
pub extern "user32" stdcallcc fn GetMenuItemID(hMenu: HMENU, nPos: c_int) UINT;
pub extern "user32" stdcallcc fn GetMenuItemInfoA(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOA) BOOL;
pub extern "user32" stdcallcc fn GetMenuItemInfoW(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOW) BOOL;
pub extern "user32" stdcallcc fn GetMenuItemRect(hWnd: HWND, hMenu: HMENU, uItem: UINT, lprcItem: LPRECT) BOOL;
pub extern "user32" stdcallcc fn GetMenuState(hMenu: HMENU, uId: UINT, uFlags: UINT) UINT;
pub extern "user32" stdcallcc fn GetMenuStringA(hMenu: HMENU, uIDItem: UINT, lpString: LPSTR, cchMax: c_int, flags: UINT) c_int;
pub extern "user32" stdcallcc fn GetMenuStringW(hMenu: HMENU, uIDItem: UINT, lpString: LPWSTR, cchMax: c_int, flags: UINT) c_int;
pub extern "user32" stdcallcc fn GetMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) BOOL;
pub extern "user32" stdcallcc fn GetMessageExtraInfo() LPARAM;
pub extern "user32" stdcallcc fn GetMessagePos() DWORD;
pub extern "user32" stdcallcc fn GetMessageTime() LONG;
pub extern "user32" stdcallcc fn GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) BOOL;
pub extern "user32" stdcallcc fn GetMonitorInfoA(hMonitor: HMONITOR, lpmi: LPMONITORINFO) BOOL;
pub extern "user32" stdcallcc fn GetMonitorInfoW(hMonitor: HMONITOR, lpmi: LPMONITORINFO) BOOL;
pub extern "user32" stdcallcc fn GetMouseMovePointsEx(cbSize: UINT, lppt: LPMOUSEMOVEPOINT, lpptBuf: LPMOUSEMOVEPOINT, nBufPoints: c_int, resolution: DWORD) c_int;
pub extern "user32" stdcallcc fn GetNextDlgGroupItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) HWND;
pub extern "user32" stdcallcc fn GetNextDlgTabItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) HWND;
pub extern "user32" stdcallcc fn GetOpenClipboardWindow() HWND;
pub extern "user32" stdcallcc fn GetParent(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn GetPhysicalCursorPos(lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn GetPointerCursorId(pointerId: UINT32, cursorId: ?*UINT32) BOOL;
pub extern "user32" stdcallcc fn GetPointerDevice(device: HANDLE, pointerDevice: ?*POINTER_DEVICE_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerDeviceCursors(device: HANDLE, cursorCount: ?*UINT32, deviceCursors: ?*POINTER_DEVICE_CURSOR_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerDeviceProperties(device: HANDLE, propertyCount: ?*UINT32, pointerProperties: ?*POINTER_DEVICE_PROPERTY) BOOL;
pub extern "user32" stdcallcc fn GetPointerDeviceRects(device: HANDLE, pointerDeviceRect: ?*RECT, displayRect: ?*RECT) BOOL;
pub extern "user32" stdcallcc fn GetPointerDevices(deviceCount: ?*UINT32, pointerDevices: ?*POINTER_DEVICE_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFrameInfo(pointerId: UINT32, pointerCount: ?*UINT32, pointerInfo: ?*POINTER_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFrameInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, pointerCount: ?*UINT32, pointerInfo: ?*POINTER_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFramePenInfo(pointerId: UINT32, pointerCount: ?*UINT32, penInfo: ?*POINTER_PEN_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFramePenInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, pointerCount: ?*UINT32, penInfo: ?*POINTER_PEN_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFrameTouchInfo(pointerId: UINT32, pointerCount: ?*UINT32, touchInfo: ?*POINTER_TOUCH_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerFrameTouchInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, pointerCount: ?*UINT32, touchInfo: ?*POINTER_TOUCH_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerInfo(pointerId: UINT32, pointerInfo: ?*POINTER_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, pointerInfo: ?*POINTER_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerInputTransform(pointerId: UINT32, historyCount: UINT32, inputTransform: ?*INPUT_TRANSFORM) BOOL;
pub extern "user32" stdcallcc fn GetPointerPenInfo(pointerId: UINT32, penInfo: ?*POINTER_PEN_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerPenInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, penInfo: ?*POINTER_PEN_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerTouchInfo(pointerId: UINT32, touchInfo: ?*POINTER_TOUCH_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerTouchInfoHistory(pointerId: UINT32, entriesCount: ?*UINT32, touchInfo: ?*POINTER_TOUCH_INFO) BOOL;
pub extern "user32" stdcallcc fn GetPointerType(pointerId: UINT32, pointerType: ?*POINTER_INPUT_TYPE) BOOL;
pub extern "user32" stdcallcc fn GetPriorityClipboardFormat(paFormatPriorityList: ?*UINT, cFormats: c_int) c_int;
pub extern "user32" stdcallcc fn GetProcessDefaultLayout(pdwDefaultLayout: ?*DWORD) BOOL;
pub extern "user32" stdcallcc fn GetProcessWindowStation() HWINSTA;
pub extern "user32" stdcallcc fn GetPropA(hWnd: HWND, lpString: LPCSTR) HANDLE;
pub extern "user32" stdcallcc fn GetPropW(hWnd: HWND, lpString: LPCWSTR) HANDLE;
pub extern "user32" stdcallcc fn GetQueueStatus(flags: UINT) DWORD;
pub extern "user32" stdcallcc fn GetRawInputBuffer(pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: UINT) UINT;
pub extern "user32" stdcallcc fn GetRawInputData(hRawInput: HRAWINPUT, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT, cbSizeHeader: UINT) UINT;
pub extern "user32" stdcallcc fn GetRawInputDeviceInfoA(hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT) UINT;
pub extern "user32" stdcallcc fn GetRawInputDeviceInfoW(hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT) UINT;
pub extern "user32" stdcallcc fn GetRawInputDeviceList(pRawInputDeviceList: PRAWINPUTDEVICELIST, puiNumDevices: PUINT, cbSize: UINT) UINT;
pub extern "user32" stdcallcc fn GetRawPointerDeviceData(pointerId: UINT32, historyCount: UINT32, propertiesCount: UINT32, pProperties: ?*POINTER_DEVICE_PROPERTY, pValues: ?*LONG) BOOL;
pub extern "user32" stdcallcc fn GetRegisteredRawInputDevices(pRawInputDevices: PRAWINPUTDEVICE, puiNumDevices: PUINT, cbSize: UINT) UINT;
pub extern "user32" stdcallcc fn GetScrollBarInfo(hwnd: HWND, idObject: LONG, psbi: PSCROLLBARINFO) BOOL;
pub extern "user32" stdcallcc fn GetScrollInfo(hwnd: HWND, nBar: c_int, lpsi: LPSCROLLINFO) BOOL;
pub extern "user32" stdcallcc fn GetScrollPos(hWnd: HWND, nBar: c_int) c_int;
pub extern "user32" stdcallcc fn GetScrollRange(hWnd: HWND, nBar: c_int, lpMinPos: LPINT, lpMaxPos: LPINT) BOOL;
pub extern "user32" stdcallcc fn GetShellWindow() HWND;
pub extern "user32" stdcallcc fn GetSubMenu(hMenu: HMENU, nPos: c_int) HMENU;
pub extern "user32" stdcallcc fn GetSysColor(nIndex: c_int) DWORD;
pub extern "user32" stdcallcc fn GetSysColorBrush(nIndex: c_int) HBRUSH;
pub extern "user32" stdcallcc fn GetSystemMenu(hWnd: HWND, bRevert: BOOL) HMENU;
pub extern "user32" stdcallcc fn GetSystemMetrics(nIndex: c_int) c_int;
pub extern "user32" stdcallcc fn GetSystemMetricsForDpi(nIndex: c_int, dpi: UINT) c_int;
pub extern "user32" stdcallcc fn GetTabbedTextExtentA(hdc: HDC, lpString: LPCSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: ?*const INT) DWORD;
pub extern "user32" stdcallcc fn GetTabbedTextExtentW(hdc: HDC, lpString: LPCWSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: ?*const INT) DWORD;
pub extern "user32" stdcallcc fn GetThreadDesktop(dwThreadId: DWORD) HDESK;
pub extern "user32" stdcallcc fn GetThreadDpiAwarenessContext() DPI_AWARENESS_CONTEXT;
pub extern "user32" stdcallcc fn GetTitleBarInfo(hwnd: HWND, pti: PTITLEBARINFO) BOOL;
pub extern "user32" stdcallcc fn GetTopWindow(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn GetTouchInputInfo(hTouchInput: HTOUCHINPUT, cInputs: UINT, pInputs: PTOUCHINPUT, cbSize: c_int) BOOL;
pub extern "user32" stdcallcc fn GetUnpredictedMessagePos() DWORD;
pub extern "user32" stdcallcc fn GetUpdateRect(hWnd: HWND, lpRect: LPRECT, bErase: BOOL) BOOL;
pub extern "user32" stdcallcc fn GetUpdateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) c_int;
pub extern "user32" stdcallcc fn GetUpdatedClipboardFormats(lpuiFormats: PUINT, cFormats: UINT, pcFormatsOut: PUINT) BOOL;
pub extern "user32" stdcallcc fn GetUserObjectInformationA(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "user32" stdcallcc fn GetUserObjectInformationW(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "user32" stdcallcc fn GetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub extern "user32" stdcallcc fn GetWindow(hWnd: HWND, uCmd: UINT) HWND;
pub extern "user32" stdcallcc fn GetWindowContextHelpId(arg0: HWND) DWORD;
pub extern "user32" stdcallcc fn GetWindowDC(hWnd: HWND) HDC;
pub extern "user32" stdcallcc fn GetWindowDisplayAffinity(hWnd: HWND, pdwAffinity: ?*DWORD) BOOL;
pub extern "user32" stdcallcc fn GetWindowDpiAwarenessContext(hwnd: HWND) DPI_AWARENESS_CONTEXT;
pub extern "user32" stdcallcc fn GetWindowFeedbackSetting(hwnd: HWND, feedback: FEEDBACK_TYPE, dwFlags: DWORD, pSize: ?*UINT32, config: ?*c_void) BOOL;
pub extern "user32" stdcallcc fn GetWindowInfo(hwnd: HWND, pwi: PWINDOWINFO) BOOL;
pub extern "user32" stdcallcc fn GetWindowLongA(hWnd: HWND, nIndex: c_int) LONG;
pub extern "user32" stdcallcc fn GetWindowLongPtrA(hWnd: HWND, nIndex: c_int) LONG_PTR;
pub extern "user32" stdcallcc fn GetWindowLongPtrW(hWnd: HWND, nIndex: c_int) LONG_PTR;
pub extern "user32" stdcallcc fn GetWindowLongW(hWnd: HWND, nIndex: c_int) LONG;
pub extern "user32" stdcallcc fn GetWindowModuleFileNameA(hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: UINT) UINT;
pub extern "user32" stdcallcc fn GetWindowModuleFileNameW(hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: UINT) UINT;
pub extern "user32" stdcallcc fn GetWindowPlacement(hWnd: HWND, lpwndpl: ?*WINDOWPLACEMENT) BOOL;
pub extern "user32" stdcallcc fn GetWindowRect(hWnd: HWND, lpRect: LPRECT) BOOL;
pub extern "user32" stdcallcc fn GetWindowRgn(hWnd: HWND, hRgn: HRGN) c_int;
pub extern "user32" stdcallcc fn GetWindowRgnBox(hWnd: HWND, lprc: LPRECT) c_int;
pub extern "user32" stdcallcc fn GetWindowTextA(hWnd: HWND, lpString: LPSTR, nMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetWindowTextLengthA(hWnd: HWND) c_int;
pub extern "user32" stdcallcc fn GetWindowTextLengthW(hWnd: HWND) c_int;
pub extern "user32" stdcallcc fn GetWindowTextW(hWnd: HWND, lpString: LPWSTR, nMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn GetWindowThreadProcessId(hWnd: HWND, lpdwProcessId: LPDWORD) DWORD;
pub extern "user32" stdcallcc fn GetWindowWord(hWnd: HWND, nIndex: c_int) WORD;
pub extern "user32" stdcallcc fn GrayStringA(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: c_int, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int) BOOL;
pub extern "user32" stdcallcc fn GrayStringW(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: c_int, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int) BOOL;
pub extern "user32" stdcallcc fn HideCaret(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn HiliteMenuItem(hWnd: HWND, hMenu: HMENU, uIDHiliteItem: UINT, uHilite: UINT) BOOL;
pub extern "user32" stdcallcc fn ImpersonateDdeClientWindow(hWndClient: HWND, hWndServer: HWND) BOOL;
pub extern "user32" stdcallcc fn InSendMessage() BOOL;
pub extern "user32" stdcallcc fn InSendMessageEx(lpReserved: LPVOID) DWORD;
pub extern "user32" stdcallcc fn InflateRect(lprc: LPRECT, dx: c_int, dy: c_int) BOOL;
pub extern "user32" stdcallcc fn InheritWindowMonitor(hwnd: HWND, hwndInherit: HWND) BOOL;
pub extern "user32" stdcallcc fn InitializeTouchInjection(maxCount: UINT32, dwMode: DWORD) BOOL;
pub extern "user32" stdcallcc fn InjectTouchInput(count: UINT32, contacts: ?*const POINTER_TOUCH_INFO) BOOL;
pub extern "user32" stdcallcc fn InsertMenuA(hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
pub extern "user32" stdcallcc fn InsertMenuItemA(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOA) BOOL;
pub extern "user32" stdcallcc fn InsertMenuItemW(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOW) BOOL;
pub extern "user32" stdcallcc fn InsertMenuW(hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn InternalGetWindowText(hWnd: HWND, pString: LPWSTR, cchMaxCount: c_int) c_int;
pub extern "user32" stdcallcc fn IntersectRect(lprcDst: LPRECT, lprcSrc1: ?*const RECT, lprcSrc2: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn InvalidateRect(hWnd: HWND, lpRect: ?*const RECT, bErase: BOOL) BOOL;
pub extern "user32" stdcallcc fn InvalidateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) BOOL;
pub extern "user32" stdcallcc fn InvertRect(hDC: HDC, lprc: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn IsCharAlphaA(ch: CHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharAlphaNumericA(ch: CHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharAlphaNumericW(ch: WCHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharAlphaW(ch: WCHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharLowerA(ch: CHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharLowerW(ch: WCHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharUpperA(ch: CHAR) BOOL;
pub extern "user32" stdcallcc fn IsCharUpperW(ch: WCHAR) BOOL;
pub extern "user32" stdcallcc fn IsChild(hWndParent: HWND, hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsClipboardFormatAvailable(format: UINT) BOOL;
pub extern "user32" stdcallcc fn IsDialogMessageA(hDlg: HWND, lpMsg: LPMSG) BOOL;
pub extern "user32" stdcallcc fn IsDialogMessageW(hDlg: HWND, lpMsg: LPMSG) BOOL;
pub extern "user32" stdcallcc fn IsDlgButtonChecked(hDlg: HWND, nIDButton: c_int) UINT;
pub extern "user32" stdcallcc fn IsGUIThread(bConvert: BOOL) BOOL;
pub extern "user32" stdcallcc fn IsHungAppWindow(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsIconic(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsImmersiveProcess(hProcess: HANDLE) BOOL;
pub extern "user32" stdcallcc fn IsMenu(hMenu: HMENU) BOOL;
pub extern "user32" stdcallcc fn IsMouseInPointerEnabled() BOOL;
pub extern "user32" stdcallcc fn IsProcessDPIAware() BOOL;
pub extern "user32" stdcallcc fn IsRectEmpty(lprc: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn IsTouchWindow(hwnd: HWND, pulFlags: PULONG) BOOL;
pub extern "user32" stdcallcc fn IsValidDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) BOOL;
pub extern "user32" stdcallcc fn IsWinEventHookInstalled(event: DWORD) BOOL;
pub extern "user32" stdcallcc fn IsWindow(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsWindowEnabled(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsWindowUnicode(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsWindowVisible(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn IsWow64Message() BOOL;
pub extern "user32" stdcallcc fn IsZoomed(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn KillTimer(hWnd: HWND, uIDEvent: UINT_PTR) BOOL;
pub extern "user32" stdcallcc fn LoadAcceleratorsA(hInstance: HINSTANCE, lpTableName: LPCSTR) HACCEL;
pub extern "user32" stdcallcc fn LoadAcceleratorsW(hInstance: HINSTANCE, lpTableName: LPCWSTR) HACCEL;
pub extern "user32" stdcallcc fn LoadBitmapA(hInstance: HINSTANCE, lpBitmapName: LPCSTR) HBITMAP;
pub extern "user32" stdcallcc fn LoadBitmapW(hInstance: HINSTANCE, lpBitmapName: LPCWSTR) HBITMAP;
pub extern "user32" stdcallcc fn LoadCursorA(hInstance: HINSTANCE, lpCursorName: LPCSTR) HCURSOR;
pub extern "user32" stdcallcc fn LoadCursorFromFileA(lpFileName: LPCSTR) HCURSOR;
pub extern "user32" stdcallcc fn LoadCursorFromFileW(lpFileName: LPCWSTR) HCURSOR;
pub extern "user32" stdcallcc fn LoadCursorW(hInstance: HINSTANCE, lpCursorName: LPCWSTR) HCURSOR;
pub extern "user32" stdcallcc fn LoadIconA(hInstance: HINSTANCE, lpIconName: LPCSTR) HICON;
pub extern "user32" stdcallcc fn LoadIconW(hInstance: HINSTANCE, lpIconName: LPCWSTR) HICON;
pub extern "user32" stdcallcc fn LoadImageA(hInst: HINSTANCE, name: LPCSTR, type_0: UINT, cx: c_int, cy: c_int, fuLoad: UINT) HANDLE;
pub extern "user32" stdcallcc fn LoadImageW(hInst: HINSTANCE, name: LPCWSTR, type_0: UINT, cx: c_int, cy: c_int, fuLoad: UINT) HANDLE;
pub extern "user32" stdcallcc fn LoadKeyboardLayoutA(pwszKLID: LPCSTR, Flags: UINT) HKL;
pub extern "user32" stdcallcc fn LoadKeyboardLayoutW(pwszKLID: LPCWSTR, Flags: UINT) HKL;
pub extern "user32" stdcallcc fn LoadMenuA(hInstance: HINSTANCE, lpMenuName: LPCSTR) HMENU;
pub extern "user32" stdcallcc fn LoadMenuIndirectA(lpMenuTemplate: ?*const MENUTEMPLATEA) HMENU;
pub extern "user32" stdcallcc fn LoadMenuIndirectW(lpMenuTemplate: ?*const MENUTEMPLATEW) HMENU;
pub extern "user32" stdcallcc fn LoadMenuW(hInstance: HINSTANCE, lpMenuName: LPCWSTR) HMENU;
pub extern "user32" stdcallcc fn LoadStringA(hInstance: HINSTANCE, uID: UINT, lpBuffer: LPSTR, cchBufferMax: c_int) c_int;
pub extern "user32" stdcallcc fn LoadStringW(hInstance: HINSTANCE, uID: UINT, lpBuffer: LPWSTR, cchBufferMax: c_int) c_int;
pub extern "user32" stdcallcc fn LockSetForegroundWindow(uLockCode: UINT) BOOL;
pub extern "user32" stdcallcc fn LockWindowUpdate(hWndLock: HWND) BOOL;
pub extern "user32" stdcallcc fn LockWorkStation() BOOL;
pub extern "user32" stdcallcc fn LogicalToPhysicalPoint(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn LogicalToPhysicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn LookupIconIdFromDirectory(presbits: PBYTE, fIcon: BOOL) c_int;
pub extern "user32" stdcallcc fn LookupIconIdFromDirectoryEx(presbits: PBYTE, fIcon: BOOL, cxDesired: c_int, cyDesired: c_int, Flags: UINT) c_int;
pub extern "user32" stdcallcc fn MapDialogRect(hDlg: HWND, lpRect: LPRECT) BOOL;
pub extern "user32" stdcallcc fn MapVirtualKeyA(uCode: UINT, uMapType: UINT) UINT;
pub extern "user32" stdcallcc fn MapVirtualKeyExA(uCode: UINT, uMapType: UINT, dwhkl: HKL) UINT;
pub extern "user32" stdcallcc fn MapVirtualKeyExW(uCode: UINT, uMapType: UINT, dwhkl: HKL) UINT;
pub extern "user32" stdcallcc fn MapVirtualKeyW(uCode: UINT, uMapType: UINT) UINT;
pub extern "user32" stdcallcc fn MapWindowPoints(hWndFrom: HWND, hWndTo: HWND, lpPoints: LPPOINT, cPoints: UINT) c_int;
pub extern "user32" stdcallcc fn MenuItemFromPoint(hWnd: HWND, hMenu: HMENU, ptScreen: POINT) c_int;
pub extern "user32" stdcallcc fn MessageBeep(uType: UINT) BOOL;
pub extern "user32" stdcallcc fn MessageBoxA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT) c_int;
pub extern "user32" stdcallcc fn MessageBoxExA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT, wLanguageId: WORD) c_int;
pub extern "user32" stdcallcc fn MessageBoxExW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT, wLanguageId: WORD) c_int;
pub extern "user32" stdcallcc fn MessageBoxIndirectA(lpmbp: ?*const MSGBOXPARAMSA) c_int;
pub extern "user32" stdcallcc fn MessageBoxIndirectW(lpmbp: ?*const MSGBOXPARAMSW) c_int;
pub extern "user32" stdcallcc fn MessageBoxW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT) c_int;
pub extern "user32" stdcallcc fn ModifyMenuA(hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
pub extern "user32" stdcallcc fn ModifyMenuW(hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn MonitorFromPoint(pt: POINT, dwFlags: DWORD) HMONITOR;
pub extern "user32" stdcallcc fn MonitorFromRect(lprc: LPCRECT, dwFlags: DWORD) HMONITOR;
pub extern "user32" stdcallcc fn MonitorFromWindow(hwnd: HWND, dwFlags: DWORD) HMONITOR;
pub extern "user32" stdcallcc fn MoveWindow(hWnd: HWND, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, bRepaint: BOOL) BOOL;
pub extern "user32" stdcallcc fn MsgWaitForMultipleObjects(nCount: DWORD, pHandles: ?*const HANDLE, fWaitAll: BOOL, dwMilliseconds: DWORD, dwWakeMask: DWORD) DWORD;
pub extern "user32" stdcallcc fn MsgWaitForMultipleObjectsEx(nCount: DWORD, pHandles: ?*const HANDLE, dwMilliseconds: DWORD, dwWakeMask: DWORD, dwFlags: DWORD) DWORD;
pub extern "user32" stdcallcc fn NotifyWinEvent(event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG) void;
pub extern "user32" stdcallcc fn OemKeyScan(wOemChar: WORD) DWORD;
pub extern "user32" stdcallcc fn OemToCharA(pSrc: LPCSTR, pDst: LPSTR) BOOL;
pub extern "user32" stdcallcc fn OemToCharBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn OemToCharBuffW(lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn OemToCharW(pSrc: LPCSTR, pDst: LPWSTR) BOOL;
pub extern "user32" stdcallcc fn OffsetRect(lprc: LPRECT, dx: c_int, dy: c_int) BOOL;
pub extern "user32" stdcallcc fn OpenClipboard(hWndNewOwner: HWND) BOOL;
pub extern "user32" stdcallcc fn OpenDesktopA(lpszDesktop: LPCSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
pub extern "user32" stdcallcc fn OpenDesktopW(lpszDesktop: LPCWSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
pub extern "user32" stdcallcc fn OpenIcon(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn OpenInputDesktop(dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
pub extern "user32" stdcallcc fn OpenWindowStationA(lpszWinSta: LPCSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HWINSTA;
pub extern "user32" stdcallcc fn OpenWindowStationW(lpszWinSta: LPCWSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HWINSTA;
pub extern "user32" stdcallcc fn PackDDElParam(msg: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR) LPARAM;
pub extern "user32" stdcallcc fn PackTouchHitTestingProximityEvaluation(pHitTestingInput: ?*const TOUCH_HIT_TESTING_INPUT, pProximityEval: ?*const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) LRESULT;
pub extern "user32" stdcallcc fn PaintDesktop(hdc: HDC) BOOL;
pub extern "user32" stdcallcc fn PeekMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT) BOOL;
pub extern "user32" stdcallcc fn PeekMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT) BOOL;
pub extern "user32" stdcallcc fn PhysicalToLogicalPoint(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn PhysicalToLogicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn PostMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn PostMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn PostQuitMessage(nExitCode: c_int) void;
pub extern "user32" stdcallcc fn PostThreadMessageA(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn PostThreadMessageW(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn PrintWindow(hwnd: HWND, hdcBlt: HDC, nFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn PrivateExtractIconsA(szFileName: LPCSTR, nIconIndex: c_int, cxIcon: c_int, cyIcon: c_int, phicon: ?*HICON, piconid: ?*UINT, nIcons: UINT, flags: UINT) UINT;
pub extern "user32" stdcallcc fn PrivateExtractIconsW(szFileName: LPCWSTR, nIconIndex: c_int, cxIcon: c_int, cyIcon: c_int, phicon: ?*HICON, piconid: ?*UINT, nIcons: UINT, flags: UINT) UINT;
pub extern "user32" stdcallcc fn PtInRect(lprc: ?*const RECT, pt: POINT) BOOL;
pub extern "user32" stdcallcc fn QueryDisplayConfig(flags: UINT32, numPathArrayElements: ?*UINT32, pathArray: ?*DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: ?*UINT32, modeInfoArray: ?*DISPLAYCONFIG_MODE_INFO, currentTopologyId: ?*DISPLAYCONFIG_TOPOLOGY_ID) LONG;
pub extern "user32" stdcallcc fn RealChildWindowFromPoint(hwndParent: HWND, ptParentClientCoords: POINT) HWND;
pub extern "user32" stdcallcc fn RealGetWindowClassA(hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: UINT) UINT;
pub extern "user32" stdcallcc fn RealGetWindowClassW(hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: UINT) UINT;
pub extern "user32" stdcallcc fn RedrawWindow(hWnd: HWND, lprcUpdate: ?*const RECT, hrgnUpdate: HRGN, flags: UINT) BOOL;
pub extern "user32" stdcallcc fn RegisterClassA(lpWndClass: ?*const WNDCLASSA) ATOM;
pub extern "user32" stdcallcc fn RegisterClassExA(arg0: ?*const WNDCLASSEXA) ATOM;
pub extern "user32" stdcallcc fn RegisterClassExW(arg0: ?*const WNDCLASSEXW) ATOM;
pub extern "user32" stdcallcc fn RegisterClassW(lpWndClass: ?*const WNDCLASSW) ATOM;
pub extern "user32" stdcallcc fn RegisterClipboardFormatA(lpszFormat: LPCSTR) UINT;
pub extern "user32" stdcallcc fn RegisterClipboardFormatW(lpszFormat: LPCWSTR) UINT;
pub extern "user32" stdcallcc fn RegisterDeviceNotificationA(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD) HDEVNOTIFY;
pub extern "user32" stdcallcc fn RegisterDeviceNotificationW(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD) HDEVNOTIFY;
pub extern "user32" stdcallcc fn RegisterHotKey(hWnd: HWND, id: c_int, fsModifiers: UINT, vk: UINT) BOOL;
pub extern "user32" stdcallcc fn RegisterPointerDeviceNotifications(window: HWND, notifyRange: BOOL) BOOL;
pub extern "user32" stdcallcc fn RegisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
pub extern "user32" stdcallcc fn RegisterPointerInputTargetEx(hwnd: HWND, pointerType: POINTER_INPUT_TYPE, fObserve: BOOL) BOOL;
pub extern "user32" stdcallcc fn RegisterPowerSettingNotification(hRecipient: HANDLE, PowerSettingGuid: LPCGUID, Flags: DWORD) HPOWERNOTIFY;
pub extern "user32" stdcallcc fn RegisterRawInputDevices(pRawInputDevices: PCRAWINPUTDEVICE, uiNumDevices: UINT, cbSize: UINT) BOOL;
pub extern "user32" stdcallcc fn RegisterShellHookWindow(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn RegisterSuspendResumeNotification(hRecipient: HANDLE, Flags: DWORD) HPOWERNOTIFY;
pub extern "user32" stdcallcc fn RegisterTouchHitTestingWindow(hwnd: HWND, value: ULONG) BOOL;
pub extern "user32" stdcallcc fn RegisterTouchWindow(hwnd: HWND, ulFlags: ULONG) BOOL;
pub extern "user32" stdcallcc fn RegisterWindowMessageA(lpString: LPCSTR) UINT;
pub extern "user32" stdcallcc fn RegisterWindowMessageW(lpString: LPCWSTR) UINT;
pub extern "user32" stdcallcc fn ReleaseCapture() BOOL;
pub extern "user32" stdcallcc fn ReleaseDC(hWnd: HWND, hDC: HDC) c_int;
pub extern "user32" stdcallcc fn RemoveClipboardFormatListener(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn RemoveMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn RemovePropA(hWnd: HWND, lpString: LPCSTR) HANDLE;
pub extern "user32" stdcallcc fn RemovePropW(hWnd: HWND, lpString: LPCWSTR) HANDLE;
pub extern "user32" stdcallcc fn ReplyMessage(lResult: LRESULT) BOOL;
pub extern "user32" stdcallcc fn ReuseDDElParam(lParam: LPARAM, msgIn: UINT, msgOut: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR) LPARAM;
pub extern "user32" stdcallcc fn ScreenToClient(hWnd: HWND, lpPoint: LPPOINT) BOOL;
pub extern "user32" stdcallcc fn ScrollDC(hDC: HDC, dx: c_int, dy: c_int, lprcScroll: ?*const RECT, lprcClip: ?*const RECT, hrgnUpdate: HRGN, lprcUpdate: LPRECT) BOOL;
pub extern "user32" stdcallcc fn ScrollWindow(hWnd: HWND, XAmount: c_int, YAmount: c_int, lpRect: ?*const RECT, lpClipRect: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn ScrollWindowEx(hWnd: HWND, dx: c_int, dy: c_int, prcScroll: ?*const RECT, prcClip: ?*const RECT, hrgnUpdate: HRGN, prcUpdate: LPRECT, flags: UINT) c_int;
pub extern "user32" stdcallcc fn SendDlgItemMessageA(hDlg: HWND, nIDDlgItem: c_int, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn SendDlgItemMessageW(hDlg: HWND, nIDDlgItem: c_int, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn SendInput(cInputs: UINT, pInputs: LPINPUT, cbSize: c_int) UINT;
pub extern "user32" stdcallcc fn SendMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn SendMessageCallbackA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR) BOOL;
pub extern "user32" stdcallcc fn SendMessageCallbackW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR) BOOL;
pub extern "user32" stdcallcc fn SendMessageTimeoutA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR) LRESULT;
pub extern "user32" stdcallcc fn SendMessageTimeoutW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR) LRESULT;
pub extern "user32" stdcallcc fn SendMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub extern "user32" stdcallcc fn SendNotifyMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn SendNotifyMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
pub extern "user32" stdcallcc fn SetActiveWindow(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn SetCapture(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn SetCaretBlinkTime(uMSeconds: UINT) BOOL;
pub extern "user32" stdcallcc fn SetCaretPos(X: c_int, Y: c_int) BOOL;
pub extern "user32" stdcallcc fn SetClassLongA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) DWORD;
pub extern "user32" stdcallcc fn SetClassLongPtrA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) ULONG_PTR;
pub extern "user32" stdcallcc fn SetClassLongPtrW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) ULONG_PTR;
pub extern "user32" stdcallcc fn SetClassLongW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) DWORD;
pub extern "user32" stdcallcc fn SetClassWord(hWnd: HWND, nIndex: c_int, wNewWord: WORD) WORD;
pub extern "user32" stdcallcc fn SetClipboardData(uFormat: UINT, hMem: HANDLE) HANDLE;
pub extern "user32" stdcallcc fn SetClipboardViewer(hWndNewViewer: HWND) HWND;
pub extern "user32" stdcallcc fn SetCoalescableTimer(hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC, uToleranceDelay: ULONG) UINT_PTR;
pub extern "user32" stdcallcc fn SetCursor(hCursor: HCURSOR) HCURSOR;
pub extern "user32" stdcallcc fn SetCursorPos(X: c_int, Y: c_int) BOOL;
pub extern "user32" stdcallcc fn SetDebugErrorLevel(dwLevel: DWORD) void;
pub extern "user32" stdcallcc fn SetDialogControlDpiChangeBehavior(hWnd: HWND, mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS) BOOL;
pub extern "user32" stdcallcc fn SetDialogDpiChangeBehavior(hDlg: HWND, mask: DIALOG_DPI_CHANGE_BEHAVIORS, values: DIALOG_DPI_CHANGE_BEHAVIORS) BOOL;
pub extern "user32" stdcallcc fn SetDisplayAutoRotationPreferences(orientation: ORIENTATION_PREFERENCE) BOOL;
pub extern "user32" stdcallcc fn SetDisplayConfig(numPathArrayElements: UINT32, pathArray: ?*DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: UINT32, modeInfoArray: ?*DISPLAYCONFIG_MODE_INFO, flags: UINT32) LONG;
pub extern "user32" stdcallcc fn SetDlgItemInt(hDlg: HWND, nIDDlgItem: c_int, uValue: UINT, bSigned: BOOL) BOOL;
pub extern "user32" stdcallcc fn SetDlgItemTextA(hDlg: HWND, nIDDlgItem: c_int, lpString: LPCSTR) BOOL;
pub extern "user32" stdcallcc fn SetDlgItemTextW(hDlg: HWND, nIDDlgItem: c_int, lpString: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn SetDoubleClickTime(arg0: UINT) BOOL;
pub extern "user32" stdcallcc fn SetFocus(hWnd: HWND) HWND;
pub extern "user32" stdcallcc fn SetForegroundWindow(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn SetGestureConfig(hwnd: HWND, dwReserved: DWORD, cIDs: UINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT) BOOL;
pub extern "user32" stdcallcc fn SetKeyboardState(lpKeyState: LPBYTE) BOOL;
pub extern "user32" stdcallcc fn SetLastErrorEx(dwErrCode: DWORD, dwType: DWORD) void;
pub extern "user32" stdcallcc fn SetLayeredWindowAttributes(hwnd: HWND, crKey: COLORREF, bAlpha: BYTE, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetMenu(hWnd: HWND, hMenu: HMENU) BOOL;
pub extern "user32" stdcallcc fn SetMenuContextHelpId(arg0: HMENU, arg1: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetMenuDefaultItem(hMenu: HMENU, uItem: UINT, fByPos: UINT) BOOL;
pub extern "user32" stdcallcc fn SetMenuInfo(arg0: HMENU, arg1: LPCMENUINFO) BOOL;
pub extern "user32" stdcallcc fn SetMenuItemBitmaps(hMenu: HMENU, uPosition: UINT, uFlags: UINT, hBitmapUnchecked: HBITMAP, hBitmapChecked: HBITMAP) BOOL;
pub extern "user32" stdcallcc fn SetMenuItemInfoA(hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOA) BOOL;
pub extern "user32" stdcallcc fn SetMenuItemInfoW(hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOW) BOOL;
pub extern "user32" stdcallcc fn SetMessageExtraInfo(lParam: LPARAM) LPARAM;
pub extern "user32" stdcallcc fn SetMessageQueue(cMessagesMax: c_int) BOOL;
pub extern "user32" stdcallcc fn SetParent(hWndChild: HWND, hWndNewParent: HWND) HWND;
pub extern "user32" stdcallcc fn SetPhysicalCursorPos(X: c_int, Y: c_int) BOOL;
pub extern "user32" stdcallcc fn SetProcessDPIAware() BOOL;
pub extern "user32" stdcallcc fn SetProcessDefaultLayout(dwDefaultLayout: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetProcessDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) BOOL;
pub extern "user32" stdcallcc fn SetProcessRestrictionExemption(fEnableExemption: BOOL) BOOL;
pub extern "user32" stdcallcc fn SetProcessWindowStation(hWinSta: HWINSTA) BOOL;
pub extern "user32" stdcallcc fn SetPropA(hWnd: HWND, lpString: LPCSTR, hData: HANDLE) BOOL;
pub extern "user32" stdcallcc fn SetPropW(hWnd: HWND, lpString: LPCWSTR, hData: HANDLE) BOOL;
pub extern "user32" stdcallcc fn SetRect(lprc: LPRECT, xLeft: c_int, yTop: c_int, xRight: c_int, yBottom: c_int) BOOL;
pub extern "user32" stdcallcc fn SetRectEmpty(lprc: LPRECT) BOOL;
pub extern "user32" stdcallcc fn SetScrollInfo(hwnd: HWND, nBar: c_int, lpsi: LPCSCROLLINFO, redraw: BOOL) c_int;
pub extern "user32" stdcallcc fn SetScrollPos(hWnd: HWND, nBar: c_int, nPos: c_int, bRedraw: BOOL) c_int;
pub extern "user32" stdcallcc fn SetScrollRange(hWnd: HWND, nBar: c_int, nMinPos: c_int, nMaxPos: c_int, bRedraw: BOOL) BOOL;
pub extern "user32" stdcallcc fn SetSysColors(cElements: c_int, lpaElements: ?*const INT, lpaRgbValues: ?*const COLORREF) BOOL;
pub extern "user32" stdcallcc fn SetSystemCursor(hcur: HCURSOR, id: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetThreadDesktop(hDesktop: HDESK) BOOL;
pub extern "user32" stdcallcc fn SetThreadDpiAwarenessContext(dpiContext: DPI_AWARENESS_CONTEXT) DPI_AWARENESS_CONTEXT;
pub extern "user32" stdcallcc fn SetTimer(hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC) UINT_PTR;
pub extern "user32" stdcallcc fn SetUserObjectInformationA(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetUserObjectInformationW(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR) BOOL;
pub extern "user32" stdcallcc fn SetWinEventHook(eventMin: DWORD, eventMax: DWORD, hmodWinEventProc: HMODULE, pfnWinEventProc: WINEVENTPROC, idProcess: DWORD, idThread: DWORD, dwFlags: DWORD) HWINEVENTHOOK;
pub extern "user32" stdcallcc fn SetWindowContextHelpId(arg0: HWND, arg1: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetWindowDisplayAffinity(hWnd: HWND, dwAffinity: DWORD) BOOL;
pub extern "user32" stdcallcc fn SetWindowFeedbackSetting(hwnd: HWND, feedback: FEEDBACK_TYPE, dwFlags: DWORD, size: UINT32, configuration: ?*const c_void) BOOL;
pub extern "user32" stdcallcc fn SetWindowLongA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) LONG;
pub extern "user32" stdcallcc fn SetWindowLongPtrA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) LONG_PTR;
pub extern "user32" stdcallcc fn SetWindowLongPtrW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) LONG_PTR;
pub extern "user32" stdcallcc fn SetWindowLongW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) LONG;
pub extern "user32" stdcallcc fn SetWindowPlacement(hWnd: HWND, lpwndpl: ?*const WINDOWPLACEMENT) BOOL;
pub extern "user32" stdcallcc fn SetWindowPos(hWnd: HWND, hWndInsertAfter: HWND, X: c_int, Y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
pub extern "user32" stdcallcc fn SetWindowRgn(hWnd: HWND, hRgn: HRGN, bRedraw: BOOL) c_int;
pub extern "user32" stdcallcc fn SetWindowTextA(hWnd: HWND, lpString: LPCSTR) BOOL;
pub extern "user32" stdcallcc fn SetWindowTextW(hWnd: HWND, lpString: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn SetWindowWord(hWnd: HWND, nIndex: c_int, wNewWord: WORD) WORD;
pub extern "user32" stdcallcc fn SetWindowsHookA(nFilterType: c_int, pfnFilterProc: HOOKPROC) HHOOK;
pub extern "user32" stdcallcc fn SetWindowsHookExA(idHook: c_int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD) HHOOK;
pub extern "user32" stdcallcc fn SetWindowsHookExW(idHook: c_int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD) HHOOK;
pub extern "user32" stdcallcc fn SetWindowsHookW(nFilterType: c_int, pfnFilterProc: HOOKPROC) HHOOK;
pub extern "user32" stdcallcc fn ShowCaret(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn ShowCursor(bShow: BOOL) c_int;
pub extern "user32" stdcallcc fn ShowOwnedPopups(hWnd: HWND, fShow: BOOL) BOOL;
pub extern "user32" stdcallcc fn ShowScrollBar(hWnd: HWND, wBar: c_int, bShow: BOOL) BOOL;
pub extern "user32" stdcallcc fn ShowWindow(hWnd: HWND, nCmdShow: c_int) BOOL;
pub extern "user32" stdcallcc fn ShowWindowAsync(hWnd: HWND, nCmdShow: c_int) BOOL;
pub extern "user32" stdcallcc fn ShutdownBlockReasonCreate(hWnd: HWND, pwszReason: LPCWSTR) BOOL;
pub extern "user32" stdcallcc fn ShutdownBlockReasonDestroy(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn ShutdownBlockReasonQuery(hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: ?*DWORD) BOOL;
pub extern "user32" stdcallcc fn SkipPointerFrameMessages(pointerId: UINT32) BOOL;
pub extern "user32" stdcallcc fn SoundSentry() BOOL;
pub extern "user32" stdcallcc fn SubtractRect(lprcDst: LPRECT, lprcSrc1: ?*const RECT, lprcSrc2: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn SwapMouseButton(fSwap: BOOL) BOOL;
pub extern "user32" stdcallcc fn SwitchDesktop(hDesktop: HDESK) BOOL;
pub extern "user32" stdcallcc fn SwitchToThisWindow(hwnd: HWND, fUnknown: BOOL) void;
pub extern "user32" stdcallcc fn SystemParametersInfoA(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT) BOOL;
pub extern "user32" stdcallcc fn SystemParametersInfoForDpi(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT, dpi: UINT) BOOL;
pub extern "user32" stdcallcc fn SystemParametersInfoW(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT) BOOL;
pub extern "user32" stdcallcc fn TabbedTextOutA(hdc: HDC, x: c_int, y: c_int, lpString: LPCSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: ?*const INT, nTabOrigin: c_int) LONG;
pub extern "user32" stdcallcc fn TabbedTextOutW(hdc: HDC, x: c_int, y: c_int, lpString: LPCWSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: ?*const INT, nTabOrigin: c_int) LONG;
pub extern "user32" stdcallcc fn TileWindows(hwndParent: HWND, wHow: UINT, lpRect: ?*const RECT, cKids: UINT, lpKids: ?*const HWND) WORD;
pub extern "user32" stdcallcc fn ToAscii(uVirtKey: UINT, uScanCode: UINT, lpKeyState: ?*const BYTE, lpChar: LPWORD, uFlags: UINT) c_int;
pub extern "user32" stdcallcc fn ToAsciiEx(uVirtKey: UINT, uScanCode: UINT, lpKeyState: ?*const BYTE, lpChar: LPWORD, uFlags: UINT, dwhkl: HKL) c_int;
pub extern "user32" stdcallcc fn ToUnicode(wVirtKey: UINT, wScanCode: UINT, lpKeyState: ?*const BYTE, pwszBuff: LPWSTR, cchBuff: c_int, wFlags: UINT) c_int;
pub extern "user32" stdcallcc fn ToUnicodeEx(wVirtKey: UINT, wScanCode: UINT, lpKeyState: ?*const BYTE, pwszBuff: LPWSTR, cchBuff: c_int, wFlags: UINT, dwhkl: HKL) c_int;
pub extern "user32" stdcallcc fn TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT) BOOL;
pub extern "user32" stdcallcc fn TrackPopupMenu(hMenu: HMENU, uFlags: UINT, x: c_int, y: c_int, nReserved: c_int, hWnd: HWND, prcRect: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn TrackPopupMenuEx(hMenu: HMENU, uFlags: UINT, x: c_int, y: c_int, hwnd: HWND, lptpm: LPTPMPARAMS) BOOL;
pub extern "user32" stdcallcc fn TranslateAcceleratorA(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG) c_int;
pub extern "user32" stdcallcc fn TranslateAcceleratorW(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG) c_int;
pub extern "user32" stdcallcc fn TranslateMDISysAccel(hWndClient: HWND, lpMsg: LPMSG) BOOL;
pub extern "user32" stdcallcc fn TranslateMessage(lpMsg: ?*const MSG) BOOL;
pub extern "user32" stdcallcc fn UnhookWinEvent(hWinEventHook: HWINEVENTHOOK) BOOL;
pub extern "user32" stdcallcc fn UnhookWindowsHook(nCode: c_int, pfnFilterProc: HOOKPROC) BOOL;
pub extern "user32" stdcallcc fn UnhookWindowsHookEx(hhk: HHOOK) BOOL;
pub extern "user32" stdcallcc fn UnionRect(lprcDst: LPRECT, lprcSrc1: ?*const RECT, lprcSrc2: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn UnloadKeyboardLayout(hkl: HKL) BOOL;
pub extern "user32" stdcallcc fn UnpackDDElParam(msg: UINT, lParam: LPARAM, puiLo: PUINT_PTR, puiHi: PUINT_PTR) BOOL;
pub extern "user32" stdcallcc fn UnregisterClassA(lpClassName: LPCSTR, hInstance: HINSTANCE) BOOL;
pub extern "user32" stdcallcc fn UnregisterClassW(lpClassName: LPCWSTR, hInstance: HINSTANCE) BOOL;
pub extern "user32" stdcallcc fn UnregisterDeviceNotification(Handle: HDEVNOTIFY) BOOL;
pub extern "user32" stdcallcc fn UnregisterHotKey(hWnd: HWND, id: c_int) BOOL;
pub extern "user32" stdcallcc fn UnregisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
pub extern "user32" stdcallcc fn UnregisterPointerInputTargetEx(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
pub extern "user32" stdcallcc fn UnregisterPowerSettingNotification(Handle: HPOWERNOTIFY) BOOL;
pub extern "user32" stdcallcc fn UnregisterSuspendResumeNotification(Handle: HPOWERNOTIFY) BOOL;
pub extern "user32" stdcallcc fn UnregisterTouchWindow(hwnd: HWND) BOOL;
pub extern "user32" stdcallcc fn UpdateLayeredWindow(hWnd: HWND, hdcDst: HDC, pptDst: ?*POINT, psize: ?*SIZE, hdcSrc: HDC, pptSrc: ?*POINT, crKey: COLORREF, pblend: ?*BLENDFUNCTION, dwFlags: DWORD) BOOL;
pub extern "user32" stdcallcc fn UpdateLayeredWindowIndirect(hWnd: HWND, pULWInfo: ?*const UPDATELAYEREDWINDOWINFO) BOOL;
pub extern "user32" stdcallcc fn UpdateWindow(hWnd: HWND) BOOL;
pub extern "user32" stdcallcc fn UserHandleGrantAccess(hUserHandle: HANDLE, hJob: HANDLE, bGrant: BOOL) BOOL;
pub extern "user32" stdcallcc fn ValidateRect(hWnd: HWND, lpRect: ?*const RECT) BOOL;
pub extern "user32" stdcallcc fn ValidateRgn(hWnd: HWND, hRgn: HRGN) BOOL;
pub extern "user32" stdcallcc fn VkKeyScanA(ch: CHAR) SHORT;
pub extern "user32" stdcallcc fn VkKeyScanExA(ch: CHAR, dwhkl: HKL) SHORT;
pub extern "user32" stdcallcc fn VkKeyScanExW(ch: WCHAR, dwhkl: HKL) SHORT;
pub extern "user32" stdcallcc fn VkKeyScanW(ch: WCHAR) SHORT;
pub extern "user32" stdcallcc fn WaitForInputIdle(hProcess: HANDLE, dwMilliseconds: DWORD) DWORD;
pub extern "user32" stdcallcc fn WaitMessage() BOOL;
pub extern "user32" stdcallcc fn WinHelpA(hWndMain: HWND, lpszHelp: LPCSTR, uCommand: UINT, dwData: ULONG_PTR) BOOL;
pub extern "user32" stdcallcc fn WinHelpW(hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: ULONG_PTR) BOOL;
pub extern "user32" stdcallcc fn WindowFromDC(hDC: HDC) HWND;
pub extern "user32" stdcallcc fn WindowFromPhysicalPoint(Point: POINT) HWND;
pub extern "user32" stdcallcc fn WindowFromPoint(Point: POINT) HWND;
pub extern "user32" stdcallcc fn keybd_event(bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR) void;
pub extern "user32" stdcallcc fn mouse_event(dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR) void;
pub extern "user32" fn wsprintfA(arg0: LPSTR, arg1: LPCSTR, ...) c_int;
pub extern "user32" fn wsprintfW(arg0: LPWSTR, arg1: LPCWSTR, ...) c_int;
pub extern "user32" stdcallcc fn wvsprintfA(arg0: LPSTR, arg1: LPCSTR, arglist: va_list) c_int;
pub extern "user32" stdcallcc fn wvsprintfW(arg0: LPWSTR, arg1: LPCWSTR, arglist: va_list) c_int;
pub extern "version" stdcallcc fn GetFileVersionInfoA(lptstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
pub extern "version" stdcallcc fn GetFileVersionInfoExW(dwFlags: DWORD, lpwstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
pub extern "version" stdcallcc fn GetFileVersionInfoSizeA(lptstrFilename: LPCSTR, lpdwHandle: LPDWORD) DWORD;
pub extern "version" stdcallcc fn GetFileVersionInfoSizeExW(dwFlags: DWORD, lpwstrFilename: LPCWSTR, lpdwHandle: LPDWORD) DWORD;
pub extern "version" stdcallcc fn GetFileVersionInfoSizeW(lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD) DWORD;
pub extern "version" stdcallcc fn GetFileVersionInfoW(lptstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
pub extern "version" stdcallcc fn VerFindFileA(uFlags: DWORD, szFileName: LPCSTR, szWinDir: LPCSTR, szAppDir: LPCSTR, szCurDir: LPSTR, puCurDirLen: PUINT, szDestDir: LPSTR, puDestDirLen: PUINT) DWORD;
pub extern "version" stdcallcc fn VerFindFileW(uFlags: DWORD, szFileName: LPCWSTR, szWinDir: LPCWSTR, szAppDir: LPCWSTR, szCurDir: LPWSTR, puCurDirLen: PUINT, szDestDir: LPWSTR, puDestDirLen: PUINT) DWORD;
pub extern "version" stdcallcc fn VerInstallFileA(uFlags: DWORD, szSrcFileName: LPCSTR, szDestFileName: LPCSTR, szSrcDir: LPCSTR, szDestDir: LPCSTR, szCurDir: LPCSTR, szTmpFile: LPSTR, puTmpFileLen: PUINT) DWORD;
pub extern "version" stdcallcc fn VerInstallFileW(uFlags: DWORD, szSrcFileName: LPCWSTR, szDestFileName: LPCWSTR, szSrcDir: LPCWSTR, szDestDir: LPCWSTR, szCurDir: LPCWSTR, szTmpFile: LPWSTR, puTmpFileLen: PUINT) DWORD;
pub extern "version" stdcallcc fn VerQueryValueA(pBlock: LPCVOID, lpSubBlock: LPCSTR, lplpBuffer: ?*LPVOID, puLen: PUINT) BOOL;
pub extern "version" stdcallcc fn VerQueryValueW(pBlock: LPCVOID, lpSubBlock: LPCWSTR, lplpBuffer: ?*LPVOID, puLen: PUINT) BOOL;
pub extern "winmm" stdcallcc fn CloseDriver(hDriver: HDRVR, lParam1: LPARAM, lParam2: LPARAM) LRESULT;
pub extern "winmm" stdcallcc fn DefDriverProc(dwDriverIdentifier: DWORD_PTR, hdrvr: HDRVR, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM) LRESULT;
pub extern "winmm" stdcallcc fn DriverCallback(dwCallback: DWORD_PTR, dwFlags: DWORD, hDevice: HDRVR, dwMsg: DWORD, dwUser: DWORD_PTR, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR) BOOL;
pub extern "winmm" stdcallcc fn DrvGetModuleHandle(hDriver: HDRVR) HMODULE;
pub extern "winmm" stdcallcc fn GetDriverModuleHandle(hDriver: HDRVR) HMODULE;
pub extern "winmm" stdcallcc fn OpenDriver(szDriverName: LPCWSTR, szSectionName: LPCWSTR, lParam2: LPARAM) HDRVR;
pub extern "winmm" stdcallcc fn PlaySoundA(pszSound: LPCSTR, hmod: HMODULE, fdwSound: DWORD) BOOL;
pub extern "winmm" stdcallcc fn PlaySoundW(pszSound: LPCWSTR, hmod: HMODULE, fdwSound: DWORD) BOOL;
pub extern "winmm" stdcallcc fn SendDriverMessage(hDriver: HDRVR, message: UINT, lParam1: LPARAM, lParam2: LPARAM) LRESULT;
pub extern "winmm" stdcallcc fn auxGetDevCapsA(uDeviceID: UINT_PTR, pac: LPAUXCAPSA, cbac: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn auxGetDevCapsW(uDeviceID: UINT_PTR, pac: LPAUXCAPSW, cbac: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn auxGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn auxGetVolume(uDeviceID: UINT, pdwVolume: LPDWORD) MMRESULT;
pub extern "winmm" stdcallcc fn auxOutMessage(uDeviceID: UINT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR) MMRESULT;
pub extern "winmm" stdcallcc fn auxSetVolume(uDeviceID: UINT, dwVolume: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn joyConfigChanged(dwFlags: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn joyGetDevCapsA(uJoyID: UINT_PTR, pjc: LPJOYCAPSA, cbjc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn joyGetDevCapsW(uJoyID: UINT_PTR, pjc: LPJOYCAPSW, cbjc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn joyGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn joyGetPos(uJoyID: UINT, pji: LPJOYINFO) MMRESULT;
pub extern "winmm" stdcallcc fn joyGetPosEx(uJoyID: UINT, pji: LPJOYINFOEX) MMRESULT;
pub extern "winmm" stdcallcc fn joyGetThreshold(uJoyID: UINT, puThreshold: LPUINT) MMRESULT;
pub extern "winmm" stdcallcc fn joyReleaseCapture(uJoyID: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn joySetCapture(hwnd: HWND, uJoyID: UINT, uPeriod: UINT, fChanged: BOOL) MMRESULT;
pub extern "winmm" stdcallcc fn joySetThreshold(uJoyID: UINT, uThreshold: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mciDriverNotify(hwndCallback: HANDLE, wDeviceID: MCIDEVICEID, uStatus: UINT) BOOL;
pub extern "winmm" stdcallcc fn mciDriverYield(wDeviceID: MCIDEVICEID) UINT;
pub extern "winmm" stdcallcc fn mciFreeCommandResource(wTable: UINT) BOOL;
pub extern "winmm" stdcallcc fn mciGetCreatorTask(mciId: MCIDEVICEID) HTASK;
pub extern "winmm" stdcallcc fn mciGetDeviceIDA(pszDevice: LPCSTR) MCIDEVICEID;
pub extern "winmm" stdcallcc fn mciGetDeviceIDFromElementIDA(dwElementID: DWORD, lpstrType: LPCSTR) MCIDEVICEID;
pub extern "winmm" stdcallcc fn mciGetDeviceIDFromElementIDW(dwElementID: DWORD, lpstrType: LPCWSTR) MCIDEVICEID;
pub extern "winmm" stdcallcc fn mciGetDeviceIDW(pszDevice: LPCWSTR) MCIDEVICEID;
pub extern "winmm" stdcallcc fn mciGetDriverData(wDeviceID: MCIDEVICEID) DWORD_PTR;
pub extern "winmm" stdcallcc fn mciGetErrorStringA(mcierr: MCIERROR, pszText: LPSTR, cchText: UINT) BOOL;
pub extern "winmm" stdcallcc fn mciGetErrorStringW(mcierr: MCIERROR, pszText: LPWSTR, cchText: UINT) BOOL;
pub extern "winmm" stdcallcc fn mciGetYieldProc(mciId: MCIDEVICEID, pdwYieldData: LPDWORD) YIELDPROC;
pub extern "winmm" stdcallcc fn mciLoadCommandResource(hInstance: HANDLE, lpResName: LPCWSTR, wType: UINT) UINT;
pub extern "winmm" stdcallcc fn mciSendCommandA(mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR) MCIERROR;
pub extern "winmm" stdcallcc fn mciSendCommandW(mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR) MCIERROR;
pub extern "winmm" stdcallcc fn mciSendStringA(lpstrCommand: LPCSTR, lpstrReturnString: LPSTR, uReturnLength: UINT, hwndCallback: HWND) MCIERROR;
pub extern "winmm" stdcallcc fn mciSendStringW(lpstrCommand: LPCWSTR, lpstrReturnString: LPWSTR, uReturnLength: UINT, hwndCallback: HWND) MCIERROR;
pub extern "winmm" stdcallcc fn mciSetDriverData(wDeviceID: MCIDEVICEID, dwData: DWORD_PTR) BOOL;
pub extern "winmm" stdcallcc fn mciSetYieldProc(mciId: MCIDEVICEID, fpYieldProc: YIELDPROC, dwYieldData: DWORD) BOOL;
pub extern "winmm" stdcallcc fn midiConnect(hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID) MMRESULT;
pub extern "winmm" stdcallcc fn midiDisconnect(hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID) MMRESULT;
pub extern "winmm" stdcallcc fn midiInAddBuffer(hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInClose(hmi: HMIDIIN) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetDevCapsA(uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSA, cbmic: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetDevCapsW(uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSW, cbmic: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetErrorTextA(mmrError: MMRESULT, pszText: LPSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetErrorTextW(mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetID(hmi: HMIDIIN, puDeviceID: LPUINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn midiInMessage(hmi: HMIDIIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR) MMRESULT;
pub extern "winmm" stdcallcc fn midiInOpen(phmi: LPHMIDIIN, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiInPrepareHeader(hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiInReset(hmi: HMIDIIN) MMRESULT;
pub extern "winmm" stdcallcc fn midiInStart(hmi: HMIDIIN) MMRESULT;
pub extern "winmm" stdcallcc fn midiInStop(hmi: HMIDIIN) MMRESULT;
pub extern "winmm" stdcallcc fn midiInUnprepareHeader(hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutCacheDrumPatches(hmo: HMIDIOUT, uPatch: UINT, pwkya: LPWORD, fuCache: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutCachePatches(hmo: HMIDIOUT, uBank: UINT, pwpa: LPWORD, fuCache: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutClose(hmo: HMIDIOUT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetDevCapsA(uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSA, cbmoc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetDevCapsW(uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSW, cbmoc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetErrorTextA(mmrError: MMRESULT, pszText: LPSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetErrorTextW(mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetID(hmo: HMIDIOUT, puDeviceID: LPUINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn midiOutGetVolume(hmo: HMIDIOUT, pdwVolume: LPDWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutLongMsg(hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutMessage(hmo: HMIDIOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutOpen(phmo: LPHMIDIOUT, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutPrepareHeader(hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutReset(hmo: HMIDIOUT) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutSetVolume(hmo: HMIDIOUT, dwVolume: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutShortMsg(hmo: HMIDIOUT, dwMsg: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiOutUnprepareHeader(hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamClose(hms: HMIDISTRM) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamOpen(phms: LPHMIDISTRM, puDeviceID: LPUINT, cMidi: DWORD, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamOut(hms: HMIDISTRM, pmh: LPMIDIHDR, cbmh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamPause(hms: HMIDISTRM) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamPosition(hms: HMIDISTRM, lpmmt: LPMMTIME, cbmmt: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamProperty(hms: HMIDISTRM, lppropdata: LPBYTE, dwProperty: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamRestart(hms: HMIDISTRM) MMRESULT;
pub extern "winmm" stdcallcc fn midiStreamStop(hms: HMIDISTRM) MMRESULT;
pub extern "winmm" stdcallcc fn mixerClose(hmx: HMIXER) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetControlDetailsA(hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetControlDetailsW(hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetDevCapsA(uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSA, cbmxcaps: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetDevCapsW(uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSW, cbmxcaps: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetID(hmxobj: HMIXEROBJ, puMxId: ?*UINT, fdwId: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetLineControlsA(hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSA, fdwControls: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetLineControlsW(hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSW, fdwControls: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetLineInfoA(hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEA, fdwInfo: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetLineInfoW(hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEW, fdwInfo: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn mixerMessage(hmx: HMIXER, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR) DWORD;
pub extern "winmm" stdcallcc fn mixerOpen(phmx: LPHMIXER, uMxId: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mixerSetControlDetails(hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mmDrvInstall(hDriver: HDRVR, wszDrvEntry: LPCWSTR, drvMessage: DRIVERMSGPROC, wFlags: UINT) UINT;
pub extern "winmm" stdcallcc fn mmioAdvance(hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuAdvance: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioAscend(hmmio: HMMIO, pmmcki: LPMMCKINFO, fuAscend: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioClose(hmmio: HMMIO, fuClose: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioCreateChunk(hmmio: HMMIO, pmmcki: LPMMCKINFO, fuCreate: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioDescend(hmmio: HMMIO, pmmcki: LPMMCKINFO, pmmckiParent: ?*const MMCKINFO, fuDescend: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioFlush(hmmio: HMMIO, fuFlush: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioGetInfo(hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuInfo: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioInstallIOProcA(fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD) LPMMIOPROC;
pub extern "winmm" stdcallcc fn mmioInstallIOProcW(fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD) LPMMIOPROC;
pub extern "winmm" stdcallcc fn mmioOpenA(pszFileName: LPSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD) HMMIO;
pub extern "winmm" stdcallcc fn mmioOpenW(pszFileName: LPWSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD) HMMIO;
pub extern "winmm" stdcallcc fn mmioRead(hmmio: HMMIO, pch: HPSTR, cch: LONG) LONG;
pub extern "winmm" stdcallcc fn mmioRenameA(pszFileName: LPCSTR, pszNewFileName: LPCSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mmioRenameW(pszFileName: LPCWSTR, pszNewFileName: LPCWSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn mmioSeek(hmmio: HMMIO, lOffset: LONG, iOrigin: c_int) LONG;
pub extern "winmm" stdcallcc fn mmioSendMessage(hmmio: HMMIO, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM) LRESULT;
pub extern "winmm" stdcallcc fn mmioSetBuffer(hmmio: HMMIO, pchBuffer: LPSTR, cchBuffer: LONG, fuBuffer: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioSetInfo(hmmio: HMMIO, pmmioinfo: LPCMMIOINFO, fuInfo: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn mmioStringToFOURCCA(sz: LPCSTR, uFlags: UINT) FOURCC;
pub extern "winmm" stdcallcc fn mmioStringToFOURCCW(sz: LPCWSTR, uFlags: UINT) FOURCC;
pub extern "winmm" stdcallcc fn mmioWrite(hmmio: HMMIO, pch: ?[*]const u8, cch: LONG) LONG;
pub extern "winmm" stdcallcc fn sndOpenSound(EventName: LPCWSTR, AppName: LPCWSTR, Flags: INT32, FileHandle: PHANDLE) LONG;
pub extern "winmm" stdcallcc fn sndPlaySoundA(pszSound: LPCSTR, fuSound: UINT) BOOL;
pub extern "winmm" stdcallcc fn sndPlaySoundW(pszSound: LPCWSTR, fuSound: UINT) BOOL;
pub extern "winmm" stdcallcc fn timeBeginPeriod(uPeriod: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn timeEndPeriod(uPeriod: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn timeGetDevCaps(ptc: LPTIMECAPS, cbtc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn timeGetSystemTime(pmmt: LPMMTIME, cbmmt: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn timeGetTime() DWORD;
pub extern "winmm" stdcallcc fn timeKillEvent(uTimerID: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn timeSetEvent(uDelay: UINT, uResolution: UINT, fptc: LPTIMECALLBACK, dwUser: DWORD_PTR, fuEvent: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInAddBuffer(hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInClose(hwi: HWAVEIN) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetDevCapsA(uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSA, cbwic: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetDevCapsW(uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSW, cbwic: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetErrorTextA(mmrError: MMRESULT, pszText: LPSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetErrorTextW(mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetID(hwi: HWAVEIN, puDeviceID: LPUINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn waveInGetPosition(hwi: HWAVEIN, pmmt: LPMMTIME, cbmmt: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInMessage(hwi: HWAVEIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR) MMRESULT;
pub extern "winmm" stdcallcc fn waveInOpen(phwi: LPHWAVEIN, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveInPrepareHeader(hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveInReset(hwi: HWAVEIN) MMRESULT;
pub extern "winmm" stdcallcc fn waveInStart(hwi: HWAVEIN) MMRESULT;
pub extern "winmm" stdcallcc fn waveInStop(hwi: HWAVEIN) MMRESULT;
pub extern "winmm" stdcallcc fn waveInUnprepareHeader(hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutBreakLoop(hwo: HWAVEOUT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutClose(hwo: HWAVEOUT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetDevCapsA(uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSA, cbwoc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetDevCapsW(uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSW, cbwoc: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetErrorTextA(mmrError: MMRESULT, pszText: LPSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetErrorTextW(mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetID(hwo: HWAVEOUT, puDeviceID: LPUINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetNumDevs() UINT;
pub extern "winmm" stdcallcc fn waveOutGetPitch(hwo: HWAVEOUT, pdwPitch: LPDWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetPlaybackRate(hwo: HWAVEOUT, pdwRate: LPDWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetPosition(hwo: HWAVEOUT, pmmt: LPMMTIME, cbmmt: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutGetVolume(hwo: HWAVEOUT, pdwVolume: LPDWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutMessage(hwo: HWAVEOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutOpen(phwo: LPHWAVEOUT, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutPause(hwo: HWAVEOUT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutPrepareHeader(hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutReset(hwo: HWAVEOUT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutRestart(hwo: HWAVEOUT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutSetPitch(hwo: HWAVEOUT, dwPitch: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutSetPlaybackRate(hwo: HWAVEOUT, dwRate: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutSetVolume(hwo: HWAVEOUT, dwVolume: DWORD) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutUnprepareHeader(hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winmm" stdcallcc fn waveOutWrite(hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT) MMRESULT;
pub extern "winscard" stdcallcc fn SCardAccessStartedEvent() HANDLE;
pub extern "winscard" stdcallcc fn SCardAddReaderToGroupA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardAddReaderToGroupW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardAudit(hContext: SCARDCONTEXT, dwEvent: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardBeginTransaction(hCard: SCARDHANDLE) LONG;
pub extern "winscard" stdcallcc fn SCardCancel(hContext: SCARDCONTEXT) LONG;
pub extern "winscard" stdcallcc fn SCardConnectA(hContext: SCARDCONTEXT, szReader: LPCSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardConnectW(hContext: SCARDCONTEXT, szReader: LPCWSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardControl(hCard: SCARDHANDLE, dwControlCode: DWORD, lpInBuffer: LPCVOID, cbInBufferSize: DWORD, lpOutBuffer: LPVOID, cbOutBufferSize: DWORD, lpBytesReturned: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardDisconnect(hCard: SCARDHANDLE, dwDisposition: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardEndTransaction(hCard: SCARDHANDLE, dwDisposition: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardEstablishContext(dwScope: DWORD, pvReserved1: LPCVOID, pvReserved2: LPCVOID, phContext: LPSCARDCONTEXT) LONG;
pub extern "winscard" stdcallcc fn SCardForgetCardTypeA(hContext: SCARDCONTEXT, szCardName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardForgetCardTypeW(hContext: SCARDCONTEXT, szCardName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardForgetReaderA(hContext: SCARDCONTEXT, szReaderName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardForgetReaderGroupA(hContext: SCARDCONTEXT, szGroupName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardForgetReaderGroupW(hContext: SCARDCONTEXT, szGroupName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardForgetReaderW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardFreeMemory(hContext: SCARDCONTEXT, pvMem: LPCVOID) LONG;
pub extern "winscard" stdcallcc fn SCardGetAttrib(hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPBYTE, pcbAttrLen: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetCardTypeProviderNameA(hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: ?*CHAR, pcchProvider: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetCardTypeProviderNameW(hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: ?*WCHAR, pcchProvider: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetDeviceTypeIdA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, pdwDeviceTypeId: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetDeviceTypeIdW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, pdwDeviceTypeId: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetProviderIdA(hContext: SCARDCONTEXT, szCard: LPCSTR, pguidProviderId: LPGUID) LONG;
pub extern "winscard" stdcallcc fn SCardGetProviderIdW(hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidProviderId: LPGUID) LONG;
pub extern "winscard" stdcallcc fn SCardGetReaderDeviceInstanceIdA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, szDeviceInstanceId: LPSTR, pcchDeviceInstanceId: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetReaderDeviceInstanceIdW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szDeviceInstanceId: LPWSTR, pcchDeviceInstanceId: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetReaderIconA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, pbIcon: LPBYTE, pcbIcon: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetReaderIconW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, pbIcon: LPBYTE, pcbIcon: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetStatusChangeA(hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetStatusChangeW(hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardGetTransmitCount(hCard: SCARDHANDLE, pcTransmitCount: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceCardTypeA(hContext: SCARDCONTEXT, szCardName: LPCSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceCardTypeW(hContext: SCARDCONTEXT, szCardName: LPCWSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceReaderA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, szDeviceName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceReaderGroupA(hContext: SCARDCONTEXT, szGroupName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceReaderGroupW(hContext: SCARDCONTEXT, szGroupName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardIntroduceReaderW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szDeviceName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardIsValidContext(hContext: SCARDCONTEXT) LONG;
pub extern "winscard" stdcallcc fn SCardListCardsA(hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: ?*CHAR, pcchCards: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListCardsW(hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: ?*WCHAR, pcchCards: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListInterfacesA(hContext: SCARDCONTEXT, szCard: LPCSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListInterfacesW(hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReaderGroupsA(hContext: SCARDCONTEXT, mszGroups: LPSTR, pcchGroups: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReaderGroupsW(hContext: SCARDCONTEXT, mszGroups: LPWSTR, pcchGroups: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReadersA(hContext: SCARDCONTEXT, mszGroups: LPCSTR, mszReaders: LPSTR, pcchReaders: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReadersW(hContext: SCARDCONTEXT, mszGroups: LPCWSTR, mszReaders: LPWSTR, pcchReaders: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReadersWithDeviceInstanceIdA(hContext: SCARDCONTEXT, szDeviceInstanceId: LPCSTR, mszReaders: LPSTR, pcchReaders: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardListReadersWithDeviceInstanceIdW(hContext: SCARDCONTEXT, szDeviceInstanceId: LPCWSTR, mszReaders: LPWSTR, pcchReaders: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardLocateCardsA(hContext: SCARDCONTEXT, mszCards: LPCSTR, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardLocateCardsByATRA(hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardLocateCardsByATRW(hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardLocateCardsW(hContext: SCARDCONTEXT, mszCards: LPCWSTR, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardReadCacheA(hContext: SCARDCONTEXT, CardIdentifier: ?*UUID, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: ?*DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardReadCacheW(hContext: SCARDCONTEXT, CardIdentifier: ?*UUID, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: ?*DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardReconnect(hCard: SCARDHANDLE, dwShareMode: DWORD, dwPreferredProtocols: DWORD, dwInitialization: DWORD, pdwActiveProtocol: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardReleaseContext(hContext: SCARDCONTEXT) LONG;
pub extern "winscard" stdcallcc fn SCardReleaseStartedEvent() void;
pub extern "winscard" stdcallcc fn SCardRemoveReaderFromGroupA(hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardRemoveReaderFromGroupW(hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardSetAttrib(hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPCBYTE, cbAttrLen: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardSetCardTypeProviderNameA(hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: LPCSTR) LONG;
pub extern "winscard" stdcallcc fn SCardSetCardTypeProviderNameW(hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: LPCWSTR) LONG;
pub extern "winscard" stdcallcc fn SCardState(hCard: SCARDHANDLE, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardStatusA(hCard: SCARDHANDLE, mszReaderNames: LPSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardStatusW(hCard: SCARDHANDLE, mszReaderNames: LPWSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardTransmit(hCard: SCARDHANDLE, pioSendPci: LPCSCARD_IO_REQUEST, pbSendBuffer: LPCBYTE, cbSendLength: DWORD, pioRecvPci: LPSCARD_IO_REQUEST, pbRecvBuffer: LPBYTE, pcbRecvLength: LPDWORD) LONG;
pub extern "winscard" stdcallcc fn SCardWriteCacheA(hContext: SCARDCONTEXT, CardIdentifier: ?*UUID, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: DWORD) LONG;
pub extern "winscard" stdcallcc fn SCardWriteCacheW(hContext: SCARDCONTEXT, CardIdentifier: ?*UUID, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: DWORD) LONG;
pub extern "winspool" stdcallcc fn AbortPrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn AddFormA(hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddFormW(hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddJobA(hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn AddJobW(hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn AddMonitorA(pName: LPSTR, Level: DWORD, pMonitors: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddMonitorW(pName: LPWSTR, Level: DWORD, pMonitors: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddPortA(pName: LPSTR, hWnd: HWND, pMonitorName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPortW(pName: LPWSTR, hWnd: HWND, pMonitorName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPrintProcessorA(pName: LPSTR, pEnvironment: LPSTR, pPathName: LPSTR, pPrintProcessorName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPrintProcessorW(pName: LPWSTR, pEnvironment: LPWSTR, pPathName: LPWSTR, pPrintProcessorName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPrintProvidorA(pName: LPSTR, Level: DWORD, pProvidorInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddPrintProvidorW(pName: LPWSTR, Level: DWORD, pProvidorInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterA(pName: LPSTR, Level: DWORD, pPrinter: LPBYTE) HANDLE;
pub extern "winspool" stdcallcc fn AddPrinterConnection2A(hWnd: HWND, pszName: LPCSTR, dwLevel: DWORD, pConnectionInfo: PVOID) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterConnection2W(hWnd: HWND, pszName: LPCWSTR, dwLevel: DWORD, pConnectionInfo: PVOID) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterConnectionA(pName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterConnectionW(pName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterDriverA(pName: LPSTR, Level: DWORD, pDriverInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterDriverExA(pName: LPSTR, Level: DWORD, lpbDriverInfo: PBYTE, dwFileCopyFlags: DWORD) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterDriverExW(pName: LPWSTR, Level: DWORD, lpbDriverInfo: PBYTE, dwFileCopyFlags: DWORD) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterDriverW(pName: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn AddPrinterW(pName: LPWSTR, Level: DWORD, pPrinter: LPBYTE) HANDLE;
pub extern "winspool" stdcallcc fn AdvancedDocumentPropertiesA(hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA) LONG;
pub extern "winspool" stdcallcc fn AdvancedDocumentPropertiesW(hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW) LONG;
pub extern "winspool" stdcallcc fn ClosePrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn CloseSpoolFileHandle(hPrinter: HANDLE, hSpoolFile: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn CommitSpoolData(hPrinter: HANDLE, hSpoolFile: HANDLE, cbCommit: DWORD) HANDLE;
pub extern "winspool" stdcallcc fn ConfigurePortA(pName: LPSTR, hWnd: HWND, pPortName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn ConfigurePortW(pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn ConnectToPrinterDlg(hwnd: HWND, Flags: DWORD) HANDLE;
pub extern "winspool" stdcallcc fn CorePrinterDriverInstalledA(pszServer: LPCSTR, pszEnvironment: LPCSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: ?*BOOL) HRESULT;
pub extern "winspool" stdcallcc fn CorePrinterDriverInstalledW(pszServer: LPCWSTR, pszEnvironment: LPCWSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: ?*BOOL) HRESULT;
pub extern "winspool" stdcallcc fn DeleteFormA(hPrinter: HANDLE, pFormName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeleteFormW(hPrinter: HANDLE, pFormName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeleteJobNamedProperty(hPrinter: HANDLE, JobId: DWORD, pszName: PCWSTR) DWORD;
pub extern "winspool" stdcallcc fn DeleteMonitorA(pName: LPSTR, pEnvironment: LPSTR, pMonitorName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeleteMonitorW(pName: LPWSTR, pEnvironment: LPWSTR, pMonitorName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePortA(pName: LPSTR, hWnd: HWND, pPortName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePortW(pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrintProcessorA(pName: LPSTR, pEnvironment: LPSTR, pPrintProcessorName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrintProcessorW(pName: LPWSTR, pEnvironment: LPWSTR, pPrintProcessorName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrintProvidorA(pName: LPSTR, pEnvironment: LPSTR, pPrintProvidorName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrintProvidorW(pName: LPWSTR, pEnvironment: LPWSTR, pPrintProvidorName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterConnectionA(pName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterConnectionW(pName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterDataA(hPrinter: HANDLE, pValueName: LPSTR) DWORD;
pub extern "winspool" stdcallcc fn DeletePrinterDataExA(hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR) DWORD;
pub extern "winspool" stdcallcc fn DeletePrinterDataExW(hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR) DWORD;
pub extern "winspool" stdcallcc fn DeletePrinterDataW(hPrinter: HANDLE, pValueName: LPWSTR) DWORD;
pub extern "winspool" stdcallcc fn DeletePrinterDriverA(pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterDriverExA(pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterDriverExW(pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterDriverPackageA(pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR) HRESULT;
pub extern "winspool" stdcallcc fn DeletePrinterDriverPackageW(pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR) HRESULT;
pub extern "winspool" stdcallcc fn DeletePrinterDriverW(pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR) BOOL;
pub extern "winspool" stdcallcc fn DeletePrinterKeyA(hPrinter: HANDLE, pKeyName: LPCSTR) DWORD;
pub extern "winspool" stdcallcc fn DeletePrinterKeyW(hPrinter: HANDLE, pKeyName: LPCWSTR) DWORD;
pub extern "winspool" stdcallcc fn DeviceCapabilitiesA(pDevice: LPCSTR, pPort: LPCSTR, fwCapability: WORD, pOutput: LPSTR, pDevMode: ?*const DEVMODEA) c_int;
pub extern "winspool" stdcallcc fn DeviceCapabilitiesW(pDevice: LPCWSTR, pPort: LPCWSTR, fwCapability: WORD, pOutput: LPWSTR, pDevMode: ?*const DEVMODEW) c_int;
pub extern "winspool" stdcallcc fn DocumentPropertiesA(hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA, fMode: DWORD) LONG;
pub extern "winspool" stdcallcc fn DocumentPropertiesW(hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW, fMode: DWORD) LONG;
pub extern "winspool" stdcallcc fn EndDocPrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn EndPagePrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn EnumFormsA(hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumFormsW(hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumJobNamedProperties(hPrinter: HANDLE, JobId: DWORD, pcProperties: ?*DWORD, ppProperties: ?*(?*PrintNamedProperty)) DWORD;
pub extern "winspool" stdcallcc fn EnumJobsA(hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumJobsW(hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumMonitorsA(pName: LPSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumMonitorsW(pName: LPWSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPortsA(pName: LPSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPortsW(pName: LPWSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrintProcessorDatatypesA(pName: LPSTR, pPrintProcessorName: LPSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrintProcessorDatatypesW(pName: LPWSTR, pPrintProcessorName: LPWSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrintProcessorsA(pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrintProcessorsW(pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrinterDataA(hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrinterDataExA(hPrinter: HANDLE, pKeyName: LPCSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrinterDataExW(hPrinter: HANDLE, pKeyName: LPCWSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrinterDataW(hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPWSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrinterDriversA(pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrinterDriversW(pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrinterKeyA(hPrinter: HANDLE, pKeyName: LPCSTR, pSubkey: LPSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrinterKeyW(hPrinter: HANDLE, pKeyName: LPCWSTR, pSubkey: LPWSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn EnumPrintersA(Flags: DWORD, Name: LPSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn EnumPrintersW(Flags: DWORD, Name: LPWSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn ExtDeviceMode(hWnd: HWND, hInst: HANDLE, pDevModeOutput: LPDEVMODEA, pDeviceName: LPSTR, pPort: LPSTR, pDevModeInput: LPDEVMODEA, pProfile: LPSTR, fMode: DWORD) LONG;
pub extern "winspool" stdcallcc fn FindClosePrinterChangeNotification(hChange: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn FindFirstPrinterChangeNotification(hPrinter: HANDLE, fdwFilter: DWORD, fdwOptions: DWORD, pPrinterNotifyOptions: PVOID) HANDLE;
pub extern "winspool" stdcallcc fn FindNextPrinterChangeNotification(hChange: HANDLE, pdwChange: PDWORD, pvReserved: LPVOID, ppPrinterNotifyInfo: ?*LPVOID) BOOL;
pub extern "winspool" stdcallcc fn FlushPrinter(hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD, cSleep: DWORD) BOOL;
pub extern "winspool" stdcallcc fn FreePrintNamedPropertyArray(cProperties: DWORD, ppProperties: ?*(?*PrintNamedProperty)) void;
pub extern "winspool" stdcallcc fn FreePrintPropertyValue(pValue: ?*PrintPropertyValue) void;
pub extern "winspool" stdcallcc fn FreePrinterNotifyInfo(pPrinterNotifyInfo: PPRINTER_NOTIFY_INFO) BOOL;
pub extern "winspool" stdcallcc fn GetCorePrinterDriversA(pszServer: LPCSTR, pszEnvironment: LPCSTR, pszzCoreDriverDependencies: LPCSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERA) HRESULT;
pub extern "winspool" stdcallcc fn GetCorePrinterDriversW(pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszzCoreDriverDependencies: LPCWSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERW) HRESULT;
pub extern "winspool" stdcallcc fn GetDefaultPrinterA(pszBuffer: LPSTR, pcchBuffer: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetDefaultPrinterW(pszBuffer: LPWSTR, pcchBuffer: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetFormA(hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetFormW(hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetJobA(hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetJobNamedPropertyValue(hPrinter: HANDLE, JobId: DWORD, pszName: PCWSTR, pValue: ?*PrintPropertyValue) DWORD;
pub extern "winspool" stdcallcc fn GetJobW(hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrintExecutionData(pData: ?*PRINT_EXECUTION_DATA) BOOL;
pub extern "winspool" stdcallcc fn GetPrintOutputInfo(hWnd: HWND, pszPrinter: PCWSTR, phFile: ?*HANDLE, ppszOutputFile: ?*PWSTR) HRESULT;
pub extern "winspool" stdcallcc fn GetPrintProcessorDirectoryA(pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrintProcessorDirectoryW(pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterA(hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDataA(hPrinter: HANDLE, pValueName: LPSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn GetPrinterDataExA(hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn GetPrinterDataExW(hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn GetPrinterDataW(hPrinter: HANDLE, pValueName: LPWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD) DWORD;
pub extern "winspool" stdcallcc fn GetPrinterDriver2A(hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDriver2W(hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDriverA(hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDriverDirectoryA(pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDriverDirectoryW(pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterDriverPackagePathA(pszServer: LPCSTR, pszEnvironment: LPCSTR, pszLanguage: LPCSTR, pszPackageID: LPCSTR, pszDriverPackageCab: LPSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD) HRESULT;
pub extern "winspool" stdcallcc fn GetPrinterDriverPackagePathW(pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszLanguage: LPCWSTR, pszPackageID: LPCWSTR, pszDriverPackageCab: LPWSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD) HRESULT;
pub extern "winspool" stdcallcc fn GetPrinterDriverW(hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetPrinterW(hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn GetSpoolFileHandle(hPrinter: HANDLE) HANDLE;
pub extern "winspool" stdcallcc fn InstallPrinterDriverFromPackageA(pszServer: LPCSTR, pszInfPath: LPCSTR, pszDriverName: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD) HRESULT;
pub extern "winspool" stdcallcc fn InstallPrinterDriverFromPackageW(pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszDriverName: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD) HRESULT;
pub extern "winspool" stdcallcc fn IsValidDevmodeA(pDevmode: PDEVMODEA, DevmodeSize: usize) BOOL;
pub extern "winspool" stdcallcc fn IsValidDevmodeW(pDevmode: PDEVMODEW, DevmodeSize: usize) BOOL;
pub extern "winspool" stdcallcc fn OpenPrinter2A(pPrinterName: LPCSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSA, pOptions: PPRINTER_OPTIONSA) BOOL;
pub extern "winspool" stdcallcc fn OpenPrinter2W(pPrinterName: LPCWSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSW, pOptions: PPRINTER_OPTIONSW) BOOL;
pub extern "winspool" stdcallcc fn OpenPrinterA(pPrinterName: LPSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSA) BOOL;
pub extern "winspool" stdcallcc fn OpenPrinterW(pPrinterName: LPWSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSW) BOOL;
pub extern "winspool" stdcallcc fn PrinterMessageBoxA(hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPSTR, pCaption: LPSTR, dwType: DWORD) DWORD;
pub extern "winspool" stdcallcc fn PrinterMessageBoxW(hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPWSTR, pCaption: LPWSTR, dwType: DWORD) DWORD;
pub extern "winspool" stdcallcc fn PrinterProperties(hWnd: HWND, hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn ReadPrinter(hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pNoBytesRead: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn ReportJobProcessingProgress(printerHandle: HANDLE, jobId: ULONG, jobOperation: EPrintXPSJobOperation, jobProgress: EPrintXPSJobProgress) HRESULT;
pub extern "winspool" stdcallcc fn ResetPrinterA(hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSA) BOOL;
pub extern "winspool" stdcallcc fn ResetPrinterW(hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSW) BOOL;
pub extern "winspool" stdcallcc fn ScheduleJob(hPrinter: HANDLE, JobId: DWORD) BOOL;
pub extern "winspool" stdcallcc fn SetDefaultPrinterA(pszPrinter: LPCSTR) BOOL;
pub extern "winspool" stdcallcc fn SetDefaultPrinterW(pszPrinter: LPCWSTR) BOOL;
pub extern "winspool" stdcallcc fn SetFormA(hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn SetFormW(hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn SetJobA(hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD) BOOL;
pub extern "winspool" stdcallcc fn SetJobNamedProperty(hPrinter: HANDLE, JobId: DWORD, pProperty: ?*const PrintNamedProperty) DWORD;
pub extern "winspool" stdcallcc fn SetJobW(hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD) BOOL;
pub extern "winspool" stdcallcc fn SetPortA(pName: LPSTR, pPortName: LPSTR, dwLevel: DWORD, pPortInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn SetPortW(pName: LPWSTR, pPortName: LPWSTR, dwLevel: DWORD, pPortInfo: LPBYTE) BOOL;
pub extern "winspool" stdcallcc fn SetPrinterA(hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD) BOOL;
pub extern "winspool" stdcallcc fn SetPrinterDataA(hPrinter: HANDLE, pValueName: LPSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD) DWORD;
pub extern "winspool" stdcallcc fn SetPrinterDataExA(hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD) DWORD;
pub extern "winspool" stdcallcc fn SetPrinterDataExW(hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD) DWORD;
pub extern "winspool" stdcallcc fn SetPrinterDataW(hPrinter: HANDLE, pValueName: LPWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD) DWORD;
pub extern "winspool" stdcallcc fn SetPrinterW(hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD) BOOL;
pub extern "winspool" stdcallcc fn StartDocPrinterA(hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE) DWORD;
pub extern "winspool" stdcallcc fn StartDocPrinterW(hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE) DWORD;
pub extern "winspool" stdcallcc fn StartPagePrinter(hPrinter: HANDLE) BOOL;
pub extern "winspool" stdcallcc fn UploadPrinterDriverPackageA(pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPSTR, pcchDestInfPath: PULONG) HRESULT;
pub extern "winspool" stdcallcc fn UploadPrinterDriverPackageW(pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPWSTR, pcchDestInfPath: PULONG) HRESULT;
pub extern "winspool" stdcallcc fn WaitForPrinterChange(hPrinter: HANDLE, Flags: DWORD) DWORD;
pub extern "winspool" stdcallcc fn WritePrinter(hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD) BOOL;
pub extern "winspool" stdcallcc fn XcvDataW(hXcv: HANDLE, pszDataName: PCWSTR, pInputData: PBYTE, cbInputData: DWORD, pOutputData: PBYTE, cbOutputData: DWORD, pcbOutputNeeded: PDWORD, pdwStatus: PDWORD) BOOL;
pub extern "wintrust" stdcallcc fn FindCertsByIssuer(pCertChains: PCERT_CHAIN, pcbCertChains: ?*DWORD, pcCertChains: ?*DWORD, pbEncodedIssuerName: ?*BYTE, cbEncodedIssuerName: DWORD, pwszPurpose: LPCWSTR, dwKeySpec: DWORD) HRESULT;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetHostByAddr(hWnd: HWND, wMsg: u_int, addr: ?[*]const u8, len: c_int, type_0: c_int, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetHostByName(hWnd: HWND, wMsg: u_int, name: ?[*]const u8, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetProtoByName(hWnd: HWND, wMsg: u_int, name: ?[*]const u8, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetProtoByNumber(hWnd: HWND, wMsg: u_int, number: c_int, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetServByName(hWnd: HWND, wMsg: u_int, name: ?[*]const u8, proto: ?[*]const u8, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncGetServByPort(hWnd: HWND, wMsg: u_int, port: c_int, proto: ?[*]const u8, buf: ?[*]u8, buflen: c_int) HANDLE;
pub extern "ws2_32" stdcallcc fn WSAAsyncSelect(s: SOCKET, hWnd: HWND, wMsg: u_int, lEvent: c_long) c_int;
pub extern "ws2_32" stdcallcc fn WSACancelAsyncRequest(hAsyncTaskHandle: HANDLE) c_int;
pub extern "ws2_32" stdcallcc fn WSACancelBlockingCall() c_int;
pub extern "ws2_32" stdcallcc fn WSACleanup() c_int;
pub extern "ws2_32" stdcallcc fn WSAGetLastError() c_int;
pub extern "ws2_32" stdcallcc fn WSAIsBlocking() BOOL;
pub extern "ws2_32" stdcallcc fn WSASetLastError(iError: c_int) void;
pub extern "ws2_32" stdcallcc fn WSAStartup(wVersionRequired: WORD, lpWSAData: LPWSADATA) c_int;
pub extern "ws2_32" stdcallcc fn WSAUnhookBlockingHook() c_int;
pub extern "ws2_32" stdcallcc fn accept(s: SOCKET, addr: ?*struct_sockaddr, addrlen: ?*c_int) SOCKET;
pub extern "ws2_32" stdcallcc fn bind(s: SOCKET, addr: ?*const struct_sockaddr, namelen: c_int) c_int;
pub extern "ws2_32" stdcallcc fn closesocket(s: SOCKET) c_int;
pub extern "ws2_32" stdcallcc fn connect(s: SOCKET, name: ?*const struct_sockaddr, namelen: c_int) c_int;
pub extern "ws2_32" stdcallcc fn gethostbyaddr(addr: ?[*]const u8, len: c_int, type_0: c_int) ?*struct_hostent;
pub extern "ws2_32" stdcallcc fn gethostbyname(name: ?[*]const u8) ?*struct_hostent;
pub extern "ws2_32" stdcallcc fn gethostname(name: ?[*]u8, namelen: c_int) c_int;
pub extern "ws2_32" stdcallcc fn getpeername(s: SOCKET, name: ?*struct_sockaddr, namelen: ?*c_int) c_int;
pub extern "ws2_32" stdcallcc fn getprotobyname(name: ?[*]const u8) ?*struct_protoent;
pub extern "ws2_32" stdcallcc fn getprotobynumber(proto: c_int) ?*struct_protoent;
pub extern "ws2_32" stdcallcc fn getservbyname(name: ?[*]const u8, proto: ?[*]const u8) ?*struct_servent;
pub extern "ws2_32" stdcallcc fn getservbyport(port: c_int, proto: ?[*]const u8) ?*struct_servent;
pub extern "ws2_32" stdcallcc fn getsockname(s: SOCKET, name: ?*struct_sockaddr, namelen: ?*c_int) c_int;
pub extern "ws2_32" stdcallcc fn getsockopt(s: SOCKET, level: c_int, optname: c_int, optval: ?[*]u8, optlen: ?*c_int) c_int;
pub extern "ws2_32" stdcallcc fn htonl(hostlong: u_long) u_long;
pub extern "ws2_32" stdcallcc fn htons(hostshort: u_short) u_short;
pub extern "ws2_32" stdcallcc fn inet_addr(cp: ?[*]const u8) c_ulong;
pub extern "ws2_32" stdcallcc fn inet_ntoa(in: struct_in_addr) ?[*]u8;
pub extern "ws2_32" stdcallcc fn ioctlsocket(s: SOCKET, cmd: c_long, argp: ?*u_long) c_int;
pub extern "ws2_32" stdcallcc fn listen(s: SOCKET, backlog: c_int) c_int;
pub extern "ws2_32" stdcallcc fn ntohl(netlong: u_long) u_long;
pub extern "ws2_32" stdcallcc fn ntohs(netshort: u_short) u_short;
pub extern "ws2_32" stdcallcc fn recv(s: SOCKET, buf: ?[*]u8, len: c_int, flags: c_int) c_int;
pub extern "ws2_32" stdcallcc fn recvfrom(s: SOCKET, buf: ?[*]u8, len: c_int, flags: c_int, from: ?*struct_sockaddr, fromlen: ?*c_int) c_int;
pub extern "ws2_32" stdcallcc fn select(nfds: c_int, readfds: ?*fd_set, writefds: ?*fd_set, exceptfds: ?*fd_set, timeout: ?*const struct_timeval) c_int;
pub extern "ws2_32" stdcallcc fn send(s: SOCKET, buf: ?[*]const u8, len: c_int, flags: c_int) c_int;
pub extern "ws2_32" stdcallcc fn sendto(s: SOCKET, buf: ?[*]const u8, len: c_int, flags: c_int, to: ?*const struct_sockaddr, tolen: c_int) c_int;
pub extern "ws2_32" stdcallcc fn setsockopt(s: SOCKET, level: c_int, optname: c_int, optval: ?[*]const u8, optlen: c_int) c_int;
pub extern "ws2_32" stdcallcc fn shutdown(s: SOCKET, how: c_int) c_int;
pub extern "ws2_32" stdcallcc fn socket(af: c_int, type_0: c_int, protocol: c_int) SOCKET;