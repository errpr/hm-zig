use @import("gl_types.zig");

pub const GL_2D = 1536;
pub const GL_2_BYTES = 5127;
pub const GL_3D = 1537;
pub const GL_3D_COLOR = 1538;
pub const GL_3D_COLOR_TEXTURE = 1539;
pub const GL_3_BYTES = 5128;
pub const GL_4D_COLOR_TEXTURE = 1540;
pub const GL_4_BYTES = 5129;
pub const GL_ACCUM = 256;
pub const GL_ACCUM_ALPHA_BITS = 3419;
pub const GL_ACCUM_BLUE_BITS = 3418;
pub const GL_ACCUM_BUFFER_BIT = 512;
pub const GL_ACCUM_CLEAR_VALUE = 2944;
pub const GL_ACCUM_GREEN_BITS = 3417;
pub const GL_ACCUM_RED_BITS = 3416;
pub const GL_ADD = 260;
pub const GL_ALL_ATTRIB_BITS = 1048575;
pub const GL_ALPHA = 6406;
pub const GL_ALPHA12 = 32829;
pub const GL_ALPHA16 = 32830;
pub const GL_ALPHA4 = 32827;
pub const GL_ALPHA8 = 32828;
pub const GL_ALPHA_BIAS = 3357;
pub const GL_ALPHA_BITS = 3413;
pub const GL_ALPHA_SCALE = 3356;
pub const GL_ALPHA_TEST = 3008;
pub const GL_ALPHA_TEST_FUNC = 3009;
pub const GL_ALPHA_TEST_REF = 3010;
pub const GL_ALWAYS = 519;
pub const GL_AMBIENT = 4608;
pub const GL_AMBIENT_AND_DIFFUSE = 5634;
pub const GL_AND = 5377;
pub const GL_AND_INVERTED = 5380;
pub const GL_AND_REVERSE = 5378;
pub const GL_ATTRIB_STACK_DEPTH = 2992;
pub const GL_AUTO_NORMAL = 3456;
pub const GL_AUX0 = 1033;
pub const GL_AUX1 = 1034;
pub const GL_AUX2 = 1035;
pub const GL_AUX3 = 1036;
pub const GL_AUX_BUFFERS = 3072;
pub const GL_BACK = 1029;
pub const GL_BACK_LEFT = 1026;
pub const GL_BACK_RIGHT = 1027;
pub const GL_BGRA_EXT = 32993;
pub const GL_BGR_EXT = 32992;
pub const GL_BITMAP = 6656;
pub const GL_BITMAP_TOKEN = 1796;
pub const GL_BLEND = 3042;
pub const GL_BLEND_DST = 3040;
pub const GL_BLEND_SRC = 3041;
pub const GL_BLUE = 6405;
pub const GL_BLUE_BIAS = 3355;
pub const GL_BLUE_BITS = 3412;
pub const GL_BLUE_SCALE = 3354;
pub const GL_BYTE = 5120;
pub const GL_C3F_V3F = 10788;
pub const GL_C4F_N3F_V3F = 10790;
pub const GL_C4UB_V2F = 10786;
pub const GL_C4UB_V3F = 10787;
pub const GL_CCW = 2305;
pub const GL_CLAMP = 10496;
pub const GL_CLEAR = 5376;
pub const GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
pub const GL_CLIENT_PIXEL_STORE_BIT = 1;
pub const GL_CLIENT_VERTEX_ARRAY_BIT = 2;
pub const GL_CLIP_PLANE0 = 12288;
pub const GL_CLIP_PLANE1 = 12289;
pub const GL_CLIP_PLANE2 = 12290;
pub const GL_CLIP_PLANE3 = 12291;
pub const GL_CLIP_PLANE4 = 12292;
pub const GL_CLIP_PLANE5 = 12293;
pub const GL_COEFF = 2560;
pub const GL_COLOR = 6144;
pub const GL_COLOR_ARRAY = 32886;
pub const GL_COLOR_ARRAY_COUNT_EXT = 32900;
pub const GL_COLOR_ARRAY_EXT = 32886;
pub const GL_COLOR_ARRAY_POINTER = 32912;
pub const GL_COLOR_ARRAY_POINTER_EXT = 32912;
pub const GL_COLOR_ARRAY_SIZE = 32897;
pub const GL_COLOR_ARRAY_SIZE_EXT = 32897;
pub const GL_COLOR_ARRAY_STRIDE = 32899;
pub const GL_COLOR_ARRAY_STRIDE_EXT = 32899;
pub const GL_COLOR_ARRAY_TYPE = 32898;
pub const GL_COLOR_ARRAY_TYPE_EXT = 32898;
pub const GL_COLOR_BUFFER_BIT = 16384;
pub const GL_COLOR_CLEAR_VALUE = 3106;
pub const GL_COLOR_INDEX = 6400;
pub const GL_COLOR_INDEX12_EXT = 32998;
pub const GL_COLOR_INDEX16_EXT = 32999;
pub const GL_COLOR_INDEX1_EXT = 32994;
pub const GL_COLOR_INDEX2_EXT = 32995;
pub const GL_COLOR_INDEX4_EXT = 32996;
pub const GL_COLOR_INDEX8_EXT = 32997;
pub const GL_COLOR_INDEXES = 5635;
pub const GL_COLOR_LOGIC_OP = 3058;
pub const GL_COLOR_MATERIAL = 2903;
pub const GL_COLOR_MATERIAL_FACE = 2901;
pub const GL_COLOR_MATERIAL_PARAMETER = 2902;
pub const GL_COLOR_TABLE_ALPHA_SIZE_EXT = 32989;
pub const GL_COLOR_TABLE_BLUE_SIZE_EXT = 32988;
pub const GL_COLOR_TABLE_FORMAT_EXT = 32984;
pub const GL_COLOR_TABLE_GREEN_SIZE_EXT = 32987;
pub const GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 32991;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 32990;
pub const GL_COLOR_TABLE_RED_SIZE_EXT = 32986;
pub const GL_COLOR_TABLE_WIDTH_EXT = 32985;
pub const GL_COLOR_WRITEMASK = 3107;
pub const GL_COMPILE = 4864;
pub const GL_COMPILE_AND_EXECUTE = 4865;
pub const GL_CONSTANT_ATTENUATION = 4615;
pub const GL_COPY = 5379;
pub const GL_COPY_INVERTED = 5388;
pub const GL_COPY_PIXEL_TOKEN = 1798;
pub const GL_CULL_FACE = 2884;
pub const GL_CULL_FACE_MODE = 2885;
pub const GL_CURRENT_BIT = 1;
pub const GL_CURRENT_COLOR = 2816;
pub const GL_CURRENT_INDEX = 2817;
pub const GL_CURRENT_NORMAL = 2818;
pub const GL_CURRENT_RASTER_COLOR = 2820;
pub const GL_CURRENT_RASTER_DISTANCE = 2825;
pub const GL_CURRENT_RASTER_INDEX = 2821;
pub const GL_CURRENT_RASTER_POSITION = 2823;
pub const GL_CURRENT_RASTER_POSITION_VALID = 2824;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
pub const GL_CURRENT_TEXTURE_COORDS = 2819;
pub const GL_CW = 2304;
pub const GL_DECAL = 8449;
pub const GL_DECR = 7683;
pub const GL_DEPTH = 6145;
pub const GL_DEPTH_BIAS = 3359;
pub const GL_DEPTH_BITS = 3414;
pub const GL_DEPTH_BUFFER_BIT = 256;
pub const GL_DEPTH_CLEAR_VALUE = 2931;
pub const GL_DEPTH_COMPONENT = 6402;
pub const GL_DEPTH_FUNC = 2932;
pub const GL_DEPTH_RANGE = 2928;
pub const GL_DEPTH_SCALE = 3358;
pub const GL_DEPTH_TEST = 2929;
pub const GL_DEPTH_WRITEMASK = 2930;
pub const GL_DIFFUSE = 4609;
pub const GL_DITHER = 3024;
pub const GL_DOMAIN = 2562;
pub const GL_DONT_CARE = 4352;
pub const GL_DOUBLE = 5130;
pub const GL_DOUBLEBUFFER = 3122;
pub const GL_DOUBLE_EXT = GL_DOUBLE;
pub const GL_DRAW_BUFFER = 3073;
pub const GL_DRAW_PIXEL_TOKEN = 1797;
pub const GL_DST_ALPHA = 772;
pub const GL_DST_COLOR = 774;
pub const GL_EDGE_FLAG = 2883;
pub const GL_EDGE_FLAG_ARRAY = 32889;
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909;
pub const GL_EDGE_FLAG_ARRAY_EXT = 32889;
pub const GL_EDGE_FLAG_ARRAY_POINTER = 32915;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915;
pub const GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908;
pub const GL_EMISSION = 5632;
pub const GL_ENABLE_BIT = 8192;
pub const GL_EQUAL = 514;
pub const GL_EQUIV = 5385;
pub const GL_EVAL_BIT = 65536;
pub const GL_EXP = 2048;
pub const GL_EXP2 = 2049;
pub const GL_EXTENSIONS = 7939;
pub const GL_EXT_bgra = 1;
pub const GL_EXT_paletted_texture = 1;
pub const GL_EXT_vertex_array = 1;
pub const GL_EYE_LINEAR = 9216;
pub const GL_EYE_PLANE = 9474;
pub const GL_FALSE = 0;
pub const GL_FASTEST = 4353;
pub const GL_FEEDBACK = 7169;
pub const GL_FEEDBACK_BUFFER_POINTER = 3568;
pub const GL_FEEDBACK_BUFFER_SIZE = 3569;
pub const GL_FEEDBACK_BUFFER_TYPE = 3570;
pub const GL_FILL = 6914;
pub const GL_FLAT = 7424;
pub const GL_FLOAT = 5126;
pub const GL_FOG = 2912;
pub const GL_FOG_BIT = 128;
pub const GL_FOG_COLOR = 2918;
pub const GL_FOG_DENSITY = 2914;
pub const GL_FOG_END = 2916;
pub const GL_FOG_HINT = 3156;
pub const GL_FOG_INDEX = 2913;
pub const GL_FOG_MODE = 2917;
pub const GL_FOG_SPECULAR_TEXTURE_WIN = 33004;
pub const GL_FOG_START = 2915;
pub const GL_FRONT = 1028;
pub const GL_FRONT_AND_BACK = 1032;
pub const GL_FRONT_FACE = 2886;
pub const GL_FRONT_LEFT = 1024;
pub const GL_FRONT_RIGHT = 1025;
pub const GL_GEQUAL = 518;
pub const GL_GREATER = 516;
pub const GL_GREEN = 6404;
pub const GL_GREEN_BIAS = 3353;
pub const GL_GREEN_BITS = 3411;
pub const GL_GREEN_SCALE = 3352;
pub const GL_HINT_BIT = 32768;
pub const GL_INCR = 7682;
pub const GL_INDEX_ARRAY = 32887;
pub const GL_INDEX_ARRAY_COUNT_EXT = 32903;
pub const GL_INDEX_ARRAY_EXT = 32887;
pub const GL_INDEX_ARRAY_POINTER = 32913;
pub const GL_INDEX_ARRAY_POINTER_EXT = 32913;
pub const GL_INDEX_ARRAY_STRIDE = 32902;
pub const GL_INDEX_ARRAY_STRIDE_EXT = 32902;
pub const GL_INDEX_ARRAY_TYPE = 32901;
pub const GL_INDEX_ARRAY_TYPE_EXT = 32901;
pub const GL_INDEX_BITS = 3409;
pub const GL_INDEX_CLEAR_VALUE = 3104;
pub const GL_INDEX_LOGIC_OP = 3057;
pub const GL_INDEX_MODE = 3120;
pub const GL_INDEX_OFFSET = 3347;
pub const GL_INDEX_SHIFT = 3346;
pub const GL_INDEX_WRITEMASK = 3105;
pub const GL_INT = 5124;
pub const GL_INTENSITY = 32841;
pub const GL_INTENSITY12 = 32844;
pub const GL_INTENSITY16 = 32845;
pub const GL_INTENSITY4 = 32842;
pub const GL_INTENSITY8 = 32843;
pub const GL_INVALID_ENUM = 1280;
pub const GL_INVALID_OPERATION = 1282;
pub const GL_INVALID_VALUE = 1281;
pub const GL_INVERT = 5386;
pub const GL_KEEP = 7680;
pub const GL_LEFT = 1030;
pub const GL_LEQUAL = 515;
pub const GL_LESS = 513;
pub const GL_LIGHT0 = 16384;
pub const GL_LIGHT1 = 16385;
pub const GL_LIGHT2 = 16386;
pub const GL_LIGHT3 = 16387;
pub const GL_LIGHT4 = 16388;
pub const GL_LIGHT5 = 16389;
pub const GL_LIGHT6 = 16390;
pub const GL_LIGHT7 = 16391;
pub const GL_LIGHTING = 2896;
pub const GL_LIGHTING_BIT = 64;
pub const GL_LIGHT_MODEL_AMBIENT = 2899;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
pub const GL_LIGHT_MODEL_TWO_SIDE = 2898;
pub const GL_LINE = 6913;
pub const GL_LINEAR = 9729;
pub const GL_LINEAR_ATTENUATION = 4616;
pub const GL_LINEAR_MIPMAP_LINEAR = 9987;
pub const GL_LINEAR_MIPMAP_NEAREST = 9985;
pub const GL_LINES = 1;
pub const GL_LINE_BIT = 4;
pub const GL_LINE_LOOP = 2;
pub const GL_LINE_RESET_TOKEN = 1799;
pub const GL_LINE_SMOOTH = 2848;
pub const GL_LINE_SMOOTH_HINT = 3154;
pub const GL_LINE_STIPPLE = 2852;
pub const GL_LINE_STIPPLE_PATTERN = 2853;
pub const GL_LINE_STIPPLE_REPEAT = 2854;
pub const GL_LINE_STRIP = 3;
pub const GL_LINE_TOKEN = 1794;
pub const GL_LINE_WIDTH = 2849;
pub const GL_LINE_WIDTH_GRANULARITY = 2851;
pub const GL_LINE_WIDTH_RANGE = 2850;
pub const GL_LIST_BASE = 2866;
pub const GL_LIST_BIT = 131072;
pub const GL_LIST_INDEX = 2867;
pub const GL_LIST_MODE = 2864;
pub const GL_LOAD = 257;
pub const GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
pub const GL_LOGIC_OP_MODE = 3056;
pub const GL_LUMINANCE = 6409;
pub const GL_LUMINANCE12 = 32833;
pub const GL_LUMINANCE12_ALPHA12 = 32839;
pub const GL_LUMINANCE12_ALPHA4 = 32838;
pub const GL_LUMINANCE16 = 32834;
pub const GL_LUMINANCE16_ALPHA16 = 32840;
pub const GL_LUMINANCE4 = 32831;
pub const GL_LUMINANCE4_ALPHA4 = 32835;
pub const GL_LUMINANCE6_ALPHA2 = 32836;
pub const GL_LUMINANCE8 = 32832;
pub const GL_LUMINANCE8_ALPHA8 = 32837;
pub const GL_LUMINANCE_ALPHA = 6410;
pub const GL_MAP1_COLOR_4 = 3472;
pub const GL_MAP1_GRID_DOMAIN = 3536;
pub const GL_MAP1_GRID_SEGMENTS = 3537;
pub const GL_MAP1_INDEX = 3473;
pub const GL_MAP1_NORMAL = 3474;
pub const GL_MAP1_TEXTURE_COORD_1 = 3475;
pub const GL_MAP1_TEXTURE_COORD_2 = 3476;
pub const GL_MAP1_TEXTURE_COORD_3 = 3477;
pub const GL_MAP1_TEXTURE_COORD_4 = 3478;
pub const GL_MAP1_VERTEX_3 = 3479;
pub const GL_MAP1_VERTEX_4 = 3480;
pub const GL_MAP2_COLOR_4 = 3504;
pub const GL_MAP2_GRID_DOMAIN = 3538;
pub const GL_MAP2_GRID_SEGMENTS = 3539;
pub const GL_MAP2_INDEX = 3505;
pub const GL_MAP2_NORMAL = 3506;
pub const GL_MAP2_TEXTURE_COORD_1 = 3507;
pub const GL_MAP2_TEXTURE_COORD_2 = 3508;
pub const GL_MAP2_TEXTURE_COORD_3 = 3509;
pub const GL_MAP2_TEXTURE_COORD_4 = 3510;
pub const GL_MAP2_VERTEX_3 = 3511;
pub const GL_MAP2_VERTEX_4 = 3512;
pub const GL_MAP_COLOR = 3344;
pub const GL_MAP_STENCIL = 3345;
pub const GL_MATRIX_MODE = 2976;
pub const GL_MAX_ATTRIB_STACK_DEPTH = 3381;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
pub const GL_MAX_CLIP_PLANES = 3378;
pub const GL_MAX_ELEMENTS_INDICES_WIN = 33001;
pub const GL_MAX_ELEMENTS_VERTICES_WIN = 33000;
pub const GL_MAX_EVAL_ORDER = 3376;
pub const GL_MAX_LIGHTS = 3377;
pub const GL_MAX_LIST_NESTING = 2865;
pub const GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
pub const GL_MAX_NAME_STACK_DEPTH = 3383;
pub const GL_MAX_PIXEL_MAP_TABLE = 3380;
pub const GL_MAX_PROJECTION_STACK_DEPTH = 3384;
pub const GL_MAX_TEXTURE_SIZE = 3379;
pub const GL_MAX_TEXTURE_STACK_DEPTH = 3385;
pub const GL_MAX_VIEWPORT_DIMS = 3386;
pub const GL_MODELVIEW = 5888;
pub const GL_MODELVIEW_MATRIX = 2982;
pub const GL_MODELVIEW_STACK_DEPTH = 2979;
pub const GL_MODULATE = 8448;
pub const GL_MULT = 259;
pub const GL_N3F_V3F = 10789;
pub const GL_NAME_STACK_DEPTH = 3440;
pub const GL_NAND = 5390;
pub const GL_NEAREST = 9728;
pub const GL_NEAREST_MIPMAP_LINEAR = 9986;
pub const GL_NEAREST_MIPMAP_NEAREST = 9984;
pub const GL_NEVER = 512;
pub const GL_NICEST = 4354;
pub const GL_NONE = 0;
pub const GL_NOOP = 5381;
pub const GL_NOR = 5384;
pub const GL_NORMALIZE = 2977;
pub const GL_NORMAL_ARRAY = 32885;
pub const GL_NORMAL_ARRAY_COUNT_EXT = 32896;
pub const GL_NORMAL_ARRAY_EXT = 32885;
pub const GL_NORMAL_ARRAY_POINTER = 32911;
pub const GL_NORMAL_ARRAY_POINTER_EXT = 32911;
pub const GL_NORMAL_ARRAY_STRIDE = 32895;
pub const GL_NORMAL_ARRAY_STRIDE_EXT = 32895;
pub const GL_NORMAL_ARRAY_TYPE = 32894;
pub const GL_NORMAL_ARRAY_TYPE_EXT = 32894;
pub const GL_NOTEQUAL = 517;
pub const GL_NO_ERROR = 0;
pub const GL_OBJECT_LINEAR = 9217;
pub const GL_OBJECT_PLANE = 9473;
pub const GL_ONE = 1;
pub const GL_ONE_MINUS_DST_ALPHA = 773;
pub const GL_ONE_MINUS_DST_COLOR = 775;
pub const GL_ONE_MINUS_SRC_ALPHA = 771;
pub const GL_ONE_MINUS_SRC_COLOR = 769;
pub const GL_OR = 5383;
pub const GL_ORDER = 2561;
pub const GL_OR_INVERTED = 5389;
pub const GL_OR_REVERSE = 5387;
pub const GL_OUT_OF_MEMORY = 1285;
pub const GL_PACK_ALIGNMENT = 3333;
pub const GL_PACK_LSB_FIRST = 3329;
pub const GL_PACK_ROW_LENGTH = 3330;
pub const GL_PACK_SKIP_PIXELS = 3332;
pub const GL_PACK_SKIP_ROWS = 3331;
pub const GL_PACK_SWAP_BYTES = 3328;
pub const GL_PASS_THROUGH_TOKEN = 1792;
pub const GL_PERSPECTIVE_CORRECTION_HINT = 3152;
pub const GL_PHONG_HINT_WIN = 33003;
pub const GL_PHONG_WIN = 33002;
pub const GL_PIXEL_MAP_A_TO_A = 3193;
pub const GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
pub const GL_PIXEL_MAP_B_TO_B = 3192;
pub const GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
pub const GL_PIXEL_MAP_G_TO_G = 3191;
pub const GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
pub const GL_PIXEL_MAP_I_TO_A = 3189;
pub const GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
pub const GL_PIXEL_MAP_I_TO_B = 3188;
pub const GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
pub const GL_PIXEL_MAP_I_TO_G = 3187;
pub const GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
pub const GL_PIXEL_MAP_I_TO_I = 3184;
pub const GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
pub const GL_PIXEL_MAP_I_TO_R = 3186;
pub const GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
pub const GL_PIXEL_MAP_R_TO_R = 3190;
pub const GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
pub const GL_PIXEL_MAP_S_TO_S = 3185;
pub const GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
pub const GL_PIXEL_MODE_BIT = 32;
pub const GL_POINT = 6912;
pub const GL_POINTS = 0;
pub const GL_POINT_BIT = 2;
pub const GL_POINT_SIZE = 2833;
pub const GL_POINT_SIZE_GRANULARITY = 2835;
pub const GL_POINT_SIZE_RANGE = 2834;
pub const GL_POINT_SMOOTH = 2832;
pub const GL_POINT_SMOOTH_HINT = 3153;
pub const GL_POINT_TOKEN = 1793;
pub const GL_POLYGON = 9;
pub const GL_POLYGON_BIT = 8;
pub const GL_POLYGON_MODE = 2880;
pub const GL_POLYGON_OFFSET_FACTOR = 32824;
pub const GL_POLYGON_OFFSET_FILL = 32823;
pub const GL_POLYGON_OFFSET_LINE = 10754;
pub const GL_POLYGON_OFFSET_POINT = 10753;
pub const GL_POLYGON_OFFSET_UNITS = 10752;
pub const GL_POLYGON_SMOOTH = 2881;
pub const GL_POLYGON_SMOOTH_HINT = 3155;
pub const GL_POLYGON_STIPPLE = 2882;
pub const GL_POLYGON_STIPPLE_BIT = 16;
pub const GL_POLYGON_TOKEN = 1795;
pub const GL_POSITION = 4611;
pub const GL_PROJECTION = 5889;
pub const GL_PROJECTION_MATRIX = 2983;
pub const GL_PROJECTION_STACK_DEPTH = 2980;
pub const GL_PROXY_TEXTURE_1D = 32867;
pub const GL_PROXY_TEXTURE_2D = 32868;
pub const GL_Q = 8195;
pub const GL_QUADRATIC_ATTENUATION = 4617;
pub const GL_QUADS = 7;
pub const GL_QUAD_STRIP = 8;
pub const GL_R = 8194;
pub const GL_R3_G3_B2 = 10768;
pub const GL_READ_BUFFER = 3074;
pub const GL_RED = 6403;
pub const GL_RED_BIAS = 3349;
pub const GL_RED_BITS = 3410;
pub const GL_RED_SCALE = 3348;
pub const GL_RENDER = 7168;
pub const GL_RENDERER = 7937;
pub const GL_RENDER_MODE = 3136;
pub const GL_REPEAT = 10497;
pub const GL_REPLACE = 7681;
pub const GL_RETURN = 258;
pub const GL_RGB = 6407;
pub const GL_RGB10 = 32850;
pub const GL_RGB10_A2 = 32857;
pub const GL_RGB12 = 32851;
pub const GL_RGB16 = 32852;
pub const GL_RGB4 = 32847;
pub const GL_RGB5 = 32848;
pub const GL_RGB5_A1 = 32855;
pub const GL_RGB8 = 32849;
pub const GL_RGBA = 6408;
pub const GL_RGBA12 = 32858;
pub const GL_RGBA16 = 32859;
pub const GL_RGBA2 = 32853;
pub const GL_RGBA4 = 32854;
pub const GL_RGBA8 = 32856;
pub const GL_RGBA_MODE = 3121;
pub const GL_RIGHT = 1031;
pub const GL_S = 8192;
pub const GL_SCISSOR_BIT = 524288;
pub const GL_SCISSOR_BOX = 3088;
pub const GL_SCISSOR_TEST = 3089;
pub const GL_SELECT = 7170;
pub const GL_SELECTION_BUFFER_POINTER = 3571;
pub const GL_SELECTION_BUFFER_SIZE = 3572;
pub const GL_SET = 5391;
pub const GL_SHADE_MODEL = 2900;
pub const GL_SHININESS = 5633;
pub const GL_SHORT = 5122;
pub const GL_SMOOTH = 7425;
pub const GL_SPECULAR = 4610;
pub const GL_SPHERE_MAP = 9218;
pub const GL_SPOT_CUTOFF = 4614;
pub const GL_SPOT_DIRECTION = 4612;
pub const GL_SPOT_EXPONENT = 4613;
pub const GL_SRC_ALPHA = 770;
pub const GL_SRC_ALPHA_SATURATE = 776;
pub const GL_SRC_COLOR = 768;
pub const GL_STACK_OVERFLOW = 1283;
pub const GL_STACK_UNDERFLOW = 1284;
pub const GL_STENCIL = 6146;
pub const GL_STENCIL_BITS = 3415;
pub const GL_STENCIL_BUFFER_BIT = 1024;
pub const GL_STENCIL_CLEAR_VALUE = 2961;
pub const GL_STENCIL_FAIL = 2964;
pub const GL_STENCIL_FUNC = 2962;
pub const GL_STENCIL_INDEX = 6401;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS = 2966;
pub const GL_STENCIL_REF = 2967;
pub const GL_STENCIL_TEST = 2960;
pub const GL_STENCIL_VALUE_MASK = 2963;
pub const GL_STENCIL_WRITEMASK = 2968;
pub const GL_STEREO = 3123;
pub const GL_SUBPIXEL_BITS = 3408;
pub const GL_T = 8193;
pub const GL_T2F_C3F_V3F = 10794;
pub const GL_T2F_C4F_N3F_V3F = 10796;
pub const GL_T2F_C4UB_V3F = 10793;
pub const GL_T2F_N3F_V3F = 10795;
pub const GL_T2F_V3F = 10791;
pub const GL_T4F_C4F_N3F_V4F = 10797;
pub const GL_T4F_V4F = 10792;
pub const GL_TEXTURE = 5890;
pub const GL_TEXTURE_1D = 3552;
pub const GL_TEXTURE_2D = 3553;
pub const GL_TEXTURE_ALPHA_SIZE = 32863;
pub const GL_TEXTURE_BINDING_1D = 32872;
pub const GL_TEXTURE_BINDING_2D = 32873;
pub const GL_TEXTURE_BIT = 262144;
pub const GL_TEXTURE_BLUE_SIZE = 32862;
pub const GL_TEXTURE_BORDER = 4101;
pub const GL_TEXTURE_BORDER_COLOR = 4100;
pub const GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
pub const GL_TEXTURE_COORD_ARRAY = 32888;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907;
pub const GL_TEXTURE_COORD_ARRAY_EXT = 32888;
pub const GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914;
pub const GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906;
pub const GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905;
pub const GL_TEXTURE_ENV = 8960;
pub const GL_TEXTURE_ENV_COLOR = 8705;
pub const GL_TEXTURE_ENV_MODE = 8704;
pub const GL_TEXTURE_GEN_MODE = 9472;
pub const GL_TEXTURE_GEN_Q = 3171;
pub const GL_TEXTURE_GEN_R = 3170;
pub const GL_TEXTURE_GEN_S = 3168;
pub const GL_TEXTURE_GEN_T = 3169;
pub const GL_TEXTURE_GREEN_SIZE = 32861;
pub const GL_TEXTURE_HEIGHT = 4097;
pub const GL_TEXTURE_INTENSITY_SIZE = 32865;
pub const GL_TEXTURE_INTERNAL_FORMAT = 4099;
pub const GL_TEXTURE_LUMINANCE_SIZE = 32864;
pub const GL_TEXTURE_MAG_FILTER = 10240;
pub const GL_TEXTURE_MATRIX = 2984;
pub const GL_TEXTURE_MIN_FILTER = 10241;
pub const GL_TEXTURE_PRIORITY = 32870;
pub const GL_TEXTURE_RED_SIZE = 32860;
pub const GL_TEXTURE_RESIDENT = 32871;
pub const GL_TEXTURE_STACK_DEPTH = 2981;
pub const GL_TEXTURE_WIDTH = 4096;
pub const GL_TEXTURE_WRAP_S = 10242;
pub const GL_TEXTURE_WRAP_T = 10243;
pub const GL_TRANSFORM_BIT = 4096;
pub const GL_TRIANGLES = 4;
pub const GL_TRIANGLE_FAN = 6;
pub const GL_TRIANGLE_STRIP = 5;
pub const GL_TRUE = 1;
pub const GL_UNPACK_ALIGNMENT = 3317;
pub const GL_UNPACK_LSB_FIRST = 3313;
pub const GL_UNPACK_ROW_LENGTH = 3314;
pub const GL_UNPACK_SKIP_PIXELS = 3316;
pub const GL_UNPACK_SKIP_ROWS = 3315;
pub const GL_UNPACK_SWAP_BYTES = 3312;
pub const GL_UNSIGNED_BYTE = 5121;
pub const GL_UNSIGNED_INT = 5125;
pub const GL_UNSIGNED_SHORT = 5123;
pub const GL_V2F = 10784;
pub const GL_V3F = 10785;
pub const GL_VENDOR = 7936;
pub const GL_VERSION = 7938;
pub const GL_VERSION_1_1 = 1;
pub const GL_VERTEX_ARRAY = 32884;
pub const GL_VERTEX_ARRAY_COUNT_EXT = 32893;
pub const GL_VERTEX_ARRAY_EXT = 32884;
pub const GL_VERTEX_ARRAY_POINTER = 32910;
pub const GL_VERTEX_ARRAY_POINTER_EXT = 32910;
pub const GL_VERTEX_ARRAY_SIZE = 32890;
pub const GL_VERTEX_ARRAY_SIZE_EXT = 32890;
pub const GL_VERTEX_ARRAY_STRIDE = 32892;
pub const GL_VERTEX_ARRAY_STRIDE_EXT = 32892;
pub const GL_VERTEX_ARRAY_TYPE = 32891;
pub const GL_VERTEX_ARRAY_TYPE_EXT = 32891;
pub const GL_VIEWPORT = 2978;
pub const GL_VIEWPORT_BIT = 2048;
pub const GL_WIN_draw_range_elements = 1;
pub const GL_WIN_swap_hint = 1;
pub const GL_XOR = 5382;
pub const GL_ZERO = 0;
pub const GL_ZOOM_X = 3350;
pub const GL_ZOOM_Y = 3351;
pub extern "opengl32" stdcallcc fn glAccum(op: GLenum, value: GLfloat) void;
pub extern "opengl32" stdcallcc fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern "opengl32" stdcallcc fn glAreTexturesResident(n: GLsizei, textures: ?*const GLuint, residences: ?*GLboolean) GLboolean;
pub extern "opengl32" stdcallcc fn glArrayElement(i: GLint) void;
pub extern "opengl32" stdcallcc fn glBegin(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern "opengl32" stdcallcc fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ?[*]const GLubyte) void;
pub extern "opengl32" stdcallcc fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern "opengl32" stdcallcc fn glCallList(list: GLuint) void;
pub extern "opengl32" stdcallcc fn glCallLists(n: GLsizei, type_0: GLenum, lists: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glClear(mask: GLbitfield) void;
pub extern "opengl32" stdcallcc fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern "opengl32" stdcallcc fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern "opengl32" stdcallcc fn glClearDepth(depth: GLclampd) void;
pub extern "opengl32" stdcallcc fn glClearIndex(c: GLfloat) void;
pub extern "opengl32" stdcallcc fn glClearStencil(s: GLint) void;
pub extern "opengl32" stdcallcc fn glClipPlane(plane: GLenum, equation: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern "opengl32" stdcallcc fn glColor3bv(v: ?*const GLbyte) void;
pub extern "opengl32" stdcallcc fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern "opengl32" stdcallcc fn glColor3dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern "opengl32" stdcallcc fn glColor3fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern "opengl32" stdcallcc fn glColor3iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern "opengl32" stdcallcc fn glColor3sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern "opengl32" stdcallcc fn glColor3ubv(v: ?[*]const GLubyte) void;
pub extern "opengl32" stdcallcc fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern "opengl32" stdcallcc fn glColor3uiv(v: ?*const GLuint) void;
pub extern "opengl32" stdcallcc fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern "opengl32" stdcallcc fn glColor3usv(v: ?*const GLushort) void;
pub extern "opengl32" stdcallcc fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern "opengl32" stdcallcc fn glColor4bv(v: ?*const GLbyte) void;
pub extern "opengl32" stdcallcc fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern "opengl32" stdcallcc fn glColor4dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern "opengl32" stdcallcc fn glColor4fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern "opengl32" stdcallcc fn glColor4iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern "opengl32" stdcallcc fn glColor4sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern "opengl32" stdcallcc fn glColor4ubv(v: ?[*]const GLubyte) void;
pub extern "opengl32" stdcallcc fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern "opengl32" stdcallcc fn glColor4uiv(v: ?*const GLuint) void;
pub extern "opengl32" stdcallcc fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern "opengl32" stdcallcc fn glColor4usv(v: ?*const GLushort) void;
pub extern "opengl32" stdcallcc fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern "opengl32" stdcallcc fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glColorPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_0: GLenum) void;
pub extern "opengl32" stdcallcc fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern "opengl32" stdcallcc fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern "opengl32" stdcallcc fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern "opengl32" stdcallcc fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern "opengl32" stdcallcc fn glCullFace(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern "opengl32" stdcallcc fn glDeleteTextures(n: GLsizei, textures: ?*const GLuint) void;
pub extern "opengl32" stdcallcc fn glDepthFunc(func: GLenum) void;
pub extern "opengl32" stdcallcc fn glDepthMask(flag: GLboolean) void;
pub extern "opengl32" stdcallcc fn glDepthRange(zNear: GLclampd, zFar: GLclampd) void;
pub extern "opengl32" stdcallcc fn glDisable(cap: GLenum) void;
pub extern "opengl32" stdcallcc fn glDisableClientState(array: GLenum) void;
pub extern "opengl32" stdcallcc fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern "opengl32" stdcallcc fn glDrawBuffer(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glDrawElements(mode: GLenum, count: GLsizei, type_0: GLenum, indices: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glEdgeFlag(flag: GLboolean) void;
pub extern "opengl32" stdcallcc fn glEdgeFlagPointer(stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glEdgeFlagv(flag: ?*const GLboolean) void;
pub extern "opengl32" stdcallcc fn glEnable(cap: GLenum) void;
pub extern "opengl32" stdcallcc fn glEnableClientState(array: GLenum) void;
pub extern "opengl32" stdcallcc fn glEnd() void;
pub extern "opengl32" stdcallcc fn glEndList() void;
pub extern "opengl32" stdcallcc fn glEvalCoord1d(u: GLdouble) void;
pub extern "opengl32" stdcallcc fn glEvalCoord1dv(u: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glEvalCoord1f(u: GLfloat) void;
pub extern "opengl32" stdcallcc fn glEvalCoord1fv(u: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern "opengl32" stdcallcc fn glEvalCoord2dv(u: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern "opengl32" stdcallcc fn glEvalCoord2fv(u: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glEvalMesh1(mode: GLenum, i1: GLint, i2_0: GLint) void;
pub extern "opengl32" stdcallcc fn glEvalMesh2(mode: GLenum, i1: GLint, i2_0: GLint, j1: GLint, j2: GLint) void;
pub extern "opengl32" stdcallcc fn glEvalPoint1(i: GLint) void;
pub extern "opengl32" stdcallcc fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern "opengl32" stdcallcc fn glFeedbackBuffer(size: GLsizei, type_0: GLenum, buffer: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glFinish() void;
pub extern "opengl32" stdcallcc fn glFlush() void;
pub extern "opengl32" stdcallcc fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glFogfv(pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glFogi(pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glFogiv(pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glFrontFace(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern "opengl32" stdcallcc fn glGenLists(range: GLsizei) GLuint;
pub extern "opengl32" stdcallcc fn glGenTextures(n: GLsizei, textures: ?*GLuint) void;
pub extern "opengl32" stdcallcc fn glGetBooleanv(pname: GLenum, params: ?*GLboolean) void;
pub extern "opengl32" stdcallcc fn glGetClipPlane(plane: GLenum, equation: ?*GLdouble) void;
pub extern "opengl32" stdcallcc fn glGetDoublev(pname: GLenum, params: ?*GLdouble) void;
pub extern "opengl32" stdcallcc fn glGetError() GLenum;
pub extern "opengl32" stdcallcc fn glGetFloatv(pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetIntegerv(pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetLightfv(light: GLenum, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetLightiv(light: GLenum, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetMapdv(target: GLenum, query: GLenum, v: ?*GLdouble) void;
pub extern "opengl32" stdcallcc fn glGetMapfv(target: GLenum, query: GLenum, v: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetMapiv(target: GLenum, query: GLenum, v: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetMaterialfv(face: GLenum, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetMaterialiv(face: GLenum, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetPixelMapfv(map: GLenum, values: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetPixelMapuiv(map: GLenum, values: ?*GLuint) void;
pub extern "opengl32" stdcallcc fn glGetPixelMapusv(map: GLenum, values: ?*GLushort) void;
pub extern "opengl32" stdcallcc fn glGetPointerv(pname: GLenum, params: ?*(?*GLvoid)) void;
pub extern "opengl32" stdcallcc fn glGetPolygonStipple(mask: ?*GLubyte) void;
pub extern "opengl32" stdcallcc fn glGetString(name: GLenum) ?[*]const GLubyte;
pub extern "opengl32" stdcallcc fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetTexEnviv(target: GLenum, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetTexGendv(coord: GLenum, pname: GLenum, params: ?*GLdouble) void;
pub extern "opengl32" stdcallcc fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) void;
pub extern "opengl32" stdcallcc fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: ?*GLfloat) void;
pub extern "opengl32" stdcallcc fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: ?*GLint) void;
pub extern "opengl32" stdcallcc fn glHint(target: GLenum, mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glIndexMask(mask: GLuint) void;
pub extern "opengl32" stdcallcc fn glIndexPointer(type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glIndexd(c: GLdouble) void;
pub extern "opengl32" stdcallcc fn glIndexdv(c: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glIndexf(c: GLfloat) void;
pub extern "opengl32" stdcallcc fn glIndexfv(c: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glIndexi(c: GLint) void;
pub extern "opengl32" stdcallcc fn glIndexiv(c: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glIndexs(c: GLshort) void;
pub extern "opengl32" stdcallcc fn glIndexsv(c: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glIndexub(c: GLubyte) void;
pub extern "opengl32" stdcallcc fn glIndexubv(c: ?[*]const GLubyte) void;
pub extern "opengl32" stdcallcc fn glInitNames() void;
pub extern "opengl32" stdcallcc fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glIsEnabled(cap: GLenum) GLboolean;
pub extern "opengl32" stdcallcc fn glIsList(list: GLuint) GLboolean;
pub extern "opengl32" stdcallcc fn glIsTexture(texture: GLuint) GLboolean;
pub extern "opengl32" stdcallcc fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glLightModelfv(pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glLightModeliv(pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glLightfv(light: GLenum, pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glLightiv(light: GLenum, pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern "opengl32" stdcallcc fn glLineWidth(width: GLfloat) void;
pub extern "opengl32" stdcallcc fn glListBase(base: GLuint) void;
pub extern "opengl32" stdcallcc fn glLoadIdentity() void;
pub extern "opengl32" stdcallcc fn glLoadMatrixd(m: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glLoadMatrixf(m: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glLoadName(name: GLuint) void;
pub extern "opengl32" stdcallcc fn glLogicOp(opcode: GLenum) void;
pub extern "opengl32" stdcallcc fn glMap1d(target: GLenum, u1: GLdouble, u2_0: GLdouble, stride: GLint, order: GLint, points: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glMap1f(target: GLenum, u1: GLfloat, u2_0: GLfloat, stride: GLint, order: GLint, points: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glMap2d(target: GLenum, u1: GLdouble, u2_0: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glMap2f(target: GLenum, u1: GLfloat, u2_0: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glMapGrid1d(un: GLint, u1: GLdouble, u2_0: GLdouble) void;
pub extern "opengl32" stdcallcc fn glMapGrid1f(un: GLint, u1: GLfloat, u2_0: GLfloat) void;
pub extern "opengl32" stdcallcc fn glMapGrid2d(un: GLint, u1: GLdouble, u2_0: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern "opengl32" stdcallcc fn glMapGrid2f(un: GLint, u1: GLfloat, u2_0: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern "opengl32" stdcallcc fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glMaterialfv(face: GLenum, pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glMaterialiv(face: GLenum, pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glMatrixMode(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glMultMatrixd(m: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glMultMatrixf(m: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glNewList(list: GLuint, mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern "opengl32" stdcallcc fn glNormal3bv(v: ?*const GLbyte) void;
pub extern "opengl32" stdcallcc fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern "opengl32" stdcallcc fn glNormal3dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern "opengl32" stdcallcc fn glNormal3fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern "opengl32" stdcallcc fn glNormal3iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern "opengl32" stdcallcc fn glNormal3sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glNormalPointer(type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern "opengl32" stdcallcc fn glPassThrough(token: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: ?*const GLuint) void;
pub extern "opengl32" stdcallcc fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: ?*const GLushort) void;
pub extern "opengl32" stdcallcc fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPointSize(size: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern "opengl32" stdcallcc fn glPolygonStipple(mask: ?[*]const GLubyte) void;
pub extern "opengl32" stdcallcc fn glPopAttrib() void;
pub extern "opengl32" stdcallcc fn glPopClientAttrib() void;
pub extern "opengl32" stdcallcc fn glPopMatrix() void;
pub extern "opengl32" stdcallcc fn glPopName() void;
pub extern "opengl32" stdcallcc fn glPrioritizeTextures(n: GLsizei, textures: ?*const GLuint, priorities: ?*const GLclampf) void;
pub extern "opengl32" stdcallcc fn glPushAttrib(mask: GLbitfield) void;
pub extern "opengl32" stdcallcc fn glPushClientAttrib(mask: GLbitfield) void;
pub extern "opengl32" stdcallcc fn glPushMatrix() void;
pub extern "opengl32" stdcallcc fn glPushName(name: GLuint) void;
pub extern "opengl32" stdcallcc fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos2dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos2fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos2iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern "opengl32" stdcallcc fn glRasterPos2sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos3dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos3fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos3iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern "opengl32" stdcallcc fn glRasterPos3sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos4dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos4fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos4iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern "opengl32" stdcallcc fn glRasterPos4sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glReadBuffer(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*GLvoid) void;
pub extern "opengl32" stdcallcc fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern "opengl32" stdcallcc fn glRectdv(v1: ?*const GLdouble, v2: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern "opengl32" stdcallcc fn glRectfv(v1: ?*const GLfloat, v2: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern "opengl32" stdcallcc fn glRectiv(v1: ?*const GLint, v2: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern "opengl32" stdcallcc fn glRectsv(v1: ?*const GLshort, v2: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glRenderMode(mode: GLenum) GLint;
pub extern "opengl32" stdcallcc fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern "opengl32" stdcallcc fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern "opengl32" stdcallcc fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern "opengl32" stdcallcc fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern "opengl32" stdcallcc fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern "opengl32" stdcallcc fn glSelectBuffer(size: GLsizei, buffer: ?*GLuint) void;
pub extern "opengl32" stdcallcc fn glShadeModel(mode: GLenum) void;
pub extern "opengl32" stdcallcc fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern "opengl32" stdcallcc fn glStencilMask(mask: GLuint) void;
pub extern "opengl32" stdcallcc fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern "opengl32" stdcallcc fn glTexCoord1d(s: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord1dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord1f(s: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord1fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord1i(s: GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord1iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord1s(s: GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord1sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord2dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord2fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord2iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord2sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord3dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord3fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord3iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord3sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord4dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord4fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord4iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoord4sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glTexCoordPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexEnvfv(target: GLenum, pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glTexEnviv(target: GLenum, pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexGendv(coord: GLenum, pname: GLenum, params: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexGenfv(coord: GLenum, pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glTexGeniv(coord: GLenum, pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexParameterfv(target: GLenum, pname: GLenum, params: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern "opengl32" stdcallcc fn glTexParameteriv(target: GLenum, pname: GLenum, params: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_0: GLenum, pixels: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern "opengl32" stdcallcc fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex2dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex2fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex2i(x: GLint, y: GLint) void;
pub extern "opengl32" stdcallcc fn glVertex2iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern "opengl32" stdcallcc fn glVertex2sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex3dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex3fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern "opengl32" stdcallcc fn glVertex3iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern "opengl32" stdcallcc fn glVertex3sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex4dv(v: ?*const GLdouble) void;
pub extern "opengl32" stdcallcc fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex4fv(v: ?*const GLfloat) void;
pub extern "opengl32" stdcallcc fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern "opengl32" stdcallcc fn glVertex4iv(v: ?*const GLint) void;
pub extern "opengl32" stdcallcc fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern "opengl32" stdcallcc fn glVertex4sv(v: ?*const GLshort) void;
pub extern "opengl32" stdcallcc fn glVertexPointer(size: GLint, type_0: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern "opengl32" stdcallcc fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
